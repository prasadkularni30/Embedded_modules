
STM_CAN_RX_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004148  08004148  00005148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041bc  080041bc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080041bc  080041bc  000051bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041c4  080041c4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c4  080041c4  000051c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080041cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000001f8  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000903c  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190c  00000000  00000000  0000f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  000109d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000692  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b78  00000000  00000000  0001190a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af2e  00000000  00000000  00032482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c3e  00000000  00000000  0003d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102fee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a34  00000000  00000000  00103034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00105a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004130 	.word	0x08004130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004130 	.word	0x08004130

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__gedf2>:
 80005e8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ec:	e006      	b.n	80005fc <__cmpdf2+0x4>
 80005ee:	bf00      	nop

080005f0 <__ledf2>:
 80005f0:	f04f 0c01 	mov.w	ip, #1
 80005f4:	e002      	b.n	80005fc <__cmpdf2+0x4>
 80005f6:	bf00      	nop

080005f8 <__cmpdf2>:
 80005f8:	f04f 0c01 	mov.w	ip, #1
 80005fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000608:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800060c:	bf18      	it	ne
 800060e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000612:	d01b      	beq.n	800064c <__cmpdf2+0x54>
 8000614:	b001      	add	sp, #4
 8000616:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800061a:	bf0c      	ite	eq
 800061c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000620:	ea91 0f03 	teqne	r1, r3
 8000624:	bf02      	ittt	eq
 8000626:	ea90 0f02 	teqeq	r0, r2
 800062a:	2000      	moveq	r0, #0
 800062c:	4770      	bxeq	lr
 800062e:	f110 0f00 	cmn.w	r0, #0
 8000632:	ea91 0f03 	teq	r1, r3
 8000636:	bf58      	it	pl
 8000638:	4299      	cmppl	r1, r3
 800063a:	bf08      	it	eq
 800063c:	4290      	cmpeq	r0, r2
 800063e:	bf2c      	ite	cs
 8000640:	17d8      	asrcs	r0, r3, #31
 8000642:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000646:	f040 0001 	orr.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000654:	d102      	bne.n	800065c <__cmpdf2+0x64>
 8000656:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800065a:	d107      	bne.n	800066c <__cmpdf2+0x74>
 800065c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d1d6      	bne.n	8000614 <__cmpdf2+0x1c>
 8000666:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800066a:	d0d3      	beq.n	8000614 <__cmpdf2+0x1c>
 800066c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_cdrcmple>:
 8000674:	4684      	mov	ip, r0
 8000676:	4610      	mov	r0, r2
 8000678:	4662      	mov	r2, ip
 800067a:	468c      	mov	ip, r1
 800067c:	4619      	mov	r1, r3
 800067e:	4663      	mov	r3, ip
 8000680:	e000      	b.n	8000684 <__aeabi_cdcmpeq>
 8000682:	bf00      	nop

08000684 <__aeabi_cdcmpeq>:
 8000684:	b501      	push	{r0, lr}
 8000686:	f7ff ffb7 	bl	80005f8 <__cmpdf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd01      	pop	{r0, pc}

08000694 <__aeabi_dcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cdcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_dcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cdcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_dcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cdcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_dcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffce 	bl	8000674 <__aeabi_cdrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_dcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc4 	bl	8000674 <__aeabi_cdrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_d2uiz>:
 80006f8:	004a      	lsls	r2, r1, #1
 80006fa:	d211      	bcs.n	8000720 <__aeabi_d2uiz+0x28>
 80006fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000700:	d211      	bcs.n	8000726 <__aeabi_d2uiz+0x2e>
 8000702:	d50d      	bpl.n	8000720 <__aeabi_d2uiz+0x28>
 8000704:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000708:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800070c:	d40e      	bmi.n	800072c <__aeabi_d2uiz+0x34>
 800070e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000712:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000716:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800071a:	fa23 f002 	lsr.w	r0, r3, r2
 800071e:	4770      	bx	lr
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	4770      	bx	lr
 8000726:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800072a:	d102      	bne.n	8000732 <__aeabi_d2uiz+0x3a>
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	4770      	bx	lr
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	4770      	bx	lr

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b96a 	b.w	8000a24 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	460c      	mov	r4, r1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d14e      	bne.n	8000812 <__udivmoddi4+0xaa>
 8000774:	4694      	mov	ip, r2
 8000776:	458c      	cmp	ip, r1
 8000778:	4686      	mov	lr, r0
 800077a:	fab2 f282 	clz	r2, r2
 800077e:	d962      	bls.n	8000846 <__udivmoddi4+0xde>
 8000780:	b14a      	cbz	r2, 8000796 <__udivmoddi4+0x2e>
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	4091      	lsls	r1, r2
 8000788:	fa20 f303 	lsr.w	r3, r0, r3
 800078c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000790:	4319      	orrs	r1, r3
 8000792:	fa00 fe02 	lsl.w	lr, r0, r2
 8000796:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800079a:	fa1f f68c 	uxth.w	r6, ip
 800079e:	fbb1 f4f7 	udiv	r4, r1, r7
 80007a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007a6:	fb07 1114 	mls	r1, r7, r4, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb04 f106 	mul.w	r1, r4, r6
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x64>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80007be:	f080 8112 	bcs.w	80009e6 <__udivmoddi4+0x27e>
 80007c2:	4299      	cmp	r1, r3
 80007c4:	f240 810f 	bls.w	80009e6 <__udivmoddi4+0x27e>
 80007c8:	3c02      	subs	r4, #2
 80007ca:	4463      	add	r3, ip
 80007cc:	1a59      	subs	r1, r3, r1
 80007ce:	fa1f f38e 	uxth.w	r3, lr
 80007d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007d6:	fb07 1110 	mls	r1, r7, r0, r1
 80007da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007de:	fb00 f606 	mul.w	r6, r0, r6
 80007e2:	429e      	cmp	r6, r3
 80007e4:	d90a      	bls.n	80007fc <__udivmoddi4+0x94>
 80007e6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ee:	f080 80fc 	bcs.w	80009ea <__udivmoddi4+0x282>
 80007f2:	429e      	cmp	r6, r3
 80007f4:	f240 80f9 	bls.w	80009ea <__udivmoddi4+0x282>
 80007f8:	4463      	add	r3, ip
 80007fa:	3802      	subs	r0, #2
 80007fc:	1b9b      	subs	r3, r3, r6
 80007fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000802:	2100      	movs	r1, #0
 8000804:	b11d      	cbz	r5, 800080e <__udivmoddi4+0xa6>
 8000806:	40d3      	lsrs	r3, r2
 8000808:	2200      	movs	r2, #0
 800080a:	e9c5 3200 	strd	r3, r2, [r5]
 800080e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000812:	428b      	cmp	r3, r1
 8000814:	d905      	bls.n	8000822 <__udivmoddi4+0xba>
 8000816:	b10d      	cbz	r5, 800081c <__udivmoddi4+0xb4>
 8000818:	e9c5 0100 	strd	r0, r1, [r5]
 800081c:	2100      	movs	r1, #0
 800081e:	4608      	mov	r0, r1
 8000820:	e7f5      	b.n	800080e <__udivmoddi4+0xa6>
 8000822:	fab3 f183 	clz	r1, r3
 8000826:	2900      	cmp	r1, #0
 8000828:	d146      	bne.n	80008b8 <__udivmoddi4+0x150>
 800082a:	42a3      	cmp	r3, r4
 800082c:	d302      	bcc.n	8000834 <__udivmoddi4+0xcc>
 800082e:	4290      	cmp	r0, r2
 8000830:	f0c0 80f0 	bcc.w	8000a14 <__udivmoddi4+0x2ac>
 8000834:	1a86      	subs	r6, r0, r2
 8000836:	eb64 0303 	sbc.w	r3, r4, r3
 800083a:	2001      	movs	r0, #1
 800083c:	2d00      	cmp	r5, #0
 800083e:	d0e6      	beq.n	800080e <__udivmoddi4+0xa6>
 8000840:	e9c5 6300 	strd	r6, r3, [r5]
 8000844:	e7e3      	b.n	800080e <__udivmoddi4+0xa6>
 8000846:	2a00      	cmp	r2, #0
 8000848:	f040 8090 	bne.w	800096c <__udivmoddi4+0x204>
 800084c:	eba1 040c 	sub.w	r4, r1, ip
 8000850:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000854:	fa1f f78c 	uxth.w	r7, ip
 8000858:	2101      	movs	r1, #1
 800085a:	fbb4 f6f8 	udiv	r6, r4, r8
 800085e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000862:	fb08 4416 	mls	r4, r8, r6, r4
 8000866:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800086a:	fb07 f006 	mul.w	r0, r7, r6
 800086e:	4298      	cmp	r0, r3
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x11c>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f106 34ff 	add.w	r4, r6, #4294967295
 800087a:	d202      	bcs.n	8000882 <__udivmoddi4+0x11a>
 800087c:	4298      	cmp	r0, r3
 800087e:	f200 80cd 	bhi.w	8000a1c <__udivmoddi4+0x2b4>
 8000882:	4626      	mov	r6, r4
 8000884:	1a1c      	subs	r4, r3, r0
 8000886:	fa1f f38e 	uxth.w	r3, lr
 800088a:	fbb4 f0f8 	udiv	r0, r4, r8
 800088e:	fb08 4410 	mls	r4, r8, r0, r4
 8000892:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000896:	fb00 f707 	mul.w	r7, r0, r7
 800089a:	429f      	cmp	r7, r3
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x148>
 800089e:	eb1c 0303 	adds.w	r3, ip, r3
 80008a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a6:	d202      	bcs.n	80008ae <__udivmoddi4+0x146>
 80008a8:	429f      	cmp	r7, r3
 80008aa:	f200 80b0 	bhi.w	8000a0e <__udivmoddi4+0x2a6>
 80008ae:	4620      	mov	r0, r4
 80008b0:	1bdb      	subs	r3, r3, r7
 80008b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008b6:	e7a5      	b.n	8000804 <__udivmoddi4+0x9c>
 80008b8:	f1c1 0620 	rsb	r6, r1, #32
 80008bc:	408b      	lsls	r3, r1
 80008be:	fa22 f706 	lsr.w	r7, r2, r6
 80008c2:	431f      	orrs	r7, r3
 80008c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008c8:	fa04 f301 	lsl.w	r3, r4, r1
 80008cc:	ea43 030c 	orr.w	r3, r3, ip
 80008d0:	40f4      	lsrs	r4, r6
 80008d2:	fa00 f801 	lsl.w	r8, r0, r1
 80008d6:	0c38      	lsrs	r0, r7, #16
 80008d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008dc:	fbb4 fef0 	udiv	lr, r4, r0
 80008e0:	fa1f fc87 	uxth.w	ip, r7
 80008e4:	fb00 441e 	mls	r4, r0, lr, r4
 80008e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ec:	fb0e f90c 	mul.w	r9, lr, ip
 80008f0:	45a1      	cmp	r9, r4
 80008f2:	fa02 f201 	lsl.w	r2, r2, r1
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x1a6>
 80008f8:	193c      	adds	r4, r7, r4
 80008fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008fe:	f080 8084 	bcs.w	8000a0a <__udivmoddi4+0x2a2>
 8000902:	45a1      	cmp	r9, r4
 8000904:	f240 8081 	bls.w	8000a0a <__udivmoddi4+0x2a2>
 8000908:	f1ae 0e02 	sub.w	lr, lr, #2
 800090c:	443c      	add	r4, r7
 800090e:	eba4 0409 	sub.w	r4, r4, r9
 8000912:	fa1f f983 	uxth.w	r9, r3
 8000916:	fbb4 f3f0 	udiv	r3, r4, r0
 800091a:	fb00 4413 	mls	r4, r0, r3, r4
 800091e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000922:	fb03 fc0c 	mul.w	ip, r3, ip
 8000926:	45a4      	cmp	ip, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x1d2>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000930:	d267      	bcs.n	8000a02 <__udivmoddi4+0x29a>
 8000932:	45a4      	cmp	ip, r4
 8000934:	d965      	bls.n	8000a02 <__udivmoddi4+0x29a>
 8000936:	3b02      	subs	r3, #2
 8000938:	443c      	add	r4, r7
 800093a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800093e:	fba0 9302 	umull	r9, r3, r0, r2
 8000942:	eba4 040c 	sub.w	r4, r4, ip
 8000946:	429c      	cmp	r4, r3
 8000948:	46ce      	mov	lr, r9
 800094a:	469c      	mov	ip, r3
 800094c:	d351      	bcc.n	80009f2 <__udivmoddi4+0x28a>
 800094e:	d04e      	beq.n	80009ee <__udivmoddi4+0x286>
 8000950:	b155      	cbz	r5, 8000968 <__udivmoddi4+0x200>
 8000952:	ebb8 030e 	subs.w	r3, r8, lr
 8000956:	eb64 040c 	sbc.w	r4, r4, ip
 800095a:	fa04 f606 	lsl.w	r6, r4, r6
 800095e:	40cb      	lsrs	r3, r1
 8000960:	431e      	orrs	r6, r3
 8000962:	40cc      	lsrs	r4, r1
 8000964:	e9c5 6400 	strd	r6, r4, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	e750      	b.n	800080e <__udivmoddi4+0xa6>
 800096c:	f1c2 0320 	rsb	r3, r2, #32
 8000970:	fa20 f103 	lsr.w	r1, r0, r3
 8000974:	fa0c fc02 	lsl.w	ip, ip, r2
 8000978:	fa24 f303 	lsr.w	r3, r4, r3
 800097c:	4094      	lsls	r4, r2
 800097e:	430c      	orrs	r4, r1
 8000980:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000984:	fa00 fe02 	lsl.w	lr, r0, r2
 8000988:	fa1f f78c 	uxth.w	r7, ip
 800098c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000990:	fb08 3110 	mls	r1, r8, r0, r3
 8000994:	0c23      	lsrs	r3, r4, #16
 8000996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800099a:	fb00 f107 	mul.w	r1, r0, r7
 800099e:	4299      	cmp	r1, r3
 80009a0:	d908      	bls.n	80009b4 <__udivmoddi4+0x24c>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009aa:	d22c      	bcs.n	8000a06 <__udivmoddi4+0x29e>
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d92a      	bls.n	8000a06 <__udivmoddi4+0x29e>
 80009b0:	3802      	subs	r0, #2
 80009b2:	4463      	add	r3, ip
 80009b4:	1a5b      	subs	r3, r3, r1
 80009b6:	b2a4      	uxth	r4, r4
 80009b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009bc:	fb08 3311 	mls	r3, r8, r1, r3
 80009c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c4:	fb01 f307 	mul.w	r3, r1, r7
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	d908      	bls.n	80009de <__udivmoddi4+0x276>
 80009cc:	eb1c 0404 	adds.w	r4, ip, r4
 80009d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009d4:	d213      	bcs.n	80009fe <__udivmoddi4+0x296>
 80009d6:	42a3      	cmp	r3, r4
 80009d8:	d911      	bls.n	80009fe <__udivmoddi4+0x296>
 80009da:	3902      	subs	r1, #2
 80009dc:	4464      	add	r4, ip
 80009de:	1ae4      	subs	r4, r4, r3
 80009e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009e4:	e739      	b.n	800085a <__udivmoddi4+0xf2>
 80009e6:	4604      	mov	r4, r0
 80009e8:	e6f0      	b.n	80007cc <__udivmoddi4+0x64>
 80009ea:	4608      	mov	r0, r1
 80009ec:	e706      	b.n	80007fc <__udivmoddi4+0x94>
 80009ee:	45c8      	cmp	r8, r9
 80009f0:	d2ae      	bcs.n	8000950 <__udivmoddi4+0x1e8>
 80009f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009fa:	3801      	subs	r0, #1
 80009fc:	e7a8      	b.n	8000950 <__udivmoddi4+0x1e8>
 80009fe:	4631      	mov	r1, r6
 8000a00:	e7ed      	b.n	80009de <__udivmoddi4+0x276>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e799      	b.n	800093a <__udivmoddi4+0x1d2>
 8000a06:	4630      	mov	r0, r6
 8000a08:	e7d4      	b.n	80009b4 <__udivmoddi4+0x24c>
 8000a0a:	46d6      	mov	lr, sl
 8000a0c:	e77f      	b.n	800090e <__udivmoddi4+0x1a6>
 8000a0e:	4463      	add	r3, ip
 8000a10:	3802      	subs	r0, #2
 8000a12:	e74d      	b.n	80008b0 <__udivmoddi4+0x148>
 8000a14:	4606      	mov	r6, r0
 8000a16:	4623      	mov	r3, r4
 8000a18:	4608      	mov	r0, r1
 8000a1a:	e70f      	b.n	800083c <__udivmoddi4+0xd4>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	4463      	add	r3, ip
 8000a20:	e730      	b.n	8000884 <__udivmoddi4+0x11c>
 8000a22:	bf00      	nop

08000a24 <__aeabi_idiv0>:
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <lcd_send_string>:

extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E // Change this according to your setup

void lcd_send_string(char *str)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8000a30:	e006      	b.n	8000a40 <lcd_send_string+0x18>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f83a 	bl	8000ab4 <lcd_send_data>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f4      	bne.n	8000a32 <lcd_send_string+0xa>
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f023 030f 	bic.w	r3, r3, #15
 8000a64:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	f043 030c 	orr.w	r3, r3, #12
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
 8000a82:	f043 030c 	orr.w	r3, r3, #12
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000a94:	f107 0208 	add.w	r2, r7, #8
 8000a98:	2364      	movs	r3, #100	@ 0x64
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	214e      	movs	r1, #78	@ 0x4e
 8000aa0:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <lcd_send_cmd+0x5c>)
 8000aa2:	f001 feb3 	bl	800280c <HAL_I2C_Master_Transmit>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000a0 	.word	0x200000a0

08000ab4 <lcd_send_data>:

void lcd_send_data(char data) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f023 030f 	bic.w	r3, r3, #15
 8000ac4:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	f043 030d 	orr.w	r3, r3, #13
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	f043 0309 	orr.w	r3, r3, #9
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	f043 030d 	orr.w	r3, r3, #13
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	f043 0309 	orr.w	r3, r3, #9
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000af4:	f107 0208 	add.w	r2, r7, #8
 8000af8:	2364      	movs	r3, #100	@ 0x64
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2304      	movs	r3, #4
 8000afe:	214e      	movs	r1, #78	@ 0x4e
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <lcd_send_data+0x5c>)
 8000b02:	f001 fe83 	bl	800280c <HAL_I2C_Master_Transmit>
  //  HAL_Delay(50);
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000a0 	.word	0x200000a0

08000b14 <lcd_clear>:

void lcd_clear(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff ff9b 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(2);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f000 fcac 	bl	800147c <HAL_Delay>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
    switch (row) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d81f      	bhi.n	8000b78 <lcd_put_cur+0x50>
 8000b38:	a201      	add	r2, pc, #4	@ (adr r2, 8000b40 <lcd_put_cur+0x18>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000b51 	.word	0x08000b51
 8000b44:	08000b5b 	.word	0x08000b5b
 8000b48:	08000b65 	.word	0x08000b65
 8000b4c:	08000b6f 	.word	0x08000b6f
        case 0:
            col |= 0x80;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b56:	603b      	str	r3, [r7, #0]
            break;
 8000b58:	e00e      	b.n	8000b78 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000b60:	603b      	str	r3, [r7, #0]
            break;
 8000b62:	e009      	b.n	8000b78 <lcd_put_cur+0x50>
        case 2:
            col |= 0x90;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8000b6a:	603b      	str	r3, [r7, #0]
            break;
 8000b6c:	e004      	b.n	8000b78 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD0;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8000b74:	603b      	str	r3, [r7, #0]
            break;
 8000b76:	bf00      	nop
    }
    lcd_send_cmd(col);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff69 	bl	8000a54 <lcd_send_cmd>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop

08000b8c <lcd_init>:

void lcd_init(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f000 fc73 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x30);
 8000b96:	2030      	movs	r0, #48	@ 0x30
 8000b98:	f7ff ff5c 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(5);
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	f000 fc6d 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x30);
 8000ba2:	2030      	movs	r0, #48	@ 0x30
 8000ba4:	f7ff ff56 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 fc67 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x30);
 8000bae:	2030      	movs	r0, #48	@ 0x30
 8000bb0:	f7ff ff50 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(10);
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	f000 fc61 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x20);
 8000bba:	2020      	movs	r0, #32
 8000bbc:	f7ff ff4a 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(10);
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f000 fc5b 	bl	800147c <HAL_Delay>

    lcd_send_cmd(0x28);
 8000bc6:	2028      	movs	r0, #40	@ 0x28
 8000bc8:	f7ff ff44 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f000 fc55 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x08);
 8000bd2:	2008      	movs	r0, #8
 8000bd4:	f7ff ff3e 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f000 fc4f 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x01);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff ff38 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fc49 	bl	800147c <HAL_Delay>
    HAL_Delay(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 fc46 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x06);
 8000bf0:	2006      	movs	r0, #6
 8000bf2:	f7ff ff2f 	bl	8000a54 <lcd_send_cmd>
    HAL_Delay(1);
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 fc40 	bl	800147c <HAL_Delay>
    lcd_send_cmd(0x0C);
 8000bfc:	200c      	movs	r0, #12
 8000bfe:	f7ff ff29 	bl	8000a54 <lcd_send_cmd>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fbc4 	bl	8001398 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f856 	bl	8000cc0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f916 	bl	8000e44 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000c18:	f000 f8b0 	bl	8000d7c <MX_CAN2_Init>
  MX_I2C1_Init();
 8000c1c:	f000 f8e4 	bl	8000de8 <MX_I2C1_Init>
  LCD_Init();
 8000c20:	f000 f962 	bl	8000ee8 <LCD_Init>
  /* USER CODE BEGIN 2 */

  CAN_Filter_Config();
 8000c24:	f000 f966 	bl	8000ef4 <CAN_Filter_Config>

  if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8000c28:	4821      	ldr	r0, [pc, #132]	@ (8000cb0 <main+0xa8>)
 8000c2a:	f000 fe27 	bl	800187c <HAL_CAN_Start>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <main+0x30>
  {
    Error_Handler();
 8000c34:	f000 fa30 	bl	8001098 <Error_Handler>
  }

  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c38:	2102      	movs	r1, #2
 8000c3a:	481d      	ldr	r0, [pc, #116]	@ (8000cb0 <main+0xa8>)
 8000c3c:	f000 ff84 	bl	8001b48 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  min_distance = fmin(rcvd_distance_front,rcvd_distance_rear);
 8000c40:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <main+0xac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fc77 	bl	8000538 <__aeabi_f2d>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	460d      	mov	r5, r1
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <main+0xb0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fc70 	bl	8000538 <__aeabi_f2d>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	ec43 2b11 	vmov	d1, r2, r3
 8000c60:	ec45 4b10 	vmov	d0, r4, r5
 8000c64:	f003 fa10 	bl	8004088 <fmin>
 8000c68:	ec53 2b10 	vmov	r2, r3, d0
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f7ff fd42 	bl	80006f8 <__aeabi_d2uiz>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a11      	ldr	r2, [pc, #68]	@ (8000cbc <main+0xb4>)
 8000c78:	6013      	str	r3, [r2, #0]
	  setBuzzerFrequency(min_distance);
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <main+0xb4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f986 	bl	8000f90 <setBuzzerFrequency>
	  displayDistances(rcvd_distance_front,rcvd_distance_rear);
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <main+0xac>)
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <main+0xb0>)
 8000c90:	edd3 7a00 	vldr	s15, [r3]
 8000c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c98:	ee17 1a90 	vmov	r1, s15
 8000c9c:	ee17 0a10 	vmov	r0, s14
 8000ca0:	f000 f9aa 	bl	8000ff8 <displayDistances>
	  HAL_Delay(80);            // Wait for 80 ms
 8000ca4:	2050      	movs	r0, #80	@ 0x50
 8000ca6:	f000 fbe9 	bl	800147c <HAL_Delay>
	  min_distance = fmin(rcvd_distance_front,rcvd_distance_rear);
 8000caa:	bf00      	nop
 8000cac:	e7c8      	b.n	8000c40 <main+0x38>
 8000cae:	bf00      	nop
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	200000f4 	.word	0x200000f4
 8000cb8:	200000f8 	.word	0x200000f8
 8000cbc:	200000fc 	.word	0x200000fc

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	@ 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	@ 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fd5a 	bl	8003788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <SystemClock_Config+0xb4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <SystemClock_Config+0xb4>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <SystemClock_Config+0xb4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <SystemClock_Config+0xb8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1b      	ldr	r2, [pc, #108]	@ (8000d78 <SystemClock_Config+0xb8>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <SystemClock_Config+0xb8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d24:	2310      	movs	r3, #16
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 f8c5 	bl	8002ec0 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d3c:	f000 f9ac 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fb28 	bl	80033b0 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d66:	f000 f997 	bl	8001098 <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3750      	adds	r7, #80	@ 0x50
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000d82:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <MX_CAN2_Init+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 24;
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000d88:	2218      	movs	r2, #24
 8000d8a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000d9a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000d9e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000da2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000da6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_CAN2_Init+0x64>)
 8000dce:	f000 fb79 	bl	80014c4 <HAL_CAN_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000dd8:	f000 f95e 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000078 	.word	0x20000078
 8000de4:	40006800 	.word	0x40006800

08000de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000dee:	4a13      	ldr	r2, [pc, #76]	@ (8000e3c <MX_I2C1_Init+0x54>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000df4:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <MX_I2C1_Init+0x58>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000e06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e18:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	@ (8000e38 <MX_I2C1_Init+0x50>)
 8000e26:	f001 fbad 	bl	8002584 <HAL_I2C_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e30:	f000 f932 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000a0 	.word	0x200000a0
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	000186a0 	.word	0x000186a0

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_GPIO_Init+0x9c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <MX_GPIO_Init+0xa0>)
 8000eb6:	f001 fb4b 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_GPIO_Init+0xa0>)
 8000ed4:	f001 f9a0 	bl	8002218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020c00 	.word	0x40020c00

08000ee8 <LCD_Init>:

/* USER CODE BEGIN 4 */
void LCD_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	lcd_init();
 8000eec:	f7ff fe4e 	bl	8000b8c <lcd_init>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <CAN_Filter_Config>:
/**
  * @brief This function configures the CAN filter
  * @retval None
  */
void CAN_Filter_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can2_filter_init;
  can2_filter_init.FilterActivation = ENABLE;
 8000efa:	2301      	movs	r3, #1
 8000efc:	623b      	str	r3, [r7, #32]
  can2_filter_init.FilterBank = 14;
 8000efe:	230e      	movs	r3, #14
 8000f00:	617b      	str	r3, [r7, #20]
  can2_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  can2_filter_init.FilterIdHigh = 0x0000;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
  can2_filter_init.FilterIdLow = 0x0000;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  can2_filter_init.FilterMaskIdHigh = 0x0000;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  can2_filter_init.FilterMaskIdLow = 0x0000;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  can2_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  can2_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
  can2_filter_init.SlaveStartFilterBank=14;
 8000f1e:	230e      	movs	r3, #14
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
  if(HAL_CAN_ConfigFilter(&hcan2, &can2_filter_init) != HAL_OK)
 8000f22:	463b      	mov	r3, r7
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <CAN_Filter_Config+0x4c>)
 8000f28:	f000 fbc8 	bl	80016bc <HAL_CAN_ConfigFilter>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <CAN_Filter_Config+0x42>
  {
    Error_Handler();
 8000f32:	f000 f8b1 	bl	8001098 <Error_Handler>
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	@ 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000078 	.word	0x20000078

08000f44 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief This function receives a CAN message
  * @retval None
  */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (hcan->Instance == CAN2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d112      	bne.n	8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    {
        /* Receive CAN message */
        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	f107 0214 	add.w	r2, r7, #20
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 fccf 	bl	8001904 <HAL_CAN_GetRxMessage>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
        {
            /* Reception Error */
            Error_Handler();
 8000f6c:	f000 f894 	bl	8001098 <Error_Handler>
        }
        /* Extracting front and rear distance from received CAN buffer into rcvd_distance_front and rcvd_distance_rear variable */
    	memcpy(&rcvd_distance_front,&RxData[0],sizeof(float));
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000f74:	6013      	str	r3, [r2, #0]
    	memcpy(&rcvd_distance_rear,&RxData[4],sizeof(float));
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000f7a:	6013      	str	r3, [r2, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3730      	adds	r7, #48	@ 0x30
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40006800 	.word	0x40006800
 8000f88:	200000f4 	.word	0x200000f4
 8000f8c:	200000f8 	.word	0x200000f8

08000f90 <setBuzzerFrequency>:
/* In this part of the code, the buzzer is controlled based on the min_distance value.
 * The delay duration (period) is calculated by multiplying the min_distance by 5.
 * This means that the closer the object, the shorter the delay, resulting in faster buzzing. */
void setBuzzerFrequency(int distance)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if(distance<30)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b1d      	cmp	r3, #29
 8000f9c:	dc1d      	bgt.n	8000fda <setBuzzerFrequency+0x4a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa4:	4812      	ldr	r0, [pc, #72]	@ (8000ff0 <setBuzzerFrequency+0x60>)
 8000fa6:	f001 fad3 	bl	8002550 <HAL_GPIO_WritePin>
		period=(5 * distance);
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <setBuzzerFrequency+0x64>)
 8000fb6:	601a      	str	r2, [r3, #0]
		HAL_Delay(period);
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <setBuzzerFrequency+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fa5d 	bl	800147c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fc8:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <setBuzzerFrequency+0x60>)
 8000fca:	f001 fac1 	bl	8002550 <HAL_GPIO_WritePin>
		HAL_Delay(period);
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <setBuzzerFrequency+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fa52 	bl	800147c <HAL_Delay>
	}
	else
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
}
 8000fd8:	e005      	b.n	8000fe6 <setBuzzerFrequency+0x56>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <setBuzzerFrequency+0x60>)
 8000fe2:	f001 fab5 	bl	8002550 <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	20000100 	.word	0x20000100

08000ff8 <displayDistances>:

/* Display the received data to LCD */
void displayDistances(int frontDistance, int rearDistance)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
    char buffer[20];
    lcd_clear();
 8001002:	f7ff fd87 	bl	8000b14 <lcd_clear>
    lcd_put_cur(0, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fd8d 	bl	8000b28 <lcd_put_cur>
    sprintf(buffer, "Front Distance:");
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	491e      	ldr	r1, [pc, #120]	@ (800108c <displayDistances+0x94>)
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fb97 	bl	8003748 <siprintf>
    lcd_send_string(buffer);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fd02 	bl	8000a28 <lcd_send_string>

    /* Display front Distance */
    lcd_put_cur(1, 0);
 8001024:	2100      	movs	r1, #0
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fd7e 	bl	8000b28 <lcd_put_cur>
    sprintf(buffer, "%d cm", frontDistance);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4917      	ldr	r1, [pc, #92]	@ (8001090 <displayDistances+0x98>)
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fb87 	bl	8003748 <siprintf>
    lcd_send_string(buffer);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fcf2 	bl	8000a28 <lcd_send_string>

    lcd_put_cur(2, 0);
 8001044:	2100      	movs	r1, #0
 8001046:	2002      	movs	r0, #2
 8001048:	f7ff fd6e 	bl	8000b28 <lcd_put_cur>
    sprintf(buffer, "Rear Distance:");
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4910      	ldr	r1, [pc, #64]	@ (8001094 <displayDistances+0x9c>)
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fb78 	bl	8003748 <siprintf>
    lcd_send_string(buffer);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fce3 	bl	8000a28 <lcd_send_string>

    /* Display rear Distance */
    lcd_put_cur(3, 0);
 8001062:	2100      	movs	r1, #0
 8001064:	2003      	movs	r0, #3
 8001066:	f7ff fd5f 	bl	8000b28 <lcd_put_cur>
    sprintf(buffer, "%d cm", rearDistance);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4907      	ldr	r1, [pc, #28]	@ (8001090 <displayDistances+0x98>)
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fb68 	bl	8003748 <siprintf>
    lcd_send_string(buffer);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fcd3 	bl	8000a28 <lcd_send_string>
}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08004148 	.word	0x08004148
 8001090:	08004158 	.word	0x08004158
 8001094:	08004160 	.word	0x08004160

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <Error_Handler+0x8>

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <HAL_MspInit+0x4c>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_MspInit+0x4c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_MspInit+0x4c>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a24      	ldr	r2, [pc, #144]	@ (80011a4 <HAL_CAN_MspInit+0xb0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d142      	bne.n	800119c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a22      	ldr	r2, [pc, #136]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 8001120:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a1b      	ldr	r2, [pc, #108]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 800113c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_CAN_MspInit+0xb4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800116a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800117c:	2309      	movs	r3, #9
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4809      	ldr	r0, [pc, #36]	@ (80011ac <HAL_CAN_MspInit+0xb8>)
 8001188:	f001 f846 	bl	8002218 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2040      	movs	r0, #64	@ 0x40
 8001192:	f001 f80a 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001196:	2040      	movs	r0, #64	@ 0x40
 8001198:	f001 f823 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40006800 	.word	0x40006800
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400

080011b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <HAL_I2C_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12b      	bne.n	800122a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <HAL_I2C_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <HAL_I2C_MspInit+0x88>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <HAL_I2C_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ee:	23c0      	movs	r3, #192	@ 0xc0
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f2:	2312      	movs	r3, #18
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fe:	2304      	movs	r3, #4
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <HAL_I2C_MspInit+0x8c>)
 800120a:	f001 f805 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_I2C_MspInit+0x88>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_I2C_MspInit+0x88>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121c:	6413      	str	r3, [r2, #64]	@ 0x40
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_I2C_MspInit+0x88>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	@ 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020400 	.word	0x40020400

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <NMI_Handler+0x4>

08001248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <MemManage_Handler+0x4>

08001258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <UsageFault_Handler+0x4>

08001268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001296:	f000 f8d1 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <CAN2_RX0_IRQHandler+0x10>)
 80012a6:	f000 fc75 	bl	8001b94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000078 	.word	0x20000078

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f002 fa58 	bl	8003798 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	220c      	movs	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20020000 	.word	0x20020000
 8001314:	00000400 	.word	0x00000400
 8001318:	20000104 	.word	0x20000104
 800131c:	20000258 	.word	0x20000258

08001320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800137c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001348:	f7ff ffea 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 fa17 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fc47 	bl	8000c08 <main>
  bx  lr    
 800137a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800137c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001388:	080041cc 	.word	0x080041cc
  ldr r2, =_sbss
 800138c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001390:	20000254 	.word	0x20000254

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800139c:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <HAL_Init+0x40>)
 80013a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a8:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <HAL_Init+0x40>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <HAL_Init+0x40>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 fee7 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fe6a 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 feff 	bl	80021fe <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 fec7 	bl	80021aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	@ (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000000 	.word	0x20000000
 8001434:	20000008 	.word	0x20000008
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	20000108 	.word	0x20000108

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000108 	.word	0x20000108

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff ffee 	bl	8001464 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffde 	bl	8001464 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008

080014c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0ed      	b.n	80016b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fe06 	bl	80010f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f8:	f7ff ffb4 	bl	8001464 <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014fe:	e012      	b.n	8001526 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001500:	f7ff ffb0 	bl	8001464 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d90b      	bls.n	8001526 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0c5      	b.n	80016b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0e5      	beq.n	8001500 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0202 	bic.w	r2, r2, #2
 8001542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001544:	f7ff ff8e 	bl	8001464 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800154a:	e012      	b.n	8001572 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800154c:	f7ff ff8a 	bl	8001464 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b0a      	cmp	r3, #10
 8001558:	d90b      	bls.n	8001572 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2205      	movs	r2, #5
 800156a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e09f      	b.n	80016b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e5      	bne.n	800154c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e1b      	ldrb	r3, [r3, #24]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d108      	bne.n	800159a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e007      	b.n	80015aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7e5b      	ldrb	r3, [r3, #25]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e007      	b.n	80015d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e9b      	ldrb	r3, [r3, #26]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d108      	bne.n	80015ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0220 	orr.w	r2, r2, #32
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e007      	b.n	80015fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0220 	bic.w	r2, r2, #32
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7edb      	ldrb	r3, [r3, #27]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d108      	bne.n	8001618 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0210 	bic.w	r2, r2, #16
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e007      	b.n	8001628 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0210 	orr.w	r2, r2, #16
 8001626:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7f1b      	ldrb	r3, [r3, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0208 	orr.w	r2, r2, #8
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e007      	b.n	8001652 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0208 	bic.w	r2, r2, #8
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7f5b      	ldrb	r3, [r3, #29]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0204 	orr.w	r2, r2, #4
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e007      	b.n	800167c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0204 	bic.w	r2, r2, #4
 800167a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	ea42 0103 	orr.w	r1, r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	1e5a      	subs	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016d4:	7cfb      	ldrb	r3, [r7, #19]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d003      	beq.n	80016e2 <HAL_CAN_ConfigFilter+0x26>
 80016da:	7cfb      	ldrb	r3, [r7, #19]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	f040 80be 	bne.w	800185e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80016e2:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <HAL_CAN_ConfigFilter+0x1bc>)
 80016e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016fc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	431a      	orrs	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2201      	movs	r2, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	401a      	ands	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d123      	bne.n	800178c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001766:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3248      	adds	r2, #72	@ 0x48
 800176c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001780:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001782:	6979      	ldr	r1, [r7, #20]
 8001784:	3348      	adds	r3, #72	@ 0x48
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d122      	bne.n	80017da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3248      	adds	r2, #72	@ 0x48
 80017ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017d0:	6979      	ldr	r1, [r7, #20]
 80017d2:	3348      	adds	r3, #72	@ 0x48
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80017f4:	e007      	b.n	8001806 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	431a      	orrs	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001820:	e007      	b.n	8001832 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	431a      	orrs	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	431a      	orrs	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001850:	f023 0201 	bic.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e006      	b.n	800186c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
  }
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40006400 	.word	0x40006400

0800187c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d12e      	bne.n	80018ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018a8:	f7ff fddc 	bl	8001464 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ae:	e012      	b.n	80018d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018b0:	f7ff fdd8 	bl	8001464 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d90b      	bls.n	80018d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2205      	movs	r2, #5
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e012      	b.n	80018fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e5      	bne.n	80018b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e006      	b.n	80018fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d003      	beq.n	8001928 <HAL_CAN_GetRxMessage+0x24>
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b02      	cmp	r3, #2
 8001924:	f040 8103 	bne.w	8001b2e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10e      	bne.n	800194c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d116      	bne.n	800196a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0f7      	b.n	8001b3c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0e8      	b.n	8001b3c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	331b      	adds	r3, #27
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0204 	and.w	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10c      	bne.n	80019a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	331b      	adds	r3, #27
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	0d5b      	lsrs	r3, r3, #21
 8001998:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e00b      	b.n	80019ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	331b      	adds	r3, #27
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	331b      	adds	r3, #27
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0202 	and.w	r2, r3, #2
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	331b      	adds	r3, #27
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4413      	add	r3, r2
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2208      	movs	r2, #8
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	e00b      	b.n	8001a08 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	331b      	adds	r3, #27
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	4413      	add	r3, r2
 80019fc:	3304      	adds	r3, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 020f 	and.w	r2, r3, #15
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	331b      	adds	r3, #27
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	3304      	adds	r3, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	331b      	adds	r3, #27
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	0a1a      	lsrs	r2, r3, #8
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0c1a      	lsrs	r2, r3, #16
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0e1a      	lsrs	r2, r3, #24
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3303      	adds	r3, #3
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0a1a      	lsrs	r2, r3, #8
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3305      	adds	r3, #5
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0c1a      	lsrs	r2, r3, #16
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	3306      	adds	r3, #6
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0e1a      	lsrs	r2, r3, #24
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	3307      	adds	r3, #7
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d108      	bne.n	8001b1a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	e007      	b.n	8001b2a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e006      	b.n	8001b3c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d002      	beq.n	8001b66 <HAL_CAN_ActivateNotification+0x1e>
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d109      	bne.n	8001b7a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6959      	ldr	r1, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e006      	b.n	8001b88 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	@ 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d07c      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d023      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f983 	bl	8001f02 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bfc:	e016      	b.n	8001c2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c10:	e00c      	b.n	8001c2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c24:	e002      	b.n	8001c2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f989 	bl	8001f3e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d024      	beq.n	8001c80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f963 	bl	8001f16 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c50:	e016      	b.n	8001c80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c64:	e00c      	b.n	8001c80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c78:	e002      	b.n	8001c80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f969 	bl	8001f52 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d024      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f943 	bl	8001f2a <HAL_CAN_TxMailbox2CompleteCallback>
 8001ca4:	e016      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb8:	e00c      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ccc:	e002      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f949 	bl	8001f66 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2208      	movs	r2, #8
 8001d12:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f930 	bl	8001f7a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff f906 	bl	8000f44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00c      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2210      	movs	r2, #16
 8001d5a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2208      	movs	r2, #8
 8001d76:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f912 	bl	8001fa2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8f9 	bl	8001f8e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2210      	movs	r2, #16
 8001db6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f8fc 	bl	8001fb6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8f5 	bl	8001fca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d07b      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d072      	beq.n	8001eda <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d043      	beq.n	8001eda <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d03e      	beq.n	8001eda <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e62:	2b60      	cmp	r3, #96	@ 0x60
 8001e64:	d02b      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x32a>
 8001e66:	2b60      	cmp	r3, #96	@ 0x60
 8001e68:	d82e      	bhi.n	8001ec8 <HAL_CAN_IRQHandler+0x334>
 8001e6a:	2b50      	cmp	r3, #80	@ 0x50
 8001e6c:	d022      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x320>
 8001e6e:	2b50      	cmp	r3, #80	@ 0x50
 8001e70:	d82a      	bhi.n	8001ec8 <HAL_CAN_IRQHandler+0x334>
 8001e72:	2b40      	cmp	r3, #64	@ 0x40
 8001e74:	d019      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x316>
 8001e76:	2b40      	cmp	r3, #64	@ 0x40
 8001e78:	d826      	bhi.n	8001ec8 <HAL_CAN_IRQHandler+0x334>
 8001e7a:	2b30      	cmp	r3, #48	@ 0x30
 8001e7c:	d010      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x30c>
 8001e7e:	2b30      	cmp	r3, #48	@ 0x30
 8001e80:	d822      	bhi.n	8001ec8 <HAL_CAN_IRQHandler+0x334>
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d002      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x2f8>
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d005      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e8a:	e01d      	b.n	8001ec8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e94:	e019      	b.n	8001eca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	f043 0310 	orr.w	r3, r3, #16
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e9e:	e014      	b.n	8001eca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	f043 0320 	orr.w	r3, r3, #32
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ea8:	e00f      	b.n	8001eca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eb2:	e00a      	b.n	8001eca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ebc:	e005      	b.n	8001eca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ec6:	e000      	b.n	8001eca <HAL_CAN_IRQHandler+0x336>
            break;
 8001ec8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ed8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f872 	bl	8001fde <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	@ 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	@ (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	@ 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff8e 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff29 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff3e 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff8e 	bl	80020e8 <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5d 	bl	8002094 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff31 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e16b      	b.n	800250c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 815a 	bne.w	8002506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	2b02      	cmp	r3, #2
 8002268:	d130      	bne.n	80022cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80b4 	beq.w	8002506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b60      	ldr	r3, [pc, #384]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002528 <HAL_GPIO_Init+0x310>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_GPIO_Init+0x314>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02b      	beq.n	800243e <HAL_GPIO_Init+0x226>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a51      	ldr	r2, [pc, #324]	@ (8002530 <HAL_GPIO_Init+0x318>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x222>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a50      	ldr	r2, [pc, #320]	@ (8002534 <HAL_GPIO_Init+0x31c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x21e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002538 <HAL_GPIO_Init+0x320>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x21a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4e      	ldr	r2, [pc, #312]	@ (800253c <HAL_GPIO_Init+0x324>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x216>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4d      	ldr	r2, [pc, #308]	@ (8002540 <HAL_GPIO_Init+0x328>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x212>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4c      	ldr	r2, [pc, #304]	@ (8002544 <HAL_GPIO_Init+0x32c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x20e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4b      	ldr	r2, [pc, #300]	@ (8002548 <HAL_GPIO_Init+0x330>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x20a>
 800241e:	2307      	movs	r3, #7
 8002420:	e00e      	b.n	8002440 <HAL_GPIO_Init+0x228>
 8002422:	2308      	movs	r3, #8
 8002424:	e00c      	b.n	8002440 <HAL_GPIO_Init+0x228>
 8002426:	2306      	movs	r3, #6
 8002428:	e00a      	b.n	8002440 <HAL_GPIO_Init+0x228>
 800242a:	2305      	movs	r3, #5
 800242c:	e008      	b.n	8002440 <HAL_GPIO_Init+0x228>
 800242e:	2304      	movs	r3, #4
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x228>
 8002432:	2303      	movs	r3, #3
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x228>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x228>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x228>
 800243e:	2300      	movs	r3, #0
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f002 0203 	and.w	r2, r2, #3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	@ (8002528 <HAL_GPIO_Init+0x310>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <HAL_GPIO_Init+0x334>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002482:	4a32      	ldr	r2, [pc, #200]	@ (800254c <HAL_GPIO_Init+0x334>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002488:	4b30      	ldr	r3, [pc, #192]	@ (800254c <HAL_GPIO_Init+0x334>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ac:	4a27      	ldr	r2, [pc, #156]	@ (800254c <HAL_GPIO_Init+0x334>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b2:	4b26      	ldr	r3, [pc, #152]	@ (800254c <HAL_GPIO_Init+0x334>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d6:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <HAL_GPIO_Init+0x334>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_GPIO_Init+0x334>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002500:	4a12      	ldr	r2, [pc, #72]	@ (800254c <HAL_GPIO_Init+0x334>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	f67f ae90 	bls.w	8002234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40021c00 	.word	0x40021c00
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e12b      	b.n	80027ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fe00 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	@ 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e8:	f001 f89a 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a81      	ldr	r2, [pc, #516]	@ (80027f8 <HAL_I2C_Init+0x274>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d807      	bhi.n	8002608 <HAL_I2C_Init+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a80      	ldr	r2, [pc, #512]	@ (80027fc <HAL_I2C_Init+0x278>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e006      	b.n	8002616 <HAL_I2C_Init+0x92>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a7d      	ldr	r2, [pc, #500]	@ (8002800 <HAL_I2C_Init+0x27c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0e7      	b.n	80027ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a78      	ldr	r2, [pc, #480]	@ (8002804 <HAL_I2C_Init+0x280>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <HAL_I2C_Init+0x274>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d802      	bhi.n	8002658 <HAL_I2C_Init+0xd4>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3301      	adds	r3, #1
 8002656:	e009      	b.n	800266c <HAL_I2C_Init+0xe8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	4a69      	ldr	r2, [pc, #420]	@ (8002808 <HAL_I2C_Init+0x284>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	3301      	adds	r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800267e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	495c      	ldr	r1, [pc, #368]	@ (80027f8 <HAL_I2C_Init+0x274>)
 8002688:	428b      	cmp	r3, r1
 800268a:	d819      	bhi.n	80026c0 <HAL_I2C_Init+0x13c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e59      	subs	r1, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fbb1 f3f3 	udiv	r3, r1, r3
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026a0:	400b      	ands	r3, r1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_I2C_Init+0x138>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e59      	subs	r1, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	e051      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026bc:	2304      	movs	r3, #4
 80026be:	e04f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <HAL_I2C_Init+0x168>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e012      	b.n	8002712 <HAL_I2C_Init+0x18e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	0099      	lsls	r1, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Init+0x196>
 8002716:	2301      	movs	r3, #1
 8002718:	e022      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10e      	bne.n	8002740 <HAL_I2C_Init+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e58      	subs	r0, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	fbb0 f3f3 	udiv	r3, r0, r3
 8002734:	3301      	adds	r3, #1
 8002736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	0099      	lsls	r1, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	6809      	ldr	r1, [r1, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800278e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6911      	ldr	r1, [r2, #16]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	000186a0 	.word	0x000186a0
 80027fc:	001e847f 	.word	0x001e847f
 8002800:	003d08ff 	.word	0x003d08ff
 8002804:	431bde83 	.word	0x431bde83
 8002808:	10624dd3 	.word	0x10624dd3

0800280c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	461a      	mov	r2, r3
 8002818:	460b      	mov	r3, r1
 800281a:	817b      	strh	r3, [r7, #10]
 800281c:	4613      	mov	r3, r2
 800281e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7fe fe20 	bl	8001464 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b20      	cmp	r3, #32
 8002830:	f040 80e0 	bne.w	80029f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2319      	movs	r3, #25
 800283a:	2201      	movs	r2, #1
 800283c:	4970      	ldr	r1, [pc, #448]	@ (8002a00 <HAL_I2C_Master_Transmit+0x1f4>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f964 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	e0d3      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_I2C_Master_Transmit+0x50>
 8002858:	2302      	movs	r3, #2
 800285a:	e0cc      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d007      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002890:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2221      	movs	r2, #33	@ 0x21
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2210      	movs	r2, #16
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	893a      	ldrh	r2, [r7, #8]
 80028b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a50      	ldr	r2, [pc, #320]	@ (8002a04 <HAL_I2C_Master_Transmit+0x1f8>)
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f89c 	bl	8002a08 <I2C_MasterRequestWrite>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e08d      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028f0:	e066      	b.n	80029c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	6a39      	ldr	r1, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa22 	bl	8002d40 <I2C_WaitOnTXEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	2b04      	cmp	r3, #4
 8002908:	d107      	bne.n	800291a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002918:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b04      	cmp	r3, #4
 800295a:	d11b      	bne.n	8002994 <HAL_I2C_Master_Transmit+0x188>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d017      	beq.n	8002994 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	6a39      	ldr	r1, [r7, #32]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fa19 	bl	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d107      	bne.n	80029bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e01a      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d194      	bne.n	80028f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	00100002 	.word	0x00100002
 8002a04:	ffff0000 	.word	0xffff0000

08002a08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	460b      	mov	r3, r1
 8002a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d006      	beq.n	8002a32 <I2C_MasterRequestWrite+0x2a>
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d003      	beq.n	8002a32 <I2C_MasterRequestWrite+0x2a>
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a30:	d108      	bne.n	8002a44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e00b      	b.n	8002a5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	2b12      	cmp	r3, #18
 8002a4a:	d107      	bne.n	8002a5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f84f 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a82:	d103      	bne.n	8002a8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e035      	b.n	8002afc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a98:	d108      	bne.n	8002aac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	e01b      	b.n	8002ae4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aac:	897b      	ldrh	r3, [r7, #10]
 8002aae:	11db      	asrs	r3, r3, #7
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 0306 	and.w	r3, r3, #6
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f063 030f 	orn	r3, r3, #15
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	490e      	ldr	r1, [pc, #56]	@ (8002b04 <I2C_MasterRequestWrite+0xfc>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f898 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e010      	b.n	8002afc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4907      	ldr	r1, [pc, #28]	@ (8002b08 <I2C_MasterRequestWrite+0x100>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f888 	bl	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	00010008 	.word	0x00010008
 8002b08:	00010002 	.word	0x00010002

08002b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1c:	e048      	b.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d044      	beq.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fc9d 	bl	8001464 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d139      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10d      	bne.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	e00c      	b.n	8002b7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d116      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e023      	b.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10d      	bne.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	e00c      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d093      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c0e:	e071      	b.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1e:	d123      	bne.n	8002c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e067      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d041      	beq.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c70:	f7fe fbf8 	bl	8001464 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d136      	bne.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10c      	bne.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00b      	b.n	8002cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e021      	b.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10c      	bne.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e00b      	b.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f af6d 	bne.w	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f886 	bl	8002e60 <I2C_IsAcknowledgeFailed>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e034      	b.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d028      	beq.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d66:	f7fe fb7d 	bl	8001464 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11d      	bne.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b80      	cmp	r3, #128	@ 0x80
 8002d88:	d016      	beq.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	2b80      	cmp	r3, #128	@ 0x80
 8002dc4:	d1c3      	bne.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ddc:	e034      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f83e 	bl	8002e60 <I2C_IsAcknowledgeFailed>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e034      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d028      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe fb35 	bl	8001464 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d016      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d1c3      	bne.n	8002dde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e76:	d11b      	bne.n	8002eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e267      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d075      	beq.n	8002fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ede:	4b88      	ldr	r3, [pc, #544]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b85      	ldr	r3, [pc, #532]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d112      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b82      	ldr	r3, [pc, #520]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	4b7e      	ldr	r3, [pc, #504]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05b      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x108>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d157      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e242      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCC_OscConfig+0x74>
 8002f26:	4b76      	ldr	r3, [pc, #472]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a75      	ldr	r2, [pc, #468]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xb0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x98>
 8002f3e:	4b70      	ldr	r3, [pc, #448]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6f      	ldr	r2, [pc, #444]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6c      	ldr	r2, [pc, #432]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xb0>
 8002f58:	4b69      	ldr	r3, [pc, #420]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a68      	ldr	r2, [pc, #416]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b66      	ldr	r3, [pc, #408]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a65      	ldr	r2, [pc, #404]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fa74 	bl	8001464 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fa70 	bl	8001464 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e207      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b5b      	ldr	r3, [pc, #364]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xc0>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fa60 	bl	8001464 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fa5c 	bl	8001464 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1f3      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b51      	ldr	r3, [pc, #324]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xe8>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b47      	ldr	r3, [pc, #284]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d11c      	bne.n	8003028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fee:	4b44      	ldr	r3, [pc, #272]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d116      	bne.n	8003028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	4b41      	ldr	r3, [pc, #260]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x152>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e1c7      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b3b      	ldr	r3, [pc, #236]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4937      	ldr	r1, [pc, #220]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	e03a      	b.n	800309e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003030:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <HAL_RCC_OscConfig+0x244>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fa15 	bl	8001464 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe fa11 	bl	8001464 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e1a8      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	4b2b      	ldr	r3, [pc, #172]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b28      	ldr	r3, [pc, #160]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4925      	ldr	r1, [pc, #148]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <HAL_RCC_OscConfig+0x244>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe f9f4 	bl	8001464 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe f9f0 	bl	8001464 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e187      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d036      	beq.n	8003118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <HAL_RCC_OscConfig+0x248>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe f9d4 	bl	8001464 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c0:	f7fe f9d0 	bl	8001464 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e167      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_RCC_OscConfig+0x240>)
 80030d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x200>
 80030de:	e01b      	b.n	8003118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e0:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_OscConfig+0x248>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe f9bd 	bl	8001464 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	e00e      	b.n	800310c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ee:	f7fe f9b9 	bl	8001464 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d907      	bls.n	800310c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e150      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
 8003100:	40023800 	.word	0x40023800
 8003104:	42470000 	.word	0x42470000
 8003108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	4b88      	ldr	r3, [pc, #544]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 800310e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ea      	bne.n	80030ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8097 	beq.w	8003254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b81      	ldr	r3, [pc, #516]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b7d      	ldr	r3, [pc, #500]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	4a7c      	ldr	r2, [pc, #496]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	@ 0x40
 8003146:	4b7a      	ldr	r3, [pc, #488]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b77      	ldr	r3, [pc, #476]	@ (8003334 <HAL_RCC_OscConfig+0x474>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d118      	bne.n	8003194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003162:	4b74      	ldr	r3, [pc, #464]	@ (8003334 <HAL_RCC_OscConfig+0x474>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a73      	ldr	r2, [pc, #460]	@ (8003334 <HAL_RCC_OscConfig+0x474>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800316c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316e:	f7fe f979 	bl	8001464 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7fe f975 	bl	8001464 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e10c      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	4b6a      	ldr	r3, [pc, #424]	@ (8003334 <HAL_RCC_OscConfig+0x474>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x2ea>
 800319c:	4b64      	ldr	r3, [pc, #400]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a0:	4a63      	ldr	r2, [pc, #396]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a8:	e01c      	b.n	80031e4 <HAL_RCC_OscConfig+0x324>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x30c>
 80031b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031be:	4b5c      	ldr	r3, [pc, #368]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0x324>
 80031cc:	4b58      	ldr	r3, [pc, #352]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d0:	4a57      	ldr	r2, [pc, #348]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d8:	4b55      	ldr	r3, [pc, #340]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031dc:	4a54      	ldr	r2, [pc, #336]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80031de:	f023 0304 	bic.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe f93a 	bl	8001464 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f2:	e00a      	b.n	800320a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fe f936 	bl	8001464 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0cb      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	4b49      	ldr	r3, [pc, #292]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0ee      	beq.n	80031f4 <HAL_RCC_OscConfig+0x334>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7fe f924 	bl	8001464 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe f920 	bl	8001464 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e0b5      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003236:	4b3e      	ldr	r3, [pc, #248]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1ee      	bne.n	8003220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003248:	4b39      	ldr	r3, [pc, #228]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	4a38      	ldr	r2, [pc, #224]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 800324e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003252:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a1 	beq.w	80033a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800325e:	4b34      	ldr	r3, [pc, #208]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b08      	cmp	r3, #8
 8003268:	d05c      	beq.n	8003324 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d141      	bne.n	80032f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b31      	ldr	r3, [pc, #196]	@ (8003338 <HAL_RCC_OscConfig+0x478>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe f8f4 	bl	8001464 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe f8f0 	bl	8001464 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e087      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	491b      	ldr	r1, [pc, #108]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x478>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe f8c9 	bl	8001464 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe f8c5 	bl	8001464 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e05c      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e8:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x416>
 80032f4:	e054      	b.n	80033a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <HAL_RCC_OscConfig+0x478>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe f8b2 	bl	8001464 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f8ae 	bl	8001464 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e045      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCC_OscConfig+0x470>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x444>
 8003322:	e03d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e038      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
 8003330:	40023800 	.word	0x40023800
 8003334:	40007000 	.word	0x40007000
 8003338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800333c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <HAL_RCC_OscConfig+0x4ec>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d028      	beq.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d121      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d11a      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003374:	4293      	cmp	r3, r2
 8003376:	d111      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d107      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800

080033b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0cc      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c4:	4b68      	ldr	r3, [pc, #416]	@ (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d90c      	bls.n	80033ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b65      	ldr	r3, [pc, #404]	@ (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b59      	ldr	r3, [pc, #356]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a58      	ldr	r2, [pc, #352]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800340e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800341c:	4b53      	ldr	r3, [pc, #332]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a52      	ldr	r2, [pc, #328]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b50      	ldr	r3, [pc, #320]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	494d      	ldr	r1, [pc, #308]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d044      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b47      	ldr	r3, [pc, #284]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d119      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d003      	beq.n	800346e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	2b03      	cmp	r3, #3
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346e:	4b3f      	ldr	r3, [pc, #252]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e067      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b37      	ldr	r3, [pc, #220]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4934      	ldr	r1, [pc, #208]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a0:	f7fd ffe0 	bl	8001464 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fd ffdc 	bl	8001464 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e04f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	4b2b      	ldr	r3, [pc, #172]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 020c 	and.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1eb      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b25      	ldr	r3, [pc, #148]	@ (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d20c      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4916      	ldr	r1, [pc, #88]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003522:	4b12      	ldr	r3, [pc, #72]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490e      	ldr	r1, [pc, #56]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f821 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490a      	ldr	r1, [pc, #40]	@ (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a09      	ldr	r2, [pc, #36]	@ (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003552:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd ff40 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00
 800356c:	40023800 	.word	0x40023800
 8003570:	08004170 	.word	0x08004170
 8003574:	20000000 	.word	0x20000000
 8003578:	20000004 	.word	0x20000004

0800357c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003580:	b090      	sub	sp, #64	@ 0x40
 8003582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
 8003588:	2300      	movs	r3, #0
 800358a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800358c:	2300      	movs	r3, #0
 800358e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003594:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d00d      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x40>
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	f200 80a1 	bhi.w	80036e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x34>
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ae:	e09b      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x184>)
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80035b4:	e09b      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035b6:	4b53      	ldr	r3, [pc, #332]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x188>)
 80035b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ba:	e098      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035bc:	4b4f      	ldr	r3, [pc, #316]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x180>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c6:	4b4d      	ldr	r3, [pc, #308]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x180>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d028      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d2:	4b4a      	ldr	r3, [pc, #296]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x180>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	2200      	movs	r2, #0
 80035da:	623b      	str	r3, [r7, #32]
 80035dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035e4:	2100      	movs	r1, #0
 80035e6:	4b47      	ldr	r3, [pc, #284]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x188>)
 80035e8:	fb03 f201 	mul.w	r2, r3, r1
 80035ec:	2300      	movs	r3, #0
 80035ee:	fb00 f303 	mul.w	r3, r0, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	4a43      	ldr	r2, [pc, #268]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x188>)
 80035f6:	fba0 1202 	umull	r1, r2, r0, r2
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fc:	460a      	mov	r2, r1
 80035fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003602:	4413      	add	r3, r2
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003608:	2200      	movs	r2, #0
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003612:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003616:	f7fd f88f 	bl	8000738 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4613      	mov	r3, r2
 8003620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003622:	e053      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003624:	4b35      	ldr	r3, [pc, #212]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	099b      	lsrs	r3, r3, #6
 800362a:	2200      	movs	r2, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	617a      	str	r2, [r7, #20]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003636:	f04f 0b00 	mov.w	fp, #0
 800363a:	4652      	mov	r2, sl
 800363c:	465b      	mov	r3, fp
 800363e:	f04f 0000 	mov.w	r0, #0
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	0159      	lsls	r1, r3, #5
 8003648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364c:	0150      	lsls	r0, r2, #5
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	ebb2 080a 	subs.w	r8, r2, sl
 8003656:	eb63 090b 	sbc.w	r9, r3, fp
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003666:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800366a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800366e:	ebb2 0408 	subs.w	r4, r2, r8
 8003672:	eb63 0509 	sbc.w	r5, r3, r9
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	00eb      	lsls	r3, r5, #3
 8003680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003684:	00e2      	lsls	r2, r4, #3
 8003686:	4614      	mov	r4, r2
 8003688:	461d      	mov	r5, r3
 800368a:	eb14 030a 	adds.w	r3, r4, sl
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	eb45 030b 	adc.w	r3, r5, fp
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036a2:	4629      	mov	r1, r5
 80036a4:	028b      	lsls	r3, r1, #10
 80036a6:	4621      	mov	r1, r4
 80036a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ac:	4621      	mov	r1, r4
 80036ae:	028a      	lsls	r2, r1, #10
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b6:	2200      	movs	r2, #0
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	60fa      	str	r2, [r7, #12]
 80036bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036c0:	f7fd f83a 	bl	8000738 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4613      	mov	r3, r2
 80036ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80036dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3740      	adds	r7, #64	@ 0x40
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800
 8003700:	00f42400 	.word	0x00f42400
 8003704:	017d7840 	.word	0x017d7840

08003708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800370c:	4b03      	ldr	r3, [pc, #12]	@ (800371c <HAL_RCC_GetHCLKFreq+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000000 	.word	0x20000000

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003724:	f7ff fff0 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0a9b      	lsrs	r3, r3, #10
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	@ (8003744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	08004180 	.word	0x08004180

08003748 <siprintf>:
 8003748:	b40e      	push	{r1, r2, r3}
 800374a:	b500      	push	{lr}
 800374c:	b09c      	sub	sp, #112	@ 0x70
 800374e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003750:	9002      	str	r0, [sp, #8]
 8003752:	9006      	str	r0, [sp, #24]
 8003754:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003758:	4809      	ldr	r0, [pc, #36]	@ (8003780 <siprintf+0x38>)
 800375a:	9107      	str	r1, [sp, #28]
 800375c:	9104      	str	r1, [sp, #16]
 800375e:	4909      	ldr	r1, [pc, #36]	@ (8003784 <siprintf+0x3c>)
 8003760:	f853 2b04 	ldr.w	r2, [r3], #4
 8003764:	9105      	str	r1, [sp, #20]
 8003766:	6800      	ldr	r0, [r0, #0]
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	a902      	add	r1, sp, #8
 800376c:	f000 f994 	bl	8003a98 <_svfiprintf_r>
 8003770:	9b02      	ldr	r3, [sp, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	b01c      	add	sp, #112	@ 0x70
 8003778:	f85d eb04 	ldr.w	lr, [sp], #4
 800377c:	b003      	add	sp, #12
 800377e:	4770      	bx	lr
 8003780:	2000000c 	.word	0x2000000c
 8003784:	ffff0208 	.word	0xffff0208

08003788 <memset>:
 8003788:	4402      	add	r2, r0
 800378a:	4603      	mov	r3, r0
 800378c:	4293      	cmp	r3, r2
 800378e:	d100      	bne.n	8003792 <memset+0xa>
 8003790:	4770      	bx	lr
 8003792:	f803 1b01 	strb.w	r1, [r3], #1
 8003796:	e7f9      	b.n	800378c <memset+0x4>

08003798 <__errno>:
 8003798:	4b01      	ldr	r3, [pc, #4]	@ (80037a0 <__errno+0x8>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	2000000c 	.word	0x2000000c

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4d0d      	ldr	r5, [pc, #52]	@ (80037dc <__libc_init_array+0x38>)
 80037a8:	4c0d      	ldr	r4, [pc, #52]	@ (80037e0 <__libc_init_array+0x3c>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	2600      	movs	r6, #0
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	4d0b      	ldr	r5, [pc, #44]	@ (80037e4 <__libc_init_array+0x40>)
 80037b6:	4c0c      	ldr	r4, [pc, #48]	@ (80037e8 <__libc_init_array+0x44>)
 80037b8:	f000 fcba 	bl	8004130 <_init>
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	2600      	movs	r6, #0
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	080041c4 	.word	0x080041c4
 80037e0:	080041c4 	.word	0x080041c4
 80037e4:	080041c4 	.word	0x080041c4
 80037e8:	080041c8 	.word	0x080041c8

080037ec <__retarget_lock_acquire_recursive>:
 80037ec:	4770      	bx	lr

080037ee <__retarget_lock_release_recursive>:
 80037ee:	4770      	bx	lr

080037f0 <_free_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4605      	mov	r5, r0
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d041      	beq.n	800387c <_free_r+0x8c>
 80037f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fc:	1f0c      	subs	r4, r1, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfb8      	it	lt
 8003802:	18e4      	addlt	r4, r4, r3
 8003804:	f000 f8e0 	bl	80039c8 <__malloc_lock>
 8003808:	4a1d      	ldr	r2, [pc, #116]	@ (8003880 <_free_r+0x90>)
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	b933      	cbnz	r3, 800381c <_free_r+0x2c>
 800380e:	6063      	str	r3, [r4, #4]
 8003810:	6014      	str	r4, [r2, #0]
 8003812:	4628      	mov	r0, r5
 8003814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003818:	f000 b8dc 	b.w	80039d4 <__malloc_unlock>
 800381c:	42a3      	cmp	r3, r4
 800381e:	d908      	bls.n	8003832 <_free_r+0x42>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	1821      	adds	r1, r4, r0
 8003824:	428b      	cmp	r3, r1
 8003826:	bf01      	itttt	eq
 8003828:	6819      	ldreq	r1, [r3, #0]
 800382a:	685b      	ldreq	r3, [r3, #4]
 800382c:	1809      	addeq	r1, r1, r0
 800382e:	6021      	streq	r1, [r4, #0]
 8003830:	e7ed      	b.n	800380e <_free_r+0x1e>
 8003832:	461a      	mov	r2, r3
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	b10b      	cbz	r3, 800383c <_free_r+0x4c>
 8003838:	42a3      	cmp	r3, r4
 800383a:	d9fa      	bls.n	8003832 <_free_r+0x42>
 800383c:	6811      	ldr	r1, [r2, #0]
 800383e:	1850      	adds	r0, r2, r1
 8003840:	42a0      	cmp	r0, r4
 8003842:	d10b      	bne.n	800385c <_free_r+0x6c>
 8003844:	6820      	ldr	r0, [r4, #0]
 8003846:	4401      	add	r1, r0
 8003848:	1850      	adds	r0, r2, r1
 800384a:	4283      	cmp	r3, r0
 800384c:	6011      	str	r1, [r2, #0]
 800384e:	d1e0      	bne.n	8003812 <_free_r+0x22>
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	6053      	str	r3, [r2, #4]
 8003856:	4408      	add	r0, r1
 8003858:	6010      	str	r0, [r2, #0]
 800385a:	e7da      	b.n	8003812 <_free_r+0x22>
 800385c:	d902      	bls.n	8003864 <_free_r+0x74>
 800385e:	230c      	movs	r3, #12
 8003860:	602b      	str	r3, [r5, #0]
 8003862:	e7d6      	b.n	8003812 <_free_r+0x22>
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	1821      	adds	r1, r4, r0
 8003868:	428b      	cmp	r3, r1
 800386a:	bf04      	itt	eq
 800386c:	6819      	ldreq	r1, [r3, #0]
 800386e:	685b      	ldreq	r3, [r3, #4]
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	bf04      	itt	eq
 8003874:	1809      	addeq	r1, r1, r0
 8003876:	6021      	streq	r1, [r4, #0]
 8003878:	6054      	str	r4, [r2, #4]
 800387a:	e7ca      	b.n	8003812 <_free_r+0x22>
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	20000250 	.word	0x20000250

08003884 <sbrk_aligned>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4e0f      	ldr	r6, [pc, #60]	@ (80038c4 <sbrk_aligned+0x40>)
 8003888:	460c      	mov	r4, r1
 800388a:	6831      	ldr	r1, [r6, #0]
 800388c:	4605      	mov	r5, r0
 800388e:	b911      	cbnz	r1, 8003896 <sbrk_aligned+0x12>
 8003890:	f000 fba6 	bl	8003fe0 <_sbrk_r>
 8003894:	6030      	str	r0, [r6, #0]
 8003896:	4621      	mov	r1, r4
 8003898:	4628      	mov	r0, r5
 800389a:	f000 fba1 	bl	8003fe0 <_sbrk_r>
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	d103      	bne.n	80038aa <sbrk_aligned+0x26>
 80038a2:	f04f 34ff 	mov.w	r4, #4294967295
 80038a6:	4620      	mov	r0, r4
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d0f8      	beq.n	80038a6 <sbrk_aligned+0x22>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 fb92 	bl	8003fe0 <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d1f2      	bne.n	80038a6 <sbrk_aligned+0x22>
 80038c0:	e7ef      	b.n	80038a2 <sbrk_aligned+0x1e>
 80038c2:	bf00      	nop
 80038c4:	2000024c 	.word	0x2000024c

080038c8 <_malloc_r>:
 80038c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038cc:	1ccd      	adds	r5, r1, #3
 80038ce:	f025 0503 	bic.w	r5, r5, #3
 80038d2:	3508      	adds	r5, #8
 80038d4:	2d0c      	cmp	r5, #12
 80038d6:	bf38      	it	cc
 80038d8:	250c      	movcc	r5, #12
 80038da:	2d00      	cmp	r5, #0
 80038dc:	4606      	mov	r6, r0
 80038de:	db01      	blt.n	80038e4 <_malloc_r+0x1c>
 80038e0:	42a9      	cmp	r1, r5
 80038e2:	d904      	bls.n	80038ee <_malloc_r+0x26>
 80038e4:	230c      	movs	r3, #12
 80038e6:	6033      	str	r3, [r6, #0]
 80038e8:	2000      	movs	r0, #0
 80038ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039c4 <_malloc_r+0xfc>
 80038f2:	f000 f869 	bl	80039c8 <__malloc_lock>
 80038f6:	f8d8 3000 	ldr.w	r3, [r8]
 80038fa:	461c      	mov	r4, r3
 80038fc:	bb44      	cbnz	r4, 8003950 <_malloc_r+0x88>
 80038fe:	4629      	mov	r1, r5
 8003900:	4630      	mov	r0, r6
 8003902:	f7ff ffbf 	bl	8003884 <sbrk_aligned>
 8003906:	1c43      	adds	r3, r0, #1
 8003908:	4604      	mov	r4, r0
 800390a:	d158      	bne.n	80039be <_malloc_r+0xf6>
 800390c:	f8d8 4000 	ldr.w	r4, [r8]
 8003910:	4627      	mov	r7, r4
 8003912:	2f00      	cmp	r7, #0
 8003914:	d143      	bne.n	800399e <_malloc_r+0xd6>
 8003916:	2c00      	cmp	r4, #0
 8003918:	d04b      	beq.n	80039b2 <_malloc_r+0xea>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	4639      	mov	r1, r7
 800391e:	4630      	mov	r0, r6
 8003920:	eb04 0903 	add.w	r9, r4, r3
 8003924:	f000 fb5c 	bl	8003fe0 <_sbrk_r>
 8003928:	4581      	cmp	r9, r0
 800392a:	d142      	bne.n	80039b2 <_malloc_r+0xea>
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	1a6d      	subs	r5, r5, r1
 8003930:	4629      	mov	r1, r5
 8003932:	4630      	mov	r0, r6
 8003934:	f7ff ffa6 	bl	8003884 <sbrk_aligned>
 8003938:	3001      	adds	r0, #1
 800393a:	d03a      	beq.n	80039b2 <_malloc_r+0xea>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	442b      	add	r3, r5
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	f8d8 3000 	ldr.w	r3, [r8]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	bb62      	cbnz	r2, 80039a4 <_malloc_r+0xdc>
 800394a:	f8c8 7000 	str.w	r7, [r8]
 800394e:	e00f      	b.n	8003970 <_malloc_r+0xa8>
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	1b52      	subs	r2, r2, r5
 8003954:	d420      	bmi.n	8003998 <_malloc_r+0xd0>
 8003956:	2a0b      	cmp	r2, #11
 8003958:	d917      	bls.n	800398a <_malloc_r+0xc2>
 800395a:	1961      	adds	r1, r4, r5
 800395c:	42a3      	cmp	r3, r4
 800395e:	6025      	str	r5, [r4, #0]
 8003960:	bf18      	it	ne
 8003962:	6059      	strne	r1, [r3, #4]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	bf08      	it	eq
 8003968:	f8c8 1000 	streq.w	r1, [r8]
 800396c:	5162      	str	r2, [r4, r5]
 800396e:	604b      	str	r3, [r1, #4]
 8003970:	4630      	mov	r0, r6
 8003972:	f000 f82f 	bl	80039d4 <__malloc_unlock>
 8003976:	f104 000b 	add.w	r0, r4, #11
 800397a:	1d23      	adds	r3, r4, #4
 800397c:	f020 0007 	bic.w	r0, r0, #7
 8003980:	1ac2      	subs	r2, r0, r3
 8003982:	bf1c      	itt	ne
 8003984:	1a1b      	subne	r3, r3, r0
 8003986:	50a3      	strne	r3, [r4, r2]
 8003988:	e7af      	b.n	80038ea <_malloc_r+0x22>
 800398a:	6862      	ldr	r2, [r4, #4]
 800398c:	42a3      	cmp	r3, r4
 800398e:	bf0c      	ite	eq
 8003990:	f8c8 2000 	streq.w	r2, [r8]
 8003994:	605a      	strne	r2, [r3, #4]
 8003996:	e7eb      	b.n	8003970 <_malloc_r+0xa8>
 8003998:	4623      	mov	r3, r4
 800399a:	6864      	ldr	r4, [r4, #4]
 800399c:	e7ae      	b.n	80038fc <_malloc_r+0x34>
 800399e:	463c      	mov	r4, r7
 80039a0:	687f      	ldr	r7, [r7, #4]
 80039a2:	e7b6      	b.n	8003912 <_malloc_r+0x4a>
 80039a4:	461a      	mov	r2, r3
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d1fb      	bne.n	80039a4 <_malloc_r+0xdc>
 80039ac:	2300      	movs	r3, #0
 80039ae:	6053      	str	r3, [r2, #4]
 80039b0:	e7de      	b.n	8003970 <_malloc_r+0xa8>
 80039b2:	230c      	movs	r3, #12
 80039b4:	6033      	str	r3, [r6, #0]
 80039b6:	4630      	mov	r0, r6
 80039b8:	f000 f80c 	bl	80039d4 <__malloc_unlock>
 80039bc:	e794      	b.n	80038e8 <_malloc_r+0x20>
 80039be:	6005      	str	r5, [r0, #0]
 80039c0:	e7d6      	b.n	8003970 <_malloc_r+0xa8>
 80039c2:	bf00      	nop
 80039c4:	20000250 	.word	0x20000250

080039c8 <__malloc_lock>:
 80039c8:	4801      	ldr	r0, [pc, #4]	@ (80039d0 <__malloc_lock+0x8>)
 80039ca:	f7ff bf0f 	b.w	80037ec <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	20000248 	.word	0x20000248

080039d4 <__malloc_unlock>:
 80039d4:	4801      	ldr	r0, [pc, #4]	@ (80039dc <__malloc_unlock+0x8>)
 80039d6:	f7ff bf0a 	b.w	80037ee <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	20000248 	.word	0x20000248

080039e0 <__ssputs_r>:
 80039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	688e      	ldr	r6, [r1, #8]
 80039e6:	461f      	mov	r7, r3
 80039e8:	42be      	cmp	r6, r7
 80039ea:	680b      	ldr	r3, [r1, #0]
 80039ec:	4682      	mov	sl, r0
 80039ee:	460c      	mov	r4, r1
 80039f0:	4690      	mov	r8, r2
 80039f2:	d82d      	bhi.n	8003a50 <__ssputs_r+0x70>
 80039f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039fc:	d026      	beq.n	8003a4c <__ssputs_r+0x6c>
 80039fe:	6965      	ldr	r5, [r4, #20]
 8003a00:	6909      	ldr	r1, [r1, #16]
 8003a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a06:	eba3 0901 	sub.w	r9, r3, r1
 8003a0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a0e:	1c7b      	adds	r3, r7, #1
 8003a10:	444b      	add	r3, r9
 8003a12:	106d      	asrs	r5, r5, #1
 8003a14:	429d      	cmp	r5, r3
 8003a16:	bf38      	it	cc
 8003a18:	461d      	movcc	r5, r3
 8003a1a:	0553      	lsls	r3, r2, #21
 8003a1c:	d527      	bpl.n	8003a6e <__ssputs_r+0x8e>
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f7ff ff52 	bl	80038c8 <_malloc_r>
 8003a24:	4606      	mov	r6, r0
 8003a26:	b360      	cbz	r0, 8003a82 <__ssputs_r+0xa2>
 8003a28:	6921      	ldr	r1, [r4, #16]
 8003a2a:	464a      	mov	r2, r9
 8003a2c:	f000 fae8 	bl	8004000 <memcpy>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	6126      	str	r6, [r4, #16]
 8003a3e:	6165      	str	r5, [r4, #20]
 8003a40:	444e      	add	r6, r9
 8003a42:	eba5 0509 	sub.w	r5, r5, r9
 8003a46:	6026      	str	r6, [r4, #0]
 8003a48:	60a5      	str	r5, [r4, #8]
 8003a4a:	463e      	mov	r6, r7
 8003a4c:	42be      	cmp	r6, r7
 8003a4e:	d900      	bls.n	8003a52 <__ssputs_r+0x72>
 8003a50:	463e      	mov	r6, r7
 8003a52:	6820      	ldr	r0, [r4, #0]
 8003a54:	4632      	mov	r2, r6
 8003a56:	4641      	mov	r1, r8
 8003a58:	f000 faa8 	bl	8003fac <memmove>
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	1b9b      	subs	r3, r3, r6
 8003a60:	60a3      	str	r3, [r4, #8]
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	4433      	add	r3, r6
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6e:	462a      	mov	r2, r5
 8003a70:	f000 fad4 	bl	800401c <_realloc_r>
 8003a74:	4606      	mov	r6, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d1e0      	bne.n	8003a3c <__ssputs_r+0x5c>
 8003a7a:	6921      	ldr	r1, [r4, #16]
 8003a7c:	4650      	mov	r0, sl
 8003a7e:	f7ff feb7 	bl	80037f0 <_free_r>
 8003a82:	230c      	movs	r3, #12
 8003a84:	f8ca 3000 	str.w	r3, [sl]
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	e7e9      	b.n	8003a6a <__ssputs_r+0x8a>
	...

08003a98 <_svfiprintf_r>:
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9c:	4698      	mov	r8, r3
 8003a9e:	898b      	ldrh	r3, [r1, #12]
 8003aa0:	061b      	lsls	r3, r3, #24
 8003aa2:	b09d      	sub	sp, #116	@ 0x74
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	460d      	mov	r5, r1
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	d510      	bpl.n	8003ace <_svfiprintf_r+0x36>
 8003aac:	690b      	ldr	r3, [r1, #16]
 8003aae:	b973      	cbnz	r3, 8003ace <_svfiprintf_r+0x36>
 8003ab0:	2140      	movs	r1, #64	@ 0x40
 8003ab2:	f7ff ff09 	bl	80038c8 <_malloc_r>
 8003ab6:	6028      	str	r0, [r5, #0]
 8003ab8:	6128      	str	r0, [r5, #16]
 8003aba:	b930      	cbnz	r0, 8003aca <_svfiprintf_r+0x32>
 8003abc:	230c      	movs	r3, #12
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	b01d      	add	sp, #116	@ 0x74
 8003ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aca:	2340      	movs	r3, #64	@ 0x40
 8003acc:	616b      	str	r3, [r5, #20]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003adc:	2330      	movs	r3, #48	@ 0x30
 8003ade:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c7c <_svfiprintf_r+0x1e4>
 8003ae2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ae6:	f04f 0901 	mov.w	r9, #1
 8003aea:	4623      	mov	r3, r4
 8003aec:	469a      	mov	sl, r3
 8003aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003af2:	b10a      	cbz	r2, 8003af8 <_svfiprintf_r+0x60>
 8003af4:	2a25      	cmp	r2, #37	@ 0x25
 8003af6:	d1f9      	bne.n	8003aec <_svfiprintf_r+0x54>
 8003af8:	ebba 0b04 	subs.w	fp, sl, r4
 8003afc:	d00b      	beq.n	8003b16 <_svfiprintf_r+0x7e>
 8003afe:	465b      	mov	r3, fp
 8003b00:	4622      	mov	r2, r4
 8003b02:	4629      	mov	r1, r5
 8003b04:	4638      	mov	r0, r7
 8003b06:	f7ff ff6b 	bl	80039e0 <__ssputs_r>
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	f000 80a7 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b12:	445a      	add	r2, fp
 8003b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 809f 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b20:	2300      	movs	r3, #0
 8003b22:	f04f 32ff 	mov.w	r2, #4294967295
 8003b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b2a:	f10a 0a01 	add.w	sl, sl, #1
 8003b2e:	9304      	str	r3, [sp, #16]
 8003b30:	9307      	str	r3, [sp, #28]
 8003b32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b36:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b38:	4654      	mov	r4, sl
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b40:	484e      	ldr	r0, [pc, #312]	@ (8003c7c <_svfiprintf_r+0x1e4>)
 8003b42:	f7fc fb45 	bl	80001d0 <memchr>
 8003b46:	9a04      	ldr	r2, [sp, #16]
 8003b48:	b9d8      	cbnz	r0, 8003b82 <_svfiprintf_r+0xea>
 8003b4a:	06d0      	lsls	r0, r2, #27
 8003b4c:	bf44      	itt	mi
 8003b4e:	2320      	movmi	r3, #32
 8003b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b54:	0711      	lsls	r1, r2, #28
 8003b56:	bf44      	itt	mi
 8003b58:	232b      	movmi	r3, #43	@ 0x2b
 8003b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b64:	d015      	beq.n	8003b92 <_svfiprintf_r+0xfa>
 8003b66:	9a07      	ldr	r2, [sp, #28]
 8003b68:	4654      	mov	r4, sl
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f04f 0c0a 	mov.w	ip, #10
 8003b70:	4621      	mov	r1, r4
 8003b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b76:	3b30      	subs	r3, #48	@ 0x30
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d94b      	bls.n	8003c14 <_svfiprintf_r+0x17c>
 8003b7c:	b1b0      	cbz	r0, 8003bac <_svfiprintf_r+0x114>
 8003b7e:	9207      	str	r2, [sp, #28]
 8003b80:	e014      	b.n	8003bac <_svfiprintf_r+0x114>
 8003b82:	eba0 0308 	sub.w	r3, r0, r8
 8003b86:	fa09 f303 	lsl.w	r3, r9, r3
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	9304      	str	r3, [sp, #16]
 8003b8e:	46a2      	mov	sl, r4
 8003b90:	e7d2      	b.n	8003b38 <_svfiprintf_r+0xa0>
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	1d19      	adds	r1, r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	9103      	str	r1, [sp, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bfbb      	ittet	lt
 8003b9e:	425b      	neglt	r3, r3
 8003ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba4:	9307      	strge	r3, [sp, #28]
 8003ba6:	9307      	strlt	r3, [sp, #28]
 8003ba8:	bfb8      	it	lt
 8003baa:	9204      	strlt	r2, [sp, #16]
 8003bac:	7823      	ldrb	r3, [r4, #0]
 8003bae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bb0:	d10a      	bne.n	8003bc8 <_svfiprintf_r+0x130>
 8003bb2:	7863      	ldrb	r3, [r4, #1]
 8003bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bb6:	d132      	bne.n	8003c1e <_svfiprintf_r+0x186>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	9203      	str	r2, [sp, #12]
 8003bc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bc4:	3402      	adds	r4, #2
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c8c <_svfiprintf_r+0x1f4>
 8003bcc:	7821      	ldrb	r1, [r4, #0]
 8003bce:	2203      	movs	r2, #3
 8003bd0:	4650      	mov	r0, sl
 8003bd2:	f7fc fafd 	bl	80001d0 <memchr>
 8003bd6:	b138      	cbz	r0, 8003be8 <_svfiprintf_r+0x150>
 8003bd8:	9b04      	ldr	r3, [sp, #16]
 8003bda:	eba0 000a 	sub.w	r0, r0, sl
 8003bde:	2240      	movs	r2, #64	@ 0x40
 8003be0:	4082      	lsls	r2, r0
 8003be2:	4313      	orrs	r3, r2
 8003be4:	3401      	adds	r4, #1
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bec:	4824      	ldr	r0, [pc, #144]	@ (8003c80 <_svfiprintf_r+0x1e8>)
 8003bee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bf2:	2206      	movs	r2, #6
 8003bf4:	f7fc faec 	bl	80001d0 <memchr>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d036      	beq.n	8003c6a <_svfiprintf_r+0x1d2>
 8003bfc:	4b21      	ldr	r3, [pc, #132]	@ (8003c84 <_svfiprintf_r+0x1ec>)
 8003bfe:	bb1b      	cbnz	r3, 8003c48 <_svfiprintf_r+0x1b0>
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	3307      	adds	r3, #7
 8003c04:	f023 0307 	bic.w	r3, r3, #7
 8003c08:	3308      	adds	r3, #8
 8003c0a:	9303      	str	r3, [sp, #12]
 8003c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c0e:	4433      	add	r3, r6
 8003c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c12:	e76a      	b.n	8003aea <_svfiprintf_r+0x52>
 8003c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c18:	460c      	mov	r4, r1
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	e7a8      	b.n	8003b70 <_svfiprintf_r+0xd8>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	3401      	adds	r4, #1
 8003c22:	9305      	str	r3, [sp, #20]
 8003c24:	4619      	mov	r1, r3
 8003c26:	f04f 0c0a 	mov.w	ip, #10
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c30:	3a30      	subs	r2, #48	@ 0x30
 8003c32:	2a09      	cmp	r2, #9
 8003c34:	d903      	bls.n	8003c3e <_svfiprintf_r+0x1a6>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c6      	beq.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3a:	9105      	str	r1, [sp, #20]
 8003c3c:	e7c4      	b.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c42:	4604      	mov	r4, r0
 8003c44:	2301      	movs	r3, #1
 8003c46:	e7f0      	b.n	8003c2a <_svfiprintf_r+0x192>
 8003c48:	ab03      	add	r3, sp, #12
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <_svfiprintf_r+0x1f0>)
 8003c50:	a904      	add	r1, sp, #16
 8003c52:	4638      	mov	r0, r7
 8003c54:	f3af 8000 	nop.w
 8003c58:	1c42      	adds	r2, r0, #1
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	d1d6      	bne.n	8003c0c <_svfiprintf_r+0x174>
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	065b      	lsls	r3, r3, #25
 8003c62:	f53f af2d 	bmi.w	8003ac0 <_svfiprintf_r+0x28>
 8003c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c68:	e72c      	b.n	8003ac4 <_svfiprintf_r+0x2c>
 8003c6a:	ab03      	add	r3, sp, #12
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	462a      	mov	r2, r5
 8003c70:	4b05      	ldr	r3, [pc, #20]	@ (8003c88 <_svfiprintf_r+0x1f0>)
 8003c72:	a904      	add	r1, sp, #16
 8003c74:	4638      	mov	r0, r7
 8003c76:	f000 f879 	bl	8003d6c <_printf_i>
 8003c7a:	e7ed      	b.n	8003c58 <_svfiprintf_r+0x1c0>
 8003c7c:	08004188 	.word	0x08004188
 8003c80:	08004192 	.word	0x08004192
 8003c84:	00000000 	.word	0x00000000
 8003c88:	080039e1 	.word	0x080039e1
 8003c8c:	0800418e 	.word	0x0800418e

08003c90 <_printf_common>:
 8003c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c94:	4616      	mov	r6, r2
 8003c96:	4698      	mov	r8, r3
 8003c98:	688a      	ldr	r2, [r1, #8]
 8003c9a:	690b      	ldr	r3, [r1, #16]
 8003c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	bfb8      	it	lt
 8003ca4:	4613      	movlt	r3, r2
 8003ca6:	6033      	str	r3, [r6, #0]
 8003ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cac:	4607      	mov	r7, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	b10a      	cbz	r2, 8003cb6 <_printf_common+0x26>
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	6033      	str	r3, [r6, #0]
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	0699      	lsls	r1, r3, #26
 8003cba:	bf42      	ittt	mi
 8003cbc:	6833      	ldrmi	r3, [r6, #0]
 8003cbe:	3302      	addmi	r3, #2
 8003cc0:	6033      	strmi	r3, [r6, #0]
 8003cc2:	6825      	ldr	r5, [r4, #0]
 8003cc4:	f015 0506 	ands.w	r5, r5, #6
 8003cc8:	d106      	bne.n	8003cd8 <_printf_common+0x48>
 8003cca:	f104 0a19 	add.w	sl, r4, #25
 8003cce:	68e3      	ldr	r3, [r4, #12]
 8003cd0:	6832      	ldr	r2, [r6, #0]
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	42ab      	cmp	r3, r5
 8003cd6:	dc26      	bgt.n	8003d26 <_printf_common+0x96>
 8003cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	3b00      	subs	r3, #0
 8003ce0:	bf18      	it	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	0692      	lsls	r2, r2, #26
 8003ce6:	d42b      	bmi.n	8003d40 <_printf_common+0xb0>
 8003ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cec:	4641      	mov	r1, r8
 8003cee:	4638      	mov	r0, r7
 8003cf0:	47c8      	blx	r9
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d01e      	beq.n	8003d34 <_printf_common+0xa4>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	6922      	ldr	r2, [r4, #16]
 8003cfa:	f003 0306 	and.w	r3, r3, #6
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	bf02      	ittt	eq
 8003d02:	68e5      	ldreq	r5, [r4, #12]
 8003d04:	6833      	ldreq	r3, [r6, #0]
 8003d06:	1aed      	subeq	r5, r5, r3
 8003d08:	68a3      	ldr	r3, [r4, #8]
 8003d0a:	bf0c      	ite	eq
 8003d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d10:	2500      	movne	r5, #0
 8003d12:	4293      	cmp	r3, r2
 8003d14:	bfc4      	itt	gt
 8003d16:	1a9b      	subgt	r3, r3, r2
 8003d18:	18ed      	addgt	r5, r5, r3
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	341a      	adds	r4, #26
 8003d1e:	42b5      	cmp	r5, r6
 8003d20:	d11a      	bne.n	8003d58 <_printf_common+0xc8>
 8003d22:	2000      	movs	r0, #0
 8003d24:	e008      	b.n	8003d38 <_printf_common+0xa8>
 8003d26:	2301      	movs	r3, #1
 8003d28:	4652      	mov	r2, sl
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	47c8      	blx	r9
 8003d30:	3001      	adds	r0, #1
 8003d32:	d103      	bne.n	8003d3c <_printf_common+0xac>
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3c:	3501      	adds	r5, #1
 8003d3e:	e7c6      	b.n	8003cce <_printf_common+0x3e>
 8003d40:	18e1      	adds	r1, r4, r3
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	2030      	movs	r0, #48	@ 0x30
 8003d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d4a:	4422      	add	r2, r4
 8003d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d54:	3302      	adds	r3, #2
 8003d56:	e7c7      	b.n	8003ce8 <_printf_common+0x58>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	4638      	mov	r0, r7
 8003d60:	47c8      	blx	r9
 8003d62:	3001      	adds	r0, #1
 8003d64:	d0e6      	beq.n	8003d34 <_printf_common+0xa4>
 8003d66:	3601      	adds	r6, #1
 8003d68:	e7d9      	b.n	8003d1e <_printf_common+0x8e>
	...

08003d6c <_printf_i>:
 8003d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d70:	7e0f      	ldrb	r7, [r1, #24]
 8003d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d74:	2f78      	cmp	r7, #120	@ 0x78
 8003d76:	4691      	mov	r9, r2
 8003d78:	4680      	mov	r8, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	469a      	mov	sl, r3
 8003d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d82:	d807      	bhi.n	8003d94 <_printf_i+0x28>
 8003d84:	2f62      	cmp	r7, #98	@ 0x62
 8003d86:	d80a      	bhi.n	8003d9e <_printf_i+0x32>
 8003d88:	2f00      	cmp	r7, #0
 8003d8a:	f000 80d2 	beq.w	8003f32 <_printf_i+0x1c6>
 8003d8e:	2f58      	cmp	r7, #88	@ 0x58
 8003d90:	f000 80b9 	beq.w	8003f06 <_printf_i+0x19a>
 8003d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d9c:	e03a      	b.n	8003e14 <_printf_i+0xa8>
 8003d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003da2:	2b15      	cmp	r3, #21
 8003da4:	d8f6      	bhi.n	8003d94 <_printf_i+0x28>
 8003da6:	a101      	add	r1, pc, #4	@ (adr r1, 8003dac <_printf_i+0x40>)
 8003da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	08003e19 	.word	0x08003e19
 8003db4:	08003d95 	.word	0x08003d95
 8003db8:	08003d95 	.word	0x08003d95
 8003dbc:	08003d95 	.word	0x08003d95
 8003dc0:	08003d95 	.word	0x08003d95
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003d95 	.word	0x08003d95
 8003dcc:	08003d95 	.word	0x08003d95
 8003dd0:	08003d95 	.word	0x08003d95
 8003dd4:	08003d95 	.word	0x08003d95
 8003dd8:	08003f19 	.word	0x08003f19
 8003ddc:	08003e43 	.word	0x08003e43
 8003de0:	08003ed3 	.word	0x08003ed3
 8003de4:	08003d95 	.word	0x08003d95
 8003de8:	08003d95 	.word	0x08003d95
 8003dec:	08003f3b 	.word	0x08003f3b
 8003df0:	08003d95 	.word	0x08003d95
 8003df4:	08003e43 	.word	0x08003e43
 8003df8:	08003d95 	.word	0x08003d95
 8003dfc:	08003d95 	.word	0x08003d95
 8003e00:	08003edb 	.word	0x08003edb
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	1d1a      	adds	r2, r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6032      	str	r2, [r6, #0]
 8003e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e14:	2301      	movs	r3, #1
 8003e16:	e09d      	b.n	8003f54 <_printf_i+0x1e8>
 8003e18:	6833      	ldr	r3, [r6, #0]
 8003e1a:	6820      	ldr	r0, [r4, #0]
 8003e1c:	1d19      	adds	r1, r3, #4
 8003e1e:	6031      	str	r1, [r6, #0]
 8003e20:	0606      	lsls	r6, r0, #24
 8003e22:	d501      	bpl.n	8003e28 <_printf_i+0xbc>
 8003e24:	681d      	ldr	r5, [r3, #0]
 8003e26:	e003      	b.n	8003e30 <_printf_i+0xc4>
 8003e28:	0645      	lsls	r5, r0, #25
 8003e2a:	d5fb      	bpl.n	8003e24 <_printf_i+0xb8>
 8003e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e30:	2d00      	cmp	r5, #0
 8003e32:	da03      	bge.n	8003e3c <_printf_i+0xd0>
 8003e34:	232d      	movs	r3, #45	@ 0x2d
 8003e36:	426d      	negs	r5, r5
 8003e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e3c:	4859      	ldr	r0, [pc, #356]	@ (8003fa4 <_printf_i+0x238>)
 8003e3e:	230a      	movs	r3, #10
 8003e40:	e011      	b.n	8003e66 <_printf_i+0xfa>
 8003e42:	6821      	ldr	r1, [r4, #0]
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	0608      	lsls	r0, r1, #24
 8003e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e4c:	d402      	bmi.n	8003e54 <_printf_i+0xe8>
 8003e4e:	0649      	lsls	r1, r1, #25
 8003e50:	bf48      	it	mi
 8003e52:	b2ad      	uxthmi	r5, r5
 8003e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e56:	4853      	ldr	r0, [pc, #332]	@ (8003fa4 <_printf_i+0x238>)
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	bf14      	ite	ne
 8003e5c:	230a      	movne	r3, #10
 8003e5e:	2308      	moveq	r3, #8
 8003e60:	2100      	movs	r1, #0
 8003e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e66:	6866      	ldr	r6, [r4, #4]
 8003e68:	60a6      	str	r6, [r4, #8]
 8003e6a:	2e00      	cmp	r6, #0
 8003e6c:	bfa2      	ittt	ge
 8003e6e:	6821      	ldrge	r1, [r4, #0]
 8003e70:	f021 0104 	bicge.w	r1, r1, #4
 8003e74:	6021      	strge	r1, [r4, #0]
 8003e76:	b90d      	cbnz	r5, 8003e7c <_printf_i+0x110>
 8003e78:	2e00      	cmp	r6, #0
 8003e7a:	d04b      	beq.n	8003f14 <_printf_i+0x1a8>
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e82:	fb03 5711 	mls	r7, r3, r1, r5
 8003e86:	5dc7      	ldrb	r7, [r0, r7]
 8003e88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e8c:	462f      	mov	r7, r5
 8003e8e:	42bb      	cmp	r3, r7
 8003e90:	460d      	mov	r5, r1
 8003e92:	d9f4      	bls.n	8003e7e <_printf_i+0x112>
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d10b      	bne.n	8003eb0 <_printf_i+0x144>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	07df      	lsls	r7, r3, #31
 8003e9c:	d508      	bpl.n	8003eb0 <_printf_i+0x144>
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	6861      	ldr	r1, [r4, #4]
 8003ea2:	4299      	cmp	r1, r3
 8003ea4:	bfde      	ittt	le
 8003ea6:	2330      	movle	r3, #48	@ 0x30
 8003ea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eb0:	1b92      	subs	r2, r2, r6
 8003eb2:	6122      	str	r2, [r4, #16]
 8003eb4:	f8cd a000 	str.w	sl, [sp]
 8003eb8:	464b      	mov	r3, r9
 8003eba:	aa03      	add	r2, sp, #12
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	f7ff fee6 	bl	8003c90 <_printf_common>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d14a      	bne.n	8003f5e <_printf_i+0x1f2>
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	b004      	add	sp, #16
 8003ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f043 0320 	orr.w	r3, r3, #32
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	4833      	ldr	r0, [pc, #204]	@ (8003fa8 <_printf_i+0x23c>)
 8003edc:	2778      	movs	r7, #120	@ 0x78
 8003ede:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	6831      	ldr	r1, [r6, #0]
 8003ee6:	061f      	lsls	r7, r3, #24
 8003ee8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003eec:	d402      	bmi.n	8003ef4 <_printf_i+0x188>
 8003eee:	065f      	lsls	r7, r3, #25
 8003ef0:	bf48      	it	mi
 8003ef2:	b2ad      	uxthmi	r5, r5
 8003ef4:	6031      	str	r1, [r6, #0]
 8003ef6:	07d9      	lsls	r1, r3, #31
 8003ef8:	bf44      	itt	mi
 8003efa:	f043 0320 	orrmi.w	r3, r3, #32
 8003efe:	6023      	strmi	r3, [r4, #0]
 8003f00:	b11d      	cbz	r5, 8003f0a <_printf_i+0x19e>
 8003f02:	2310      	movs	r3, #16
 8003f04:	e7ac      	b.n	8003e60 <_printf_i+0xf4>
 8003f06:	4827      	ldr	r0, [pc, #156]	@ (8003fa4 <_printf_i+0x238>)
 8003f08:	e7e9      	b.n	8003ede <_printf_i+0x172>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f023 0320 	bic.w	r3, r3, #32
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	e7f6      	b.n	8003f02 <_printf_i+0x196>
 8003f14:	4616      	mov	r6, r2
 8003f16:	e7bd      	b.n	8003e94 <_printf_i+0x128>
 8003f18:	6833      	ldr	r3, [r6, #0]
 8003f1a:	6825      	ldr	r5, [r4, #0]
 8003f1c:	6961      	ldr	r1, [r4, #20]
 8003f1e:	1d18      	adds	r0, r3, #4
 8003f20:	6030      	str	r0, [r6, #0]
 8003f22:	062e      	lsls	r6, r5, #24
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	d501      	bpl.n	8003f2c <_printf_i+0x1c0>
 8003f28:	6019      	str	r1, [r3, #0]
 8003f2a:	e002      	b.n	8003f32 <_printf_i+0x1c6>
 8003f2c:	0668      	lsls	r0, r5, #25
 8003f2e:	d5fb      	bpl.n	8003f28 <_printf_i+0x1bc>
 8003f30:	8019      	strh	r1, [r3, #0]
 8003f32:	2300      	movs	r3, #0
 8003f34:	6123      	str	r3, [r4, #16]
 8003f36:	4616      	mov	r6, r2
 8003f38:	e7bc      	b.n	8003eb4 <_printf_i+0x148>
 8003f3a:	6833      	ldr	r3, [r6, #0]
 8003f3c:	1d1a      	adds	r2, r3, #4
 8003f3e:	6032      	str	r2, [r6, #0]
 8003f40:	681e      	ldr	r6, [r3, #0]
 8003f42:	6862      	ldr	r2, [r4, #4]
 8003f44:	2100      	movs	r1, #0
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7fc f942 	bl	80001d0 <memchr>
 8003f4c:	b108      	cbz	r0, 8003f52 <_printf_i+0x1e6>
 8003f4e:	1b80      	subs	r0, r0, r6
 8003f50:	6060      	str	r0, [r4, #4]
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	2300      	movs	r3, #0
 8003f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f5c:	e7aa      	b.n	8003eb4 <_printf_i+0x148>
 8003f5e:	6923      	ldr	r3, [r4, #16]
 8003f60:	4632      	mov	r2, r6
 8003f62:	4649      	mov	r1, r9
 8003f64:	4640      	mov	r0, r8
 8003f66:	47d0      	blx	sl
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d0ad      	beq.n	8003ec8 <_printf_i+0x15c>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	079b      	lsls	r3, r3, #30
 8003f70:	d413      	bmi.n	8003f9a <_printf_i+0x22e>
 8003f72:	68e0      	ldr	r0, [r4, #12]
 8003f74:	9b03      	ldr	r3, [sp, #12]
 8003f76:	4298      	cmp	r0, r3
 8003f78:	bfb8      	it	lt
 8003f7a:	4618      	movlt	r0, r3
 8003f7c:	e7a6      	b.n	8003ecc <_printf_i+0x160>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4632      	mov	r2, r6
 8003f82:	4649      	mov	r1, r9
 8003f84:	4640      	mov	r0, r8
 8003f86:	47d0      	blx	sl
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d09d      	beq.n	8003ec8 <_printf_i+0x15c>
 8003f8c:	3501      	adds	r5, #1
 8003f8e:	68e3      	ldr	r3, [r4, #12]
 8003f90:	9903      	ldr	r1, [sp, #12]
 8003f92:	1a5b      	subs	r3, r3, r1
 8003f94:	42ab      	cmp	r3, r5
 8003f96:	dcf2      	bgt.n	8003f7e <_printf_i+0x212>
 8003f98:	e7eb      	b.n	8003f72 <_printf_i+0x206>
 8003f9a:	2500      	movs	r5, #0
 8003f9c:	f104 0619 	add.w	r6, r4, #25
 8003fa0:	e7f5      	b.n	8003f8e <_printf_i+0x222>
 8003fa2:	bf00      	nop
 8003fa4:	08004199 	.word	0x08004199
 8003fa8:	080041aa 	.word	0x080041aa

08003fac <memmove>:
 8003fac:	4288      	cmp	r0, r1
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	eb01 0402 	add.w	r4, r1, r2
 8003fb4:	d902      	bls.n	8003fbc <memmove+0x10>
 8003fb6:	4284      	cmp	r4, r0
 8003fb8:	4623      	mov	r3, r4
 8003fba:	d807      	bhi.n	8003fcc <memmove+0x20>
 8003fbc:	1e43      	subs	r3, r0, #1
 8003fbe:	42a1      	cmp	r1, r4
 8003fc0:	d008      	beq.n	8003fd4 <memmove+0x28>
 8003fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fca:	e7f8      	b.n	8003fbe <memmove+0x12>
 8003fcc:	4402      	add	r2, r0
 8003fce:	4601      	mov	r1, r0
 8003fd0:	428a      	cmp	r2, r1
 8003fd2:	d100      	bne.n	8003fd6 <memmove+0x2a>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fde:	e7f7      	b.n	8003fd0 <memmove+0x24>

08003fe0 <_sbrk_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d06      	ldr	r5, [pc, #24]	@ (8003ffc <_sbrk_r+0x1c>)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4608      	mov	r0, r1
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	f7fd f962 	bl	80012b4 <_sbrk>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_sbrk_r+0x1a>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_sbrk_r+0x1a>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	20000244 	.word	0x20000244

08004000 <memcpy>:
 8004000:	440a      	add	r2, r1
 8004002:	4291      	cmp	r1, r2
 8004004:	f100 33ff 	add.w	r3, r0, #4294967295
 8004008:	d100      	bne.n	800400c <memcpy+0xc>
 800400a:	4770      	bx	lr
 800400c:	b510      	push	{r4, lr}
 800400e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004016:	4291      	cmp	r1, r2
 8004018:	d1f9      	bne.n	800400e <memcpy+0xe>
 800401a:	bd10      	pop	{r4, pc}

0800401c <_realloc_r>:
 800401c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004020:	4680      	mov	r8, r0
 8004022:	4615      	mov	r5, r2
 8004024:	460c      	mov	r4, r1
 8004026:	b921      	cbnz	r1, 8004032 <_realloc_r+0x16>
 8004028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800402c:	4611      	mov	r1, r2
 800402e:	f7ff bc4b 	b.w	80038c8 <_malloc_r>
 8004032:	b92a      	cbnz	r2, 8004040 <_realloc_r+0x24>
 8004034:	f7ff fbdc 	bl	80037f0 <_free_r>
 8004038:	2400      	movs	r4, #0
 800403a:	4620      	mov	r0, r4
 800403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004040:	f000 f81a 	bl	8004078 <_malloc_usable_size_r>
 8004044:	4285      	cmp	r5, r0
 8004046:	4606      	mov	r6, r0
 8004048:	d802      	bhi.n	8004050 <_realloc_r+0x34>
 800404a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800404e:	d8f4      	bhi.n	800403a <_realloc_r+0x1e>
 8004050:	4629      	mov	r1, r5
 8004052:	4640      	mov	r0, r8
 8004054:	f7ff fc38 	bl	80038c8 <_malloc_r>
 8004058:	4607      	mov	r7, r0
 800405a:	2800      	cmp	r0, #0
 800405c:	d0ec      	beq.n	8004038 <_realloc_r+0x1c>
 800405e:	42b5      	cmp	r5, r6
 8004060:	462a      	mov	r2, r5
 8004062:	4621      	mov	r1, r4
 8004064:	bf28      	it	cs
 8004066:	4632      	movcs	r2, r6
 8004068:	f7ff ffca 	bl	8004000 <memcpy>
 800406c:	4621      	mov	r1, r4
 800406e:	4640      	mov	r0, r8
 8004070:	f7ff fbbe 	bl	80037f0 <_free_r>
 8004074:	463c      	mov	r4, r7
 8004076:	e7e0      	b.n	800403a <_realloc_r+0x1e>

08004078 <_malloc_usable_size_r>:
 8004078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800407c:	1f18      	subs	r0, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfbc      	itt	lt
 8004082:	580b      	ldrlt	r3, [r1, r0]
 8004084:	18c0      	addlt	r0, r0, r3
 8004086:	4770      	bx	lr

08004088 <fmin>:
 8004088:	b508      	push	{r3, lr}
 800408a:	ed2d 8b04 	vpush	{d8-d9}
 800408e:	eeb0 8a40 	vmov.f32	s16, s0
 8004092:	eef0 8a60 	vmov.f32	s17, s1
 8004096:	eeb0 9a41 	vmov.f32	s18, s2
 800409a:	eef0 9a61 	vmov.f32	s19, s3
 800409e:	f000 f81d 	bl	80040dc <__fpclassifyd>
 80040a2:	b950      	cbnz	r0, 80040ba <fmin+0x32>
 80040a4:	eeb0 8a49 	vmov.f32	s16, s18
 80040a8:	eef0 8a69 	vmov.f32	s17, s19
 80040ac:	eeb0 0a48 	vmov.f32	s0, s16
 80040b0:	eef0 0a68 	vmov.f32	s1, s17
 80040b4:	ecbd 8b04 	vpop	{d8-d9}
 80040b8:	bd08      	pop	{r3, pc}
 80040ba:	eeb0 0a49 	vmov.f32	s0, s18
 80040be:	eef0 0a69 	vmov.f32	s1, s19
 80040c2:	f000 f80b 	bl	80040dc <__fpclassifyd>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d0f0      	beq.n	80040ac <fmin+0x24>
 80040ca:	ec53 2b19 	vmov	r2, r3, d9
 80040ce:	ec51 0b18 	vmov	r0, r1, d8
 80040d2:	f7fc fae9 	bl	80006a8 <__aeabi_dcmplt>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d0e4      	beq.n	80040a4 <fmin+0x1c>
 80040da:	e7e7      	b.n	80040ac <fmin+0x24>

080040dc <__fpclassifyd>:
 80040dc:	ec51 0b10 	vmov	r0, r1, d0
 80040e0:	b510      	push	{r4, lr}
 80040e2:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80040e6:	460b      	mov	r3, r1
 80040e8:	d019      	beq.n	800411e <__fpclassifyd+0x42>
 80040ea:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80040ee:	490e      	ldr	r1, [pc, #56]	@ (8004128 <__fpclassifyd+0x4c>)
 80040f0:	428a      	cmp	r2, r1
 80040f2:	d90e      	bls.n	8004112 <__fpclassifyd+0x36>
 80040f4:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80040f8:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80040fc:	428a      	cmp	r2, r1
 80040fe:	d908      	bls.n	8004112 <__fpclassifyd+0x36>
 8004100:	4a0a      	ldr	r2, [pc, #40]	@ (800412c <__fpclassifyd+0x50>)
 8004102:	4213      	tst	r3, r2
 8004104:	d007      	beq.n	8004116 <__fpclassifyd+0x3a>
 8004106:	4294      	cmp	r4, r2
 8004108:	d107      	bne.n	800411a <__fpclassifyd+0x3e>
 800410a:	fab0 f080 	clz	r0, r0
 800410e:	0940      	lsrs	r0, r0, #5
 8004110:	bd10      	pop	{r4, pc}
 8004112:	2004      	movs	r0, #4
 8004114:	e7fc      	b.n	8004110 <__fpclassifyd+0x34>
 8004116:	2003      	movs	r0, #3
 8004118:	e7fa      	b.n	8004110 <__fpclassifyd+0x34>
 800411a:	2000      	movs	r0, #0
 800411c:	e7f8      	b.n	8004110 <__fpclassifyd+0x34>
 800411e:	2800      	cmp	r0, #0
 8004120:	d1ee      	bne.n	8004100 <__fpclassifyd+0x24>
 8004122:	2002      	movs	r0, #2
 8004124:	e7f4      	b.n	8004110 <__fpclassifyd+0x34>
 8004126:	bf00      	nop
 8004128:	7fdfffff 	.word	0x7fdfffff
 800412c:	7ff00000 	.word	0x7ff00000

08004130 <_init>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr

0800413c <_fini>:
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	bf00      	nop
 8004140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004142:	bc08      	pop	{r3}
 8004144:	469e      	mov	lr, r3
 8004146:	4770      	bx	lr
