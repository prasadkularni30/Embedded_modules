
ROTOS_LAB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005790  08005790  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005798  08005798  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00006798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080057a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          0001380c  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013820  20013820  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011601  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288d  00000000  00000000  00018645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  0001aed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d44  00000000  00000000  0001c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000049bc  00000000  00000000  0001cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f79  00000000  00000000  00021708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e386b  00000000  00000000  00037681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011aeec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000479c  00000000  00000000  0011af30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0011f6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005508 	.word	0x08005508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005508 	.word	0x08005508

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e4c 	.word	0x20012e4c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fa8f 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f851 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8ad 	bl	80006c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 8000566:	f003 fb59 	bl	8003c1c <SEGGER_SYSVIEW_Conf>
  	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 800056a:	2003      	movs	r0, #3
 800056c:	f000 fb76 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  	//create TaskA as a higher priority than TaskB.  In this example, this isn't strictly necessary since the tasks
  	//spend nearly all of their time blocked
  	assert_param(xTaskCreate(GreenTaskA, "GreenTaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 8000570:	2300      	movs	r3, #0
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	2302      	movs	r3, #2
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2300      	movs	r3, #0
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	4919      	ldr	r1, [pc, #100]	@ (80005e4 <main+0x90>)
 800057e:	481a      	ldr	r0, [pc, #104]	@ (80005e8 <main+0x94>)
 8000580:	f002 f91e 	bl	80027c0 <xTaskCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d003      	beq.n	8000592 <main+0x3e>
 800058a:	216d      	movs	r1, #109	@ 0x6d
 800058c:	4817      	ldr	r0, [pc, #92]	@ (80005ec <main+0x98>)
 800058e:	f000 f96b 	bl	8000868 <assert_failed>

  	//using an assert to ensure proper task creation
  	assert_param(xTaskCreate(BlueTaskB, "BlueTaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
 8000592:	2300      	movs	r3, #0
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2280      	movs	r2, #128	@ 0x80
 800059e:	4914      	ldr	r1, [pc, #80]	@ (80005f0 <main+0x9c>)
 80005a0:	4814      	ldr	r0, [pc, #80]	@ (80005f4 <main+0xa0>)
 80005a2:	f002 f90d 	bl	80027c0 <xTaskCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d003      	beq.n	80005b4 <main+0x60>
 80005ac:	2170      	movs	r1, #112	@ 0x70
 80005ae:	480f      	ldr	r0, [pc, #60]	@ (80005ec <main+0x98>)
 80005b0:	f000 f95a 	bl	8000868 <assert_failed>

  	//for button in polling
  	assert_param(xTaskCreate(ButtonTask, "ButtonTask", STACK_SIZE, NULL, tskIDLE_PRIORITY , NULL) == pdPASS);
 80005b4:	2300      	movs	r3, #0
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2300      	movs	r3, #0
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	490d      	ldr	r1, [pc, #52]	@ (80005f8 <main+0xa4>)
 80005c2:	480e      	ldr	r0, [pc, #56]	@ (80005fc <main+0xa8>)
 80005c4:	f002 f8fc 	bl	80027c0 <xTaskCreate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d003      	beq.n	80005d6 <main+0x82>
 80005ce:	2173      	movs	r1, #115	@ 0x73
 80005d0:	4806      	ldr	r0, [pc, #24]	@ (80005ec <main+0x98>)
 80005d2:	f000 f949 	bl	8000868 <assert_failed>

  	//start the scheduler - shouldn't return unless there's a problem
  	vTaskStartScheduler();
 80005d6:	f002 fab3 	bl	8002b40 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SEGGER_SYSVIEW_PrintfHost("problemm!!!!!!!!!!!!!!!!!!!");
 80005da:	4809      	ldr	r0, [pc, #36]	@ (8000600 <main+0xac>)
 80005dc:	f004 feda 	bl	8005394 <SEGGER_SYSVIEW_PrintfHost>
 80005e0:	e7fb      	b.n	80005da <main+0x86>
 80005e2:	bf00      	nop
 80005e4:	08005520 	.word	0x08005520
 80005e8:	08000765 	.word	0x08000765
 80005ec:	0800552c 	.word	0x0800552c
 80005f0:	08005540 	.word	0x08005540
 80005f4:	080007b5 	.word	0x080007b5
 80005f8:	0800554c 	.word	0x0800554c
 80005fc:	08000805 	.word	0x08000805
 8000600:	08005558 	.word	0x08005558

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	@ 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 ff3e 	bl	8005494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xb4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xb4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <SystemClock_Config+0xb8>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <SystemClock_Config+0xb8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fe81 	bl	800137c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000680:	f000 f8eb 	bl	800085a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f998 	bl	80019d4 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006aa:	f000 f8d6 	bl	800085a <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_GPIO_Init+0x98>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <MX_GPIO_Init+0x98>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_GPIO_Init+0x98>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_GPIO_Init+0x98>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a17      	ldr	r2, [pc, #92]	@ (8000758 <MX_GPIO_Init+0x98>)
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_GPIO_Init+0x98>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0308 	and.w	r3, r3, #8
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000714:	4811      	ldr	r0, [pc, #68]	@ (800075c <MX_GPIO_Init+0x9c>)
 8000716:	f000 fe05 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_GPIO_Init+0xa0>)
 800072e:	f000 faf9 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000732:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_GPIO_Init+0x9c>)
 800074c:	f000 faea 	bl	8000d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40020000 	.word	0x40020000

08000764 <GreenTaskA>:
/**
 * Task A periodically sets 'flag' to 1, which signals taskB  to run
 *
 */
void GreenTaskA( void* argument )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("GreenTaskA:");
 800076c:	480e      	ldr	r0, [pc, #56]	@ (80007a8 <GreenTaskA+0x44>)
 800076e:	f004 fe11 	bl	8005394 <SEGGER_SYSVIEW_PrintfHost>
		if(flag)
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <GreenTaskA+0x48>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00a      	beq.n	8000790 <GreenTaskA+0x2c>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <GreenTaskA+0x4c>)
 8000782:	f000 fdcf 	bl	8001324 <HAL_GPIO_WritePin>
			vTaskDelay(500/portTICK_PERIOD_MS);
 8000786:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800078a:	f002 f9a3 	bl	8002ad4 <vTaskDelay>
 800078e:	e7ed      	b.n	800076c <GreenTaskA+0x8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <GreenTaskA+0x4c>)
 8000798:	f000 fdc4 	bl	8001324 <HAL_GPIO_WritePin>
			vTaskDelay(500/portTICK_PERIOD_MS);
 800079c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a0:	f002 f998 	bl	8002ad4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("GreenTaskA:");
 80007a4:	e7e2      	b.n	800076c <GreenTaskA+0x8>
 80007a6:	bf00      	nop
 80007a8:	08005574 	.word	0x08005574
 80007ac:	20000030 	.word	0x20000030
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <BlueTaskB>:

/**
 * wait until flag != 0 then triple blink the Blue LED
 */
void BlueTaskB( void* argument )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("BlueTaskB");
 80007bc:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <BlueTaskB+0x44>)
 80007be:	f004 fde9 	bl	8005394 <SEGGER_SYSVIEW_PrintfHost>
		if(flag)
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <BlueTaskB+0x48>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00a      	beq.n	80007e0 <BlueTaskB+0x2c>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <BlueTaskB+0x4c>)
 80007d2:	f000 fda7 	bl	8001324 <HAL_GPIO_WritePin>
			vTaskDelay(500/portTICK_PERIOD_MS);
 80007d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007da:	f002 f97b 	bl	8002ad4 <vTaskDelay>
 80007de:	e7ed      	b.n	80007bc <BlueTaskB+0x8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <BlueTaskB+0x4c>)
 80007e8:	f000 fd9c 	bl	8001324 <HAL_GPIO_WritePin>
			vTaskDelay(500/portTICK_PERIOD_MS);
 80007ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007f0:	f002 f970 	bl	8002ad4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("BlueTaskB");
 80007f4:	e7e2      	b.n	80007bc <BlueTaskB+0x8>
 80007f6:	bf00      	nop
 80007f8:	08005540 	.word	0x08005540
 80007fc:	20000030 	.word	0x20000030
 8000800:	40020c00 	.word	0x40020c00

08000804 <ButtonTask>:
		}
	}
}

void ButtonTask(void * argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("ButtonTask");
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <ButtonTask+0x2c>)
 800080e:	f004 fdc1 	bl	8005394 <SEGGER_SYSVIEW_PrintfHost>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000812:	2101      	movs	r1, #1
 8000814:	4807      	ldr	r0, [pc, #28]	@ (8000834 <ButtonTask+0x30>)
 8000816:	f000 fd65 	bl	80012e4 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <ButtonTask+0x24>
		{
			flag = 1;
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <ButtonTask+0x34>)
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e7f1      	b.n	800080c <ButtonTask+0x8>
		}
		else
		{
			flag = 0;
 8000828:	4b03      	ldr	r3, [pc, #12]	@ (8000838 <ButtonTask+0x34>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
		SEGGER_SYSVIEW_PrintfHost("ButtonTask");
 800082e:	e7ed      	b.n	800080c <ButtonTask+0x8>
 8000830:	0800554c 	.word	0x0800554c
 8000834:	40020000 	.word	0x40020000
 8000838:	20000030 	.word	0x20000030

0800083c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800084c:	d101      	bne.n	8000852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800084e:	f000 f937 	bl	8000ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085e:	b672      	cpsid	i
}
 8000860:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000862:	bf00      	nop
 8000864:	e7fd      	b.n	8000862 <Error_Handler+0x8>
	...

08000868 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s on line %d\r\n", file, line);
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	4802      	ldr	r0, [pc, #8]	@ (8000880 <assert_failed+0x18>)
 8000878:	f004 fd8c 	bl	8005394 <SEGGER_SYSVIEW_PrintfHost>
	  while(1);
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <assert_failed+0x14>
 8000880:	08005580 	.word	0x08005580

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000898:	6453      	str	r3, [r2, #68]	@ 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <HAL_InitTick+0xd0>)
 80008ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ec:	4a2d      	ldr	r2, [pc, #180]	@ (80009a4 <HAL_InitTick+0xd0>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f4:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <HAL_InitTick+0xd0>)
 80008f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000900:	f107 020c 	add.w	r2, r7, #12
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fad6 	bl	8001ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000910:	f001 fac0 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8000914:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000918:	4a23      	ldr	r2, [pc, #140]	@ (80009a8 <HAL_InitTick+0xd4>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	0c9b      	lsrs	r3, r3, #18
 8000920:	3b01      	subs	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000924:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <HAL_InitTick+0xd8>)
 8000926:	4a22      	ldr	r2, [pc, #136]	@ (80009b0 <HAL_InitTick+0xdc>)
 8000928:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <HAL_InitTick+0xd8>)
 800092c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000930:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000932:	4a1e      	ldr	r2, [pc, #120]	@ (80009ac <HAL_InitTick+0xd8>)
 8000934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000936:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000938:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <HAL_InitTick+0xd8>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <HAL_InitTick+0xd8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <HAL_InitTick+0xd8>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800094a:	4818      	ldr	r0, [pc, #96]	@ (80009ac <HAL_InitTick+0xd8>)
 800094c:	f001 fae8 	bl	8001f20 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800095a:	2b00      	cmp	r3, #0
 800095c:	d11b      	bne.n	8000996 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800095e:	4813      	ldr	r0, [pc, #76]	@ (80009ac <HAL_InitTick+0xd8>)
 8000960:	f001 fc00 	bl	8002164 <HAL_TIM_Base_Start_IT>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800096a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800096e:	2b00      	cmp	r3, #0
 8000970:	d111      	bne.n	8000996 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000972:	2019      	movs	r0, #25
 8000974:	f000 f9be 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d808      	bhi.n	8000990 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800097e:	2200      	movs	r2, #0
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	2019      	movs	r0, #25
 8000984:	f000 f98a 	bl	8000c9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000988:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_InitTick+0xe0>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	e002      	b.n	8000996 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800099a:	4618      	mov	r0, r3
 800099c:	3730      	adds	r7, #48	@ 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	431bde83 	.word	0x431bde83
 80009ac:	20000034 	.word	0x20000034
 80009b0:	40010000 	.word	0x40010000
 80009b4:	20000004 	.word	0x20000004

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009f6:	f001 fc7b 	bl	80022f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000034 	.word	0x20000034

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a2c:	f7ff ffea 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f004 fd25 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd7b 	bl	8000554 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a6c:	080057a0 	.word	0x080057a0
  ldr r2, =_sbss
 8000a70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a74:	20013820 	.word	0x20013820

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <HAL_Init+0x40>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_Init+0x40>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <HAL_Init+0x40>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f8d9 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f7ff ff12 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fee8 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	2000007c 	.word	0x2000007c

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2000007c 	.word	0x2000007c

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	@ (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b07      	cmp	r3, #7
 8000c68:	d00f      	beq.n	8000c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b06      	cmp	r3, #6
 8000c6e:	d00c      	beq.n	8000c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d009      	beq.n	8000c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d006      	beq.n	8000c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d003      	beq.n	8000c8a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c82:	2190      	movs	r1, #144	@ 0x90
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c86:	f7ff fdef 	bl	8000868 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff38 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	080055a8 	.word	0x080055a8

08000c9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d903      	bls.n	8000cbc <HAL_NVIC_SetPriority+0x20>
 8000cb4:	21a8      	movs	r1, #168	@ 0xa8
 8000cb6:	480e      	ldr	r0, [pc, #56]	@ (8000cf0 <HAL_NVIC_SetPriority+0x54>)
 8000cb8:	f7ff fdd6 	bl	8000868 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	d903      	bls.n	8000cca <HAL_NVIC_SetPriority+0x2e>
 8000cc2:	21a9      	movs	r1, #169	@ 0xa9
 8000cc4:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <HAL_NVIC_SetPriority+0x54>)
 8000cc6:	f7ff fdcf 	bl	8000868 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cca:	f7ff ff3d 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000cce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	6978      	ldr	r0, [r7, #20]
 8000cd6:	f7ff ff8d 	bl	8000bf4 <NVIC_EncodePriority>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff5c 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	080055a8 	.word	0x080055a8

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da03      	bge.n	8000d0e <HAL_NVIC_EnableIRQ+0x1a>
 8000d06:	21bc      	movs	r1, #188	@ 0xbc
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d0a:	f7ff fdad 	bl	8000868 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff26 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	080055a8 	.word	0x080055a8

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a38      	ldr	r2, [pc, #224]	@ (8000e20 <HAL_GPIO_Init+0xfc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d023      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a37      	ldr	r2, [pc, #220]	@ (8000e24 <HAL_GPIO_Init+0x100>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d01f      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a36      	ldr	r2, [pc, #216]	@ (8000e28 <HAL_GPIO_Init+0x104>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01b      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a35      	ldr	r2, [pc, #212]	@ (8000e2c <HAL_GPIO_Init+0x108>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d017      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a34      	ldr	r2, [pc, #208]	@ (8000e30 <HAL_GPIO_Init+0x10c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a33      	ldr	r2, [pc, #204]	@ (8000e34 <HAL_GPIO_Init+0x110>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00f      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a32      	ldr	r2, [pc, #200]	@ (8000e38 <HAL_GPIO_Init+0x114>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d00b      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a31      	ldr	r2, [pc, #196]	@ (8000e3c <HAL_GPIO_Init+0x118>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d007      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a30      	ldr	r2, [pc, #192]	@ (8000e40 <HAL_GPIO_Init+0x11c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x66>
 8000d82:	21ac      	movs	r1, #172	@ 0xac
 8000d84:	482f      	ldr	r0, [pc, #188]	@ (8000e44 <HAL_GPIO_Init+0x120>)
 8000d86:	f7ff fd6f 	bl	8000868 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d004      	beq.n	8000d9e <HAL_GPIO_Init+0x7a>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d9c:	d303      	bcc.n	8000da6 <HAL_GPIO_Init+0x82>
 8000d9e:	21ad      	movs	r1, #173	@ 0xad
 8000da0:	4828      	ldr	r0, [pc, #160]	@ (8000e44 <HAL_GPIO_Init+0x120>)
 8000da2:	f7ff fd61 	bl	8000868 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d035      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d031      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b11      	cmp	r3, #17
 8000dbc:	d02d      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d029      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b12      	cmp	r3, #18
 8000dcc:	d025      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8000dd6:	d020      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8000de0:	d01b      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8000dea:	d016      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8000df4:	d011      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8000dfe:	d00c      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0xf6>
 8000e12:	21ae      	movs	r1, #174	@ 0xae
 8000e14:	480b      	ldr	r0, [pc, #44]	@ (8000e44 <HAL_GPIO_Init+0x120>)
 8000e16:	f7ff fd27 	bl	8000868 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e241      	b.n	80012a4 <HAL_GPIO_Init+0x580>
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40021400 	.word	0x40021400
 8000e38:	40021800 	.word	0x40021800
 8000e3c:	40021c00 	.word	0x40021c00
 8000e40:	40022000 	.word	0x40022000
 8000e44:	080055e4 	.word	0x080055e4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 821c 	bne.w	800129e <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d144      	bne.n	8000f08 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00f      	beq.n	8000ea6 <HAL_GPIO_Init+0x182>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_GPIO_Init+0x182>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x182>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x182>
 8000e9e:	21c0      	movs	r1, #192	@ 0xc0
 8000ea0:	4881      	ldr	r0, [pc, #516]	@ (80010a8 <HAL_GPIO_Init+0x384>)
 8000ea2:	f7ff fce1 	bl	8000868 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d027      	beq.n	8000f64 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00b      	beq.n	8000f34 <HAL_GPIO_Init+0x210>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x210>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x210>
 8000f2c:	21d1      	movs	r1, #209	@ 0xd1
 8000f2e:	485e      	ldr	r0, [pc, #376]	@ (80010a8 <HAL_GPIO_Init+0x384>)
 8000f30:	f7ff fc9a 	bl	8000868 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	f040 80c1 	bne.w	80010f4 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8098 	beq.w	80010ac <HAL_GPIO_Init+0x388>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	f000 8093 	beq.w	80010ac <HAL_GPIO_Init+0x388>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 808e 	beq.w	80010ac <HAL_GPIO_Init+0x388>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 8089 	beq.w	80010ac <HAL_GPIO_Init+0x388>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8084 	beq.w	80010ac <HAL_GPIO_Init+0x388>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d07f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d07b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d077      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d073      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d06f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d06b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d067      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d063      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d05f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d05b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b05      	cmp	r3, #5
 8000ffa:	d057      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b05      	cmp	r3, #5
 8001002:	d053      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d04f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b06      	cmp	r3, #6
 8001012:	d04b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b09      	cmp	r3, #9
 800101a:	d047      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d043      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b07      	cmp	r3, #7
 800102a:	d03f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b07      	cmp	r3, #7
 8001032:	d03b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b08      	cmp	r3, #8
 800103a:	d037      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d033      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b08      	cmp	r3, #8
 800104a:	d02f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b09      	cmp	r3, #9
 8001052:	d02b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b09      	cmp	r3, #9
 800105a:	d027      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b0a      	cmp	r3, #10
 8001062:	d023      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b0a      	cmp	r3, #10
 800106a:	d01f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b0b      	cmp	r3, #11
 8001072:	d01b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	2b0c      	cmp	r3, #12
 8001082:	d013      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b0d      	cmp	r3, #13
 800108a:	d00f      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2b0c      	cmp	r3, #12
 8001092:	d00b      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x388>
 800109c:	21de      	movs	r1, #222	@ 0xde
 800109e:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <HAL_GPIO_Init+0x384>)
 80010a0:	f7ff fbe2 	bl	8000868 <assert_failed>
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x388>
 80010a6:	bf00      	nop
 80010a8:	080055e4 	.word	0x080055e4
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80b4 	beq.w	800129e <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <HAL_GPIO_Init+0x594>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a5e      	ldr	r2, [pc, #376]	@ (80012b8 <HAL_GPIO_Init+0x594>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b5c      	ldr	r3, [pc, #368]	@ (80012b8 <HAL_GPIO_Init+0x594>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a5a      	ldr	r2, [pc, #360]	@ (80012bc <HAL_GPIO_Init+0x598>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a51      	ldr	r2, [pc, #324]	@ (80012c0 <HAL_GPIO_Init+0x59c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x4b2>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a50      	ldr	r2, [pc, #320]	@ (80012c4 <HAL_GPIO_Init+0x5a0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x4ae>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4f      	ldr	r2, [pc, #316]	@ (80012c8 <HAL_GPIO_Init+0x5a4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x4aa>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4e      	ldr	r2, [pc, #312]	@ (80012cc <HAL_GPIO_Init+0x5a8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x4a6>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4d      	ldr	r2, [pc, #308]	@ (80012d0 <HAL_GPIO_Init+0x5ac>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x4a2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	@ (80012d4 <HAL_GPIO_Init+0x5b0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x49e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4b      	ldr	r2, [pc, #300]	@ (80012d8 <HAL_GPIO_Init+0x5b4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x49a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4a      	ldr	r2, [pc, #296]	@ (80012dc <HAL_GPIO_Init+0x5b8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x496>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00e      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011be:	2306      	movs	r3, #6
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x4b4>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4934      	ldr	r1, [pc, #208]	@ (80012bc <HAL_GPIO_Init+0x598>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b3a      	ldr	r3, [pc, #232]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a31      	ldr	r2, [pc, #196]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <HAL_GPIO_Init+0x5bc>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f adce 	bls.w	8000e48 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40021c00 	.word	0x40021c00
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d104      	bne.n	8001300 <HAL_GPIO_ReadPin+0x1c>
 80012f6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80012fa:	4809      	ldr	r0, [pc, #36]	@ (8001320 <HAL_GPIO_ReadPin+0x3c>)
 80012fc:	f7ff fab4 	bl	8000868 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	080055e4 	.word	0x080055e4

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <HAL_GPIO_WritePin+0x20>
 800133a:	f240 119d 	movw	r1, #413	@ 0x19d
 800133e:	480e      	ldr	r0, [pc, #56]	@ (8001378 <HAL_GPIO_WritePin+0x54>)
 8001340:	f7ff fa92 	bl	8000868 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_GPIO_WritePin+0x36>
 800134a:	787b      	ldrb	r3, [r7, #1]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d004      	beq.n	800135a <HAL_GPIO_WritePin+0x36>
 8001350:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <HAL_GPIO_WritePin+0x54>)
 8001356:	f7ff fa87 	bl	8000868 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800135a:	787b      	ldrb	r3, [r7, #1]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001360:	887a      	ldrh	r2, [r7, #2]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001366:	e003      	b.n	8001370 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	041a      	lsls	r2, r3, #16
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	080055e4 	.word	0x080055e4

0800137c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e318      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	d903      	bls.n	800139e <HAL_RCC_OscConfig+0x22>
 8001396:	21e6      	movs	r1, #230	@ 0xe6
 8001398:	4897      	ldr	r0, [pc, #604]	@ (80015f8 <HAL_RCC_OscConfig+0x27c>)
 800139a:	f7ff fa65 	bl	8000868 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8088 	beq.w	80014bc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00d      	beq.n	80013d0 <HAL_RCC_OscConfig+0x54>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013bc:	d008      	beq.n	80013d0 <HAL_RCC_OscConfig+0x54>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c6:	d003      	beq.n	80013d0 <HAL_RCC_OscConfig+0x54>
 80013c8:	21eb      	movs	r1, #235	@ 0xeb
 80013ca:	488b      	ldr	r0, [pc, #556]	@ (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	f7ff fa4c 	bl	8000868 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d0:	4b8a      	ldr	r3, [pc, #552]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d00c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013dc:	4b87      	ldr	r3, [pc, #540]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d112      	bne.n	800140e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e8:	4b84      	ldr	r3, [pc, #528]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f4:	d10b      	bne.n	800140e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f6:	4b81      	ldr	r3, [pc, #516]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d05b      	beq.n	80014ba <HAL_RCC_OscConfig+0x13e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d157      	bne.n	80014ba <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e2d8      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0xaa>
 8001418:	4b78      	ldr	r3, [pc, #480]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a77      	ldr	r2, [pc, #476]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800141e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e01d      	b.n	8001462 <HAL_RCC_OscConfig+0xe6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800142e:	d10c      	bne.n	800144a <HAL_RCC_OscConfig+0xce>
 8001430:	4b72      	ldr	r3, [pc, #456]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a71      	ldr	r2, [pc, #452]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b6f      	ldr	r3, [pc, #444]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6e      	ldr	r2, [pc, #440]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e00b      	b.n	8001462 <HAL_RCC_OscConfig+0xe6>
 800144a:	4b6c      	ldr	r3, [pc, #432]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6b      	ldr	r2, [pc, #428]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b69      	ldr	r3, [pc, #420]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a68      	ldr	r2, [pc, #416]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001460:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d013      	beq.n	8001492 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fb3d 	bl	8000ae8 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001472:	f7ff fb39 	bl	8000ae8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	@ 0x64
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e29d      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	4b5d      	ldr	r3, [pc, #372]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0xf6>
 8001490:	e014      	b.n	80014bc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb29 	bl	8000ae8 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149a:	f7ff fb25 	bl	8000ae8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	@ 0x64
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e289      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ac:	4b53      	ldr	r3, [pc, #332]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x11e>
 80014b8:	e000      	b.n	80014bc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d079      	beq.n	80015bc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_OscConfig+0x166>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d004      	beq.n	80014e2 <HAL_RCC_OscConfig+0x166>
 80014d8:	f240 111d 	movw	r1, #285	@ 0x11d
 80014dc:	4846      	ldr	r0, [pc, #280]	@ (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014de:	f7ff f9c3 	bl	8000868 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b1f      	cmp	r3, #31
 80014e8:	d904      	bls.n	80014f4 <HAL_RCC_OscConfig+0x178>
 80014ea:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80014ee:	4842      	ldr	r0, [pc, #264]	@ (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80014f0:	f7ff f9ba 	bl	8000868 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f4:	4b41      	ldr	r3, [pc, #260]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001500:	4b3e      	ldr	r3, [pc, #248]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001508:	2b08      	cmp	r3, #8
 800150a:	d11c      	bne.n	8001546 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150c:	4b3b      	ldr	r3, [pc, #236]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d116      	bne.n	8001546 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001518:	4b38      	ldr	r3, [pc, #224]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x1b4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e247      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b32      	ldr	r3, [pc, #200]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	492f      	ldr	r1, [pc, #188]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001544:	e03a      	b.n	80015bc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d020      	beq.n	8001590 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <HAL_RCC_OscConfig+0x284>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fac8 	bl	8000ae8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fac4 	bl	8000ae8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e228      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	491c      	ldr	r1, [pc, #112]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
 800158e:	e015      	b.n	80015bc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x284>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff faa7 	bl	8000ae8 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff faa3 	bl	8000ae8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e207      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_RCC_OscConfig+0x280>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d045      	beq.n	8001654 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_OscConfig+0x266>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d004      	beq.n	80015e2 <HAL_RCC_OscConfig+0x266>
 80015d8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80015dc:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <HAL_RCC_OscConfig+0x27c>)
 80015de:	f7ff f943 	bl	8000868 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01e      	beq.n	8001628 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_RCC_OscConfig+0x288>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa7a 	bl	8000ae8 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e010      	b.n	800161a <HAL_RCC_OscConfig+0x29e>
 80015f8:	08005620 	.word	0x08005620
 80015fc:	40023800 	.word	0x40023800
 8001600:	42470000 	.word	0x42470000
 8001604:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fa6e 	bl	8000ae8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1d2      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	4b5e      	ldr	r3, [pc, #376]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x28c>
 8001626:	e015      	b.n	8001654 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001628:	4b5b      	ldr	r3, [pc, #364]	@ (8001798 <HAL_RCC_OscConfig+0x41c>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff fa5b 	bl	8000ae8 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fa57 	bl	8000ae8 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1bb      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b52      	ldr	r3, [pc, #328]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80b0 	beq.w	80017c2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <HAL_RCC_OscConfig+0x30c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d008      	beq.n	8001688 <HAL_RCC_OscConfig+0x30c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d004      	beq.n	8001688 <HAL_RCC_OscConfig+0x30c>
 800167e:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8001682:	4846      	ldr	r0, [pc, #280]	@ (800179c <HAL_RCC_OscConfig+0x420>)
 8001684:	f7ff f8f0 	bl	8000868 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001688:	4b42      	ldr	r3, [pc, #264]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10f      	bne.n	80016b4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b3e      	ldr	r3, [pc, #248]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	4a3d      	ldr	r2, [pc, #244]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <HAL_RCC_OscConfig+0x424>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d118      	bne.n	80016f2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c0:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <HAL_RCC_OscConfig+0x424>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a36      	ldr	r2, [pc, #216]	@ (80017a0 <HAL_RCC_OscConfig+0x424>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa0c 	bl	8000ae8 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d4:	f7ff fa08 	bl	8000ae8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e16c      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <HAL_RCC_OscConfig+0x424>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x38c>
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6713      	str	r3, [r2, #112]	@ 0x70
 8001706:	e01c      	b.n	8001742 <HAL_RCC_OscConfig+0x3c6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x3ae>
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	4a1f      	ldr	r2, [pc, #124]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	@ 0x70
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001720:	4a1c      	ldr	r2, [pc, #112]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	@ 0x70
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0x3c6>
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	@ 0x70
 8001736:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	4a16      	ldr	r2, [pc, #88]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d015      	beq.n	8001776 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff f9cd 	bl	8000ae8 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff f9c9 	bl	8000ae8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e12b      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_RCC_OscConfig+0x418>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ee      	beq.n	8001752 <HAL_RCC_OscConfig+0x3d6>
 8001774:	e01c      	b.n	80017b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff f9b7 	bl	8000ae8 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	e012      	b.n	80017a4 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff f9b3 	bl	8000ae8 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d909      	bls.n	80017a4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e115      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
 8001794:	40023800 	.word	0x40023800
 8001798:	42470e80 	.word	0x42470e80
 800179c:	08005620 	.word	0x08005620
 80017a0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b88      	ldr	r3, [pc, #544]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e6      	bne.n	800177e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b6:	4b84      	ldr	r3, [pc, #528]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a83      	ldr	r2, [pc, #524]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x468>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d008      	beq.n	80017e4 <HAL_RCC_OscConfig+0x468>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d004      	beq.n	80017e4 <HAL_RCC_OscConfig+0x468>
 80017da:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80017de:	487b      	ldr	r0, [pc, #492]	@ (80019cc <HAL_RCC_OscConfig+0x650>)
 80017e0:	f7ff f842 	bl	8000868 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80e8 	beq.w	80019be <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ee:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	f000 80a9 	beq.w	800194e <HAL_RCC_OscConfig+0x5d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b02      	cmp	r3, #2
 8001802:	f040 808d 	bne.w	8001920 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_OscConfig+0x4a6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001816:	d004      	beq.n	8001822 <HAL_RCC_OscConfig+0x4a6>
 8001818:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 800181c:	486b      	ldr	r0, [pc, #428]	@ (80019cc <HAL_RCC_OscConfig+0x650>)
 800181e:	f7ff f823 	bl	8000868 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d903      	bls.n	8001832 <HAL_RCC_OscConfig+0x4b6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001830:	d904      	bls.n	800183c <HAL_RCC_OscConfig+0x4c0>
 8001832:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8001836:	4865      	ldr	r0, [pc, #404]	@ (80019cc <HAL_RCC_OscConfig+0x650>)
 8001838:	f7ff f816 	bl	8000868 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	2b31      	cmp	r3, #49	@ 0x31
 8001842:	d904      	bls.n	800184e <HAL_RCC_OscConfig+0x4d2>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 800184c:	d904      	bls.n	8001858 <HAL_RCC_OscConfig+0x4dc>
 800184e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8001852:	485e      	ldr	r0, [pc, #376]	@ (80019cc <HAL_RCC_OscConfig+0x650>)
 8001854:	f7ff f808 	bl	8000868 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2b02      	cmp	r3, #2
 800185e:	d010      	beq.n	8001882 <HAL_RCC_OscConfig+0x506>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	2b04      	cmp	r3, #4
 8001866:	d00c      	beq.n	8001882 <HAL_RCC_OscConfig+0x506>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	2b06      	cmp	r3, #6
 800186e:	d008      	beq.n	8001882 <HAL_RCC_OscConfig+0x506>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	2b08      	cmp	r3, #8
 8001876:	d004      	beq.n	8001882 <HAL_RCC_OscConfig+0x506>
 8001878:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800187c:	4853      	ldr	r0, [pc, #332]	@ (80019cc <HAL_RCC_OscConfig+0x650>)
 800187e:	f7fe fff3 	bl	8000868 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d903      	bls.n	8001892 <HAL_RCC_OscConfig+0x516>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	2b0f      	cmp	r3, #15
 8001890:	d904      	bls.n	800189c <HAL_RCC_OscConfig+0x520>
 8001892:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8001896:	484d      	ldr	r0, [pc, #308]	@ (80019cc <HAL_RCC_OscConfig+0x650>)
 8001898:	f7fe ffe6 	bl	8000868 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b4c      	ldr	r3, [pc, #304]	@ (80019d0 <HAL_RCC_OscConfig+0x654>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f921 	bl	8000ae8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff f91d 	bl	8000ae8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e081      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018bc:	4b42      	ldr	r3, [pc, #264]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	019b      	lsls	r3, r3, #6
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	061b      	lsls	r3, r3, #24
 80018ec:	4936      	ldr	r1, [pc, #216]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f2:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <HAL_RCC_OscConfig+0x654>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f8f6 	bl	8000ae8 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f8f2 	bl	8000ae8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e056      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x584>
 800191e:	e04e      	b.n	80019be <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <HAL_RCC_OscConfig+0x654>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff f8df 	bl	8000ae8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff f8db 	bl	8000ae8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e03f      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x5b2>
 800194c:	e037      	b.n	80019be <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e032      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800195a:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_RCC_OscConfig+0x64c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d028      	beq.n	80019ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d121      	bne.n	80019ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d11a      	bne.n	80019ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001990:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001992:	4293      	cmp	r3, r2
 8001994:	d111      	bne.n	80019ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x642>
#endif
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08005620 	.word	0x08005620
 80019d0:	42470060 	.word	0x42470060

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e174      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x24>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d904      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x2e>
 80019f8:	f240 215a 	movw	r1, #602	@ 0x25a
 80019fc:	487b      	ldr	r0, [pc, #492]	@ (8001bec <HAL_RCC_ClockConfig+0x218>)
 80019fe:	f7fe ff33 	bl	8000868 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d019      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d016      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d010      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d00d      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d00a      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	d007      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b07      	cmp	r3, #7
 8001a30:	d004      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x68>
 8001a32:	f240 215b 	movw	r1, #603	@ 0x25b
 8001a36:	486d      	ldr	r0, [pc, #436]	@ (8001bec <HAL_RCC_ClockConfig+0x218>)
 8001a38:	f7fe ff16 	bl	8000868 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf0 <HAL_RCC_ClockConfig+0x21c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b69      	ldr	r3, [pc, #420]	@ (8001bf0 <HAL_RCC_ClockConfig+0x21c>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b67      	ldr	r3, [pc, #412]	@ (8001bf0 <HAL_RCC_ClockConfig+0x21c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e136      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d049      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a56      	ldr	r2, [pc, #344]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d024      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b80      	cmp	r3, #128	@ 0x80
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b90      	cmp	r3, #144	@ 0x90
 8001ab6:	d01c      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2ba0      	cmp	r3, #160	@ 0xa0
 8001abe:	d018      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2bb0      	cmp	r3, #176	@ 0xb0
 8001ac6:	d014      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ace:	d010      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2bd0      	cmp	r3, #208	@ 0xd0
 8001ad6:	d00c      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2be0      	cmp	r3, #224	@ 0xe0
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ae6:	d004      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x11e>
 8001ae8:	f240 217e 	movw	r1, #638	@ 0x27e
 8001aec:	483f      	ldr	r0, [pc, #252]	@ (8001bec <HAL_RCC_ClockConfig+0x218>)
 8001aee:	f7fe febb 	bl	8000868 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af2:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	493d      	ldr	r1, [pc, #244]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d059      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d00c      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d004      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
 8001b30:	f240 2185 	movw	r1, #645	@ 0x285
 8001b34:	482d      	ldr	r0, [pc, #180]	@ (8001bec <HAL_RCC_ClockConfig+0x218>)
 8001b36:	f7fe fe97 	bl	8000868 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0bf      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0af      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0a7      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4919      	ldr	r1, [pc, #100]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7fe ffa8 	bl	8000ae8 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe ffa4 	bl	8000ae8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e08f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <HAL_RCC_ClockConfig+0x220>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_RCC_ClockConfig+0x21c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d212      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <HAL_RCC_ClockConfig+0x21c>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_RCC_ClockConfig+0x21c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d007      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e072      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x2fe>
 8001bec:	08005620 	.word	0x08005620
 8001bf0:	40023c00 	.word	0x40023c00
 8001bf4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d025      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d018      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x26a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c14:	d013      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x26a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8001c1e:	d00e      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x26a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x26a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8001c32:	d004      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x26a>
 8001c34:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8001c38:	4828      	ldr	r0, [pc, #160]	@ (8001cdc <HAL_RCC_ClockConfig+0x308>)
 8001c3a:	f7fe fe15 	bl	8000868 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <HAL_RCC_ClockConfig+0x30c>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	4925      	ldr	r1, [pc, #148]	@ (8001ce0 <HAL_RCC_ClockConfig+0x30c>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d026      	beq.n	8001caa <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d018      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x2c2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c6c:	d013      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x2c2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8001c76:	d00e      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x2c2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001c80:	d009      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x2c2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8001c8a:	d004      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x2c2>
 8001c8c:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8001c90:	4812      	ldr	r0, [pc, #72]	@ (8001cdc <HAL_RCC_ClockConfig+0x308>)
 8001c92:	f7fe fde9 	bl	8000868 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c96:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_RCC_ClockConfig+0x30c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	490e      	ldr	r1, [pc, #56]	@ (8001ce0 <HAL_RCC_ClockConfig+0x30c>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001caa:	f000 f821 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <HAL_RCC_ClockConfig+0x30c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	490a      	ldr	r1, [pc, #40]	@ (8001ce4 <HAL_RCC_ClockConfig+0x310>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a09      	ldr	r2, [pc, #36]	@ (8001ce8 <HAL_RCC_ClockConfig+0x314>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_ClockConfig+0x318>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fe02 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	08005620 	.word	0x08005620
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	08005750 	.word	0x08005750
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b090      	sub	sp, #64	@ 0x40
 8001cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d00:	2300      	movs	r3, #0
 8001d02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d08:	4b59      	ldr	r3, [pc, #356]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d00d      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x40>
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	f200 80a1 	bhi.w	8001e5c <HAL_RCC_GetSysClockFreq+0x16c>
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x34>
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d22:	e09b      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d26:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001d28:	e09b      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d2a:	4b53      	ldr	r3, [pc, #332]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d2e:	e098      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d30:	4b4f      	ldr	r3, [pc, #316]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d38:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d028      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b4a      	ldr	r3, [pc, #296]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4b47      	ldr	r3, [pc, #284]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d5c:	fb03 f201 	mul.w	r2, r3, r1
 8001d60:	2300      	movs	r3, #0
 8001d62:	fb00 f303 	mul.w	r3, r0, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	4a43      	ldr	r2, [pc, #268]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d70:	460a      	mov	r2, r1
 8001d72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d76:	4413      	add	r3, r2
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	61fa      	str	r2, [r7, #28]
 8001d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d8a:	f7fe fa6b 	bl	8000264 <__aeabi_uldivmod>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4613      	mov	r3, r2
 8001d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d96:	e053      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d98:	4b35      	ldr	r3, [pc, #212]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	2200      	movs	r2, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	617a      	str	r2, [r7, #20]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001daa:	f04f 0b00 	mov.w	fp, #0
 8001dae:	4652      	mov	r2, sl
 8001db0:	465b      	mov	r3, fp
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc0:	0150      	lsls	r0, r2, #5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	ebb2 080a 	subs.w	r8, r2, sl
 8001dca:	eb63 090b 	sbc.w	r9, r3, fp
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001de2:	ebb2 0408 	subs.w	r4, r2, r8
 8001de6:	eb63 0509 	sbc.w	r5, r3, r9
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	00eb      	lsls	r3, r5, #3
 8001df4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df8:	00e2      	lsls	r2, r4, #3
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	eb14 030a 	adds.w	r3, r4, sl
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	eb45 030b 	adc.w	r3, r5, fp
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e16:	4629      	mov	r1, r5
 8001e18:	028b      	lsls	r3, r1, #10
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e20:	4621      	mov	r1, r4
 8001e22:	028a      	lsls	r2, r1, #10
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	60fa      	str	r2, [r7, #12]
 8001e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e34:	f7fe fa16 	bl	8000264 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001e50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3740      	adds	r7, #64	@ 0x40
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	017d7840 	.word	0x017d7840

08001e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0b5b      	lsrs	r3, r3, #13
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	@ (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08005760 	.word	0x08005760

08001ebc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	220f      	movs	r2, #15
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	08db      	lsrs	r3, r3, #3
 8001ef6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <HAL_RCC_GetClockConfig+0x60>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0207 	and.w	r2, r3, #7
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	601a      	str	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0ed      	b.n	800210e <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a78      	ldr	r2, [pc, #480]	@ (8002118 <HAL_TIM_Base_Init+0x1f8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d045      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f44:	d040      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a74      	ldr	r2, [pc, #464]	@ (800211c <HAL_TIM_Base_Init+0x1fc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d03b      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a72      	ldr	r2, [pc, #456]	@ (8002120 <HAL_TIM_Base_Init+0x200>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d036      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a71      	ldr	r2, [pc, #452]	@ (8002124 <HAL_TIM_Base_Init+0x204>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d031      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6f      	ldr	r2, [pc, #444]	@ (8002128 <HAL_TIM_Base_Init+0x208>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02c      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_TIM_Base_Init+0x20c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d027      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a6c      	ldr	r2, [pc, #432]	@ (8002130 <HAL_TIM_Base_Init+0x210>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d022      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6b      	ldr	r2, [pc, #428]	@ (8002134 <HAL_TIM_Base_Init+0x214>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d01d      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a69      	ldr	r2, [pc, #420]	@ (8002138 <HAL_TIM_Base_Init+0x218>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a68      	ldr	r2, [pc, #416]	@ (800213c <HAL_TIM_Base_Init+0x21c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a66      	ldr	r2, [pc, #408]	@ (8002140 <HAL_TIM_Base_Init+0x220>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a65      	ldr	r2, [pc, #404]	@ (8002144 <HAL_TIM_Base_Init+0x224>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a63      	ldr	r2, [pc, #396]	@ (8002148 <HAL_TIM_Base_Init+0x228>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_TIM_Base_Init+0xa8>
 8001fbe:	f240 1113 	movw	r1, #275	@ 0x113
 8001fc2:	4862      	ldr	r0, [pc, #392]	@ (800214c <HAL_TIM_Base_Init+0x22c>)
 8001fc4:	f7fe fc50 	bl	8000868 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d014      	beq.n	8001ffa <HAL_TIM_Base_Init+0xda>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d010      	beq.n	8001ffa <HAL_TIM_Base_Init+0xda>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d00c      	beq.n	8001ffa <HAL_TIM_Base_Init+0xda>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d008      	beq.n	8001ffa <HAL_TIM_Base_Init+0xda>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b60      	cmp	r3, #96	@ 0x60
 8001fee:	d004      	beq.n	8001ffa <HAL_TIM_Base_Init+0xda>
 8001ff0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001ff4:	4855      	ldr	r0, [pc, #340]	@ (800214c <HAL_TIM_Base_Init+0x22c>)
 8001ff6:	f7fe fc37 	bl	8000868 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00e      	beq.n	8002020 <HAL_TIM_Base_Init+0x100>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800200a:	d009      	beq.n	8002020 <HAL_TIM_Base_Init+0x100>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002014:	d004      	beq.n	8002020 <HAL_TIM_Base_Init+0x100>
 8002016:	f240 1115 	movw	r1, #277	@ 0x115
 800201a:	484c      	ldr	r0, [pc, #304]	@ (800214c <HAL_TIM_Base_Init+0x22c>)
 800201c:	f7fe fc24 	bl	8000868 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d004      	beq.n	8002034 <HAL_TIM_Base_Init+0x114>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a3d      	ldr	r2, [pc, #244]	@ (8002124 <HAL_TIM_Base_Init+0x204>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d107      	bne.n	8002044 <HAL_TIM_Base_Init+0x124>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e00e      	b.n	8002062 <HAL_TIM_Base_Init+0x142>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_TIM_Base_Init+0x13a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002054:	d201      	bcs.n	800205a <HAL_TIM_Base_Init+0x13a>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_TIM_Base_Init+0x13c>
 800205a:	2300      	movs	r3, #0
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <HAL_TIM_Base_Init+0x150>
 8002066:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800206a:	4838      	ldr	r0, [pc, #224]	@ (800214c <HAL_TIM_Base_Init+0x22c>)
 800206c:	f7fe fbfc 	bl	8000868 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_TIM_Base_Init+0x16a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b80      	cmp	r3, #128	@ 0x80
 800207e:	d004      	beq.n	800208a <HAL_TIM_Base_Init+0x16a>
 8002080:	f240 1117 	movw	r1, #279	@ 0x117
 8002084:	4831      	ldr	r0, [pc, #196]	@ (800214c <HAL_TIM_Base_Init+0x22c>)
 8002086:	f7fe fbef 	bl	8000868 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f856 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f000 fa32 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40001000 	.word	0x40001000
 800212c:	40001400 	.word	0x40001400
 8002130:	40010400 	.word	0x40010400
 8002134:	40014000 	.word	0x40014000
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800
 8002140:	40001800 	.word	0x40001800
 8002144:	40001c00 	.word	0x40001c00
 8002148:	40002000 	.word	0x40002000
 800214c:	08005658 	.word	0x08005658

08002150 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a51      	ldr	r2, [pc, #324]	@ (80022b8 <HAL_TIM_Base_Start_IT+0x154>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d045      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217e:	d040      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4d      	ldr	r2, [pc, #308]	@ (80022bc <HAL_TIM_Base_Start_IT+0x158>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d03b      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4c      	ldr	r2, [pc, #304]	@ (80022c0 <HAL_TIM_Base_Start_IT+0x15c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d036      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4a      	ldr	r2, [pc, #296]	@ (80022c4 <HAL_TIM_Base_Start_IT+0x160>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d031      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a49      	ldr	r2, [pc, #292]	@ (80022c8 <HAL_TIM_Base_Start_IT+0x164>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d02c      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a47      	ldr	r2, [pc, #284]	@ (80022cc <HAL_TIM_Base_Start_IT+0x168>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d027      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a46      	ldr	r2, [pc, #280]	@ (80022d0 <HAL_TIM_Base_Start_IT+0x16c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a44      	ldr	r2, [pc, #272]	@ (80022d4 <HAL_TIM_Base_Start_IT+0x170>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01d      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a43      	ldr	r2, [pc, #268]	@ (80022d8 <HAL_TIM_Base_Start_IT+0x174>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d018      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a41      	ldr	r2, [pc, #260]	@ (80022dc <HAL_TIM_Base_Start_IT+0x178>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a40      	ldr	r2, [pc, #256]	@ (80022e0 <HAL_TIM_Base_Start_IT+0x17c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00e      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3e      	ldr	r2, [pc, #248]	@ (80022e4 <HAL_TIM_Base_Start_IT+0x180>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d009      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_TIM_Base_Start_IT+0x184>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d004      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x9e>
 80021f8:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80021fc:	483b      	ldr	r0, [pc, #236]	@ (80022ec <HAL_TIM_Base_Start_IT+0x188>)
 80021fe:	f7fe fb33 	bl	8000868 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d001      	beq.n	8002212 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e04e      	b.n	80022b0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a22      	ldr	r2, [pc, #136]	@ (80022b8 <HAL_TIM_Base_Start_IT+0x154>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x116>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223c:	d01d      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x116>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	@ (80022bc <HAL_TIM_Base_Start_IT+0x158>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x116>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_TIM_Base_Start_IT+0x15c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x116>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <HAL_TIM_Base_Start_IT+0x160>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x116>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <HAL_TIM_Base_Start_IT+0x16c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x116>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1a      	ldr	r2, [pc, #104]	@ (80022d4 <HAL_TIM_Base_Start_IT+0x170>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x116>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1a      	ldr	r2, [pc, #104]	@ (80022e0 <HAL_TIM_Base_Start_IT+0x17c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d111      	bne.n	800229e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b06      	cmp	r3, #6
 800228a:	d010      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	e007      	b.n	80022ae <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40001000 	.word	0x40001000
 80022cc:	40001400 	.word	0x40001400
 80022d0:	40010400 	.word	0x40010400
 80022d4:	40014000 	.word	0x40014000
 80022d8:	40014400 	.word	0x40014400
 80022dc:	40014800 	.word	0x40014800
 80022e0:	40001800 	.word	0x40001800
 80022e4:	40001c00 	.word	0x40001c00
 80022e8:	40002000 	.word	0x40002000
 80022ec:	08005658 	.word	0x08005658

080022f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d020      	beq.n	8002354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01b      	beq.n	8002354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0202 	mvn.w	r2, #2
 8002324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8d2 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f8c4 	bl	80024d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f8d5 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d020      	beq.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01b      	beq.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0204 	mvn.w	r2, #4
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8ac 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f89e 	bl	80024d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8af 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d020      	beq.n	80023ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01b      	beq.n	80023ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0208 	mvn.w	r2, #8
 80023bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2204      	movs	r2, #4
 80023c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f886 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
 80023d8:	e005      	b.n	80023e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f878 	bl	80024d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f889 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d020      	beq.n	8002438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01b      	beq.n	8002438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0210 	mvn.w	r2, #16
 8002408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2208      	movs	r2, #8
 800240e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f860 	bl	80024e4 <HAL_TIM_IC_CaptureCallback>
 8002424:	e005      	b.n	8002432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f852 	bl	80024d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f863 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00c      	beq.n	800245c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d007      	beq.n	800245c <HAL_TIM_IRQHandler+0x16c>
    {
	      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0201 	mvn.w	r2, #1
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe f9f0 	bl	800083c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00c      	beq.n	8002480 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f906 	bl	800268c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f834 	bl	800250c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0220 	mvn.w	r2, #32
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8d8 	bl	8002678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a46      	ldr	r2, [pc, #280]	@ (800264c <TIM_Base_SetConfig+0x12c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800253e:	d00f      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a43      	ldr	r2, [pc, #268]	@ (8002650 <TIM_Base_SetConfig+0x130>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00b      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a42      	ldr	r2, [pc, #264]	@ (8002654 <TIM_Base_SetConfig+0x134>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a41      	ldr	r2, [pc, #260]	@ (8002658 <TIM_Base_SetConfig+0x138>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a40      	ldr	r2, [pc, #256]	@ (800265c <TIM_Base_SetConfig+0x13c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a35      	ldr	r2, [pc, #212]	@ (800264c <TIM_Base_SetConfig+0x12c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002580:	d027      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a32      	ldr	r2, [pc, #200]	@ (8002650 <TIM_Base_SetConfig+0x130>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d023      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a31      	ldr	r2, [pc, #196]	@ (8002654 <TIM_Base_SetConfig+0x134>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a30      	ldr	r2, [pc, #192]	@ (8002658 <TIM_Base_SetConfig+0x138>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a2f      	ldr	r2, [pc, #188]	@ (800265c <TIM_Base_SetConfig+0x13c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d017      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <TIM_Base_SetConfig+0x140>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <TIM_Base_SetConfig+0x144>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002668 <TIM_Base_SetConfig+0x148>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2b      	ldr	r2, [pc, #172]	@ (800266c <TIM_Base_SetConfig+0x14c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002670 <TIM_Base_SetConfig+0x150>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <TIM_Base_SetConfig+0x154>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <TIM_Base_SetConfig+0x12c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <TIM_Base_SetConfig+0xf8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <TIM_Base_SetConfig+0x13c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d105      	bne.n	800263e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f023 0201 	bic.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	611a      	str	r2, [r3, #16]
  }
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40010000 	.word	0x40010000
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800
 8002658:	40000c00 	.word	0x40000c00
 800265c:	40010400 	.word	0x40010400
 8002660:	40014000 	.word	0x40014000
 8002664:	40014400 	.word	0x40014400
 8002668:	40014800 	.word	0x40014800
 800266c:	40001800 	.word	0x40001800
 8002670:	40001c00 	.word	0x40001c00
 8002674:	40002000 	.word	0x40002000

08002678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 0208 	add.w	r2, r3, #8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f103 0208 	add.w	r2, r3, #8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 0208 	add.w	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d103      	bne.n	800271a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e00c      	b.n	8002734 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3308      	adds	r3, #8
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e002      	b.n	8002728 <vListInsert+0x2e>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d2f6      	bcs.n	8002722 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	601a      	str	r2, [r3, #0]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6852      	ldr	r2, [r2, #4]
 800278c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d103      	bne.n	80027a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	@ 0x30
 80027c4:	af04      	add	r7, sp, #16
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 f843 	bl	8003860 <pvPortMalloc>
 80027da:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d013      	beq.n	800280a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027e2:	2058      	movs	r0, #88	@ 0x58
 80027e4:	f001 f83c 	bl	8003860 <pvPortMalloc>
 80027e8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80027f0:	2258      	movs	r2, #88	@ 0x58
 80027f2:	2100      	movs	r1, #0
 80027f4:	69f8      	ldr	r0, [r7, #28]
 80027f6:	f002 fe4d 	bl	8005494 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002800:	e005      	b.n	800280e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f001 f8e8 	bl	80039d8 <vPortFree>
 8002808:	e001      	b.n	800280e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002814:	88fa      	ldrh	r2, [r7, #6]
 8002816:	2300      	movs	r3, #0
 8002818:	9303      	str	r3, [sp, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f80e 	bl	800284c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002830:	69f8      	ldr	r0, [r7, #28]
 8002832:	f000 f89b 	bl	800296c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002836:	2301      	movs	r3, #1
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e002      	b.n	8002842 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002842:	69bb      	ldr	r3, [r7, #24]
    }
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	461a      	mov	r2, r3
 8002864:	21a5      	movs	r1, #165	@ 0xa5
 8002866:	f002 fe15 	bl	8005494 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002874:	3b01      	subs	r3, #1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f023 0307 	bic.w	r3, r3, #7
 8002882:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <prvInitialiseNewTask+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01e      	beq.n	80028ea <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	e012      	b.n	80028d8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	7819      	ldrb	r1, [r3, #0]
 80028ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	3334      	adds	r3, #52	@ 0x34
 80028c2:	460a      	mov	r2, r1
 80028c4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d9e9      	bls.n	80028b2 <prvInitialiseNewTask+0x66>
 80028de:	e000      	b.n	80028e2 <prvInitialiseNewTask+0x96>
            {
                break;
 80028e0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d90b      	bls.n	8002908 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	613b      	str	r3, [r7, #16]
    }
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	2b04      	cmp	r3, #4
 800290c:	d901      	bls.n	8002912 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800290e:	2304      	movs	r3, #4
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800291c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	3304      	adds	r3, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fedc 	bl	80026e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	3318      	adds	r3, #24
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fed7 	bl	80026e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002936:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	f1c3 0205 	rsb	r2, r3, #5
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	69b8      	ldr	r0, [r7, #24]
 800294e:	f000 fd2b 	bl	80033a8 <pxPortInitialiseStack>
 8002952:	4602      	mov	r2, r0
 8002954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002956:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002962:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af02      	add	r7, sp, #8
 8002972:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002974:	f000 fe4a 	bl	800360c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002978:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab8 <prvAddNewTaskToReadyList+0x14c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab8 <prvAddNewTaskToReadyList+0x14c>)
 8002980:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002982:	4b4e      	ldr	r3, [pc, #312]	@ (8002abc <prvAddNewTaskToReadyList+0x150>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800298a:	4a4c      	ldr	r2, [pc, #304]	@ (8002abc <prvAddNewTaskToReadyList+0x150>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002990:	4b49      	ldr	r3, [pc, #292]	@ (8002ab8 <prvAddNewTaskToReadyList+0x14c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d110      	bne.n	80029ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002998:	f000 fbec 	bl	8003174 <prvInitialiseTaskLists>
 800299c:	e00d      	b.n	80029ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800299e:	4b48      	ldr	r3, [pc, #288]	@ (8002ac0 <prvAddNewTaskToReadyList+0x154>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029a6:	4b45      	ldr	r3, [pc, #276]	@ (8002abc <prvAddNewTaskToReadyList+0x150>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d802      	bhi.n	80029ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029b4:	4a41      	ldr	r2, [pc, #260]	@ (8002abc <prvAddNewTaskToReadyList+0x150>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029ba:	4b42      	ldr	r3, [pc, #264]	@ (8002ac4 <prvAddNewTaskToReadyList+0x158>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a40      	ldr	r2, [pc, #256]	@ (8002ac4 <prvAddNewTaskToReadyList+0x158>)
 80029c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029c4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac4 <prvAddNewTaskToReadyList+0x158>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <prvAddNewTaskToReadyList+0x94>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f002 fb31 	bl	800503c <SEGGER_SYSVIEW_OnTaskCreate>
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	461d      	mov	r5, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461c      	mov	r4, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	1ae3      	subs	r3, r4, r3
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	462b      	mov	r3, r5
 80029fc:	f001 f9b0 	bl	8003d60 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fb9e 	bl	8005144 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <prvAddNewTaskToReadyList+0x15c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac8 <prvAddNewTaskToReadyList+0x15c>)
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1e:	492b      	ldr	r1, [pc, #172]	@ (8002acc <prvAddNewTaskToReadyList+0x160>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	3204      	adds	r2, #4
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1d1a      	adds	r2, r3, #4
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002acc <prvAddNewTaskToReadyList+0x160>)
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	615a      	str	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a68:	4918      	ldr	r1, [pc, #96]	@ (8002acc <prvAddNewTaskToReadyList+0x160>)
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1c59      	adds	r1, r3, #1
 8002a78:	4814      	ldr	r0, [pc, #80]	@ (8002acc <prvAddNewTaskToReadyList+0x160>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4403      	add	r3, r0
 8002a84:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a86:	f000 fdf3 	bl	8003670 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <prvAddNewTaskToReadyList+0x154>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00e      	beq.n	8002ab0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <prvAddNewTaskToReadyList+0x150>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d207      	bcs.n	8002ab0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <prvAddNewTaskToReadyList+0x164>)
 8002aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab8:	20000158 	.word	0x20000158
 8002abc:	20000080 	.word	0x20000080
 8002ac0:	20000164 	.word	0x20000164
 8002ac4:	20000174 	.word	0x20000174
 8002ac8:	20000160 	.word	0x20000160
 8002acc:	20000084 	.word	0x20000084
 8002ad0:	e000ed04 	.word	0xe000ed04

08002ad4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d018      	beq.n	8002b18 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <vTaskDelay+0x64>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <vTaskDelay+0x32>
        __asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	60bb      	str	r3, [r7, #8]
    }
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	e7fd      	b.n	8002b02 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002b06:	f000 f877 	bl	8002bf8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fbcb 	bl	80032a8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002b12:	f000 f87f 	bl	8002c14 <xTaskResumeAll>
 8002b16:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <vTaskDelay+0x68>)
 8002b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000180 	.word	0x20000180
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002b46:	4b24      	ldr	r3, [pc, #144]	@ (8002bd8 <vTaskStartScheduler+0x98>)
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2282      	movs	r2, #130	@ 0x82
 8002b52:	4922      	ldr	r1, [pc, #136]	@ (8002bdc <vTaskStartScheduler+0x9c>)
 8002b54:	4822      	ldr	r0, [pc, #136]	@ (8002be0 <vTaskStartScheduler+0xa0>)
 8002b56:	f7ff fe33 	bl	80027c0 <xTaskCreate>
 8002b5a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d124      	bne.n	8002bac <vTaskStartScheduler+0x6c>
        __asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	60bb      	str	r3, [r7, #8]
    }
 8002b74:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <vTaskStartScheduler+0xa4>)
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <vTaskStartScheduler+0xa8>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <vTaskStartScheduler+0xac>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b8a:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <vTaskStartScheduler+0xb0>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <vTaskStartScheduler+0x98>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d102      	bne.n	8002b9c <vTaskStartScheduler+0x5c>
 8002b96:	f002 fa35 	bl	8005004 <SEGGER_SYSVIEW_OnIdle>
 8002b9a:	e004      	b.n	8002ba6 <vTaskStartScheduler+0x66>
 8002b9c:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <vTaskStartScheduler+0xb0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fa8d 	bl	80050c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002ba6:	f000 fc8d 	bl	80034c4 <xPortStartScheduler>
 8002baa:	e00f      	b.n	8002bcc <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d10b      	bne.n	8002bcc <vTaskStartScheduler+0x8c>
        __asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	607b      	str	r3, [r7, #4]
    }
 8002bc6:	bf00      	nop
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <vTaskStartScheduler+0xb4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	2000017c 	.word	0x2000017c
 8002bdc:	08005690 	.word	0x08005690
 8002be0:	08003145 	.word	0x08003145
 8002be4:	20000178 	.word	0x20000178
 8002be8:	20000164 	.word	0x20000164
 8002bec:	2000015c 	.word	0x2000015c
 8002bf0:	20000080 	.word	0x20000080
 8002bf4:	2000000c 	.word	0x2000000c

08002bf8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <vTaskSuspendAll+0x18>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a03      	ldr	r2, [pc, #12]	@ (8002c10 <vTaskSuspendAll+0x18>)
 8002c04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000180 	.word	0x20000180

08002c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c22:	4b73      	ldr	r3, [pc, #460]	@ (8002df0 <xTaskResumeAll+0x1dc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10b      	bne.n	8002c42 <xTaskResumeAll+0x2e>
        __asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	607b      	str	r3, [r7, #4]
    }
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	e7fd      	b.n	8002c3e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c42:	f000 fce3 	bl	800360c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c46:	4b6a      	ldr	r3, [pc, #424]	@ (8002df0 <xTaskResumeAll+0x1dc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	4a68      	ldr	r2, [pc, #416]	@ (8002df0 <xTaskResumeAll+0x1dc>)
 8002c4e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c50:	4b67      	ldr	r3, [pc, #412]	@ (8002df0 <xTaskResumeAll+0x1dc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 80c4 	bne.w	8002de2 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c5a:	4b66      	ldr	r3, [pc, #408]	@ (8002df4 <xTaskResumeAll+0x1e0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80bf 	beq.w	8002de2 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c64:	e08e      	b.n	8002d84 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c66:	4b64      	ldr	r3, [pc, #400]	@ (8002df8 <xTaskResumeAll+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	6a12      	ldr	r2, [r2, #32]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	69d2      	ldr	r2, [r2, #28]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	3318      	adds	r3, #24
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d103      	bne.n	8002c9c <xTaskResumeAll+0x88>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1e5a      	subs	r2, r3, #1
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	6892      	ldr	r2, [r2, #8]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d103      	bne.n	8002cda <xTaskResumeAll+0xc6>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fa29 	bl	8005144 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	4b40      	ldr	r3, [pc, #256]	@ (8002dfc <xTaskResumeAll+0x1e8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	4a3e      	ldr	r2, [pc, #248]	@ (8002dfc <xTaskResumeAll+0x1e8>)
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d08:	493d      	ldr	r1, [pc, #244]	@ (8002e00 <xTaskResumeAll+0x1ec>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3304      	adds	r3, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	60da      	str	r2, [r3, #12]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	3204      	adds	r2, #4
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	1d1a      	adds	r2, r3, #4
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4a2e      	ldr	r2, [pc, #184]	@ (8002e00 <xTaskResumeAll+0x1ec>)
 8002d48:	441a      	add	r2, r3
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	615a      	str	r2, [r3, #20]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d52:	492b      	ldr	r1, [pc, #172]	@ (8002e00 <xTaskResumeAll+0x1ec>)
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	1c59      	adds	r1, r3, #1
 8002d62:	4827      	ldr	r0, [pc, #156]	@ (8002e00 <xTaskResumeAll+0x1ec>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4403      	add	r3, r0
 8002d6e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <xTaskResumeAll+0x1f0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002d7e:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <xTaskResumeAll+0x1f4>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <xTaskResumeAll+0x1e4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f47f af6c 	bne.w	8002c66 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d94:	f000 fa6c 	bl	8003270 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d98:	4b1c      	ldr	r3, [pc, #112]	@ (8002e0c <xTaskResumeAll+0x1f8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002da4:	f000 f848 	bl	8002e38 <xTaskIncrementTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <xTaskResumeAll+0x1f4>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f1      	bne.n	8002da4 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002dc0:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <xTaskResumeAll+0x1f8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <xTaskResumeAll+0x1f4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <xTaskResumeAll+0x1fc>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002de2:	f000 fc45 	bl	8003670 <vPortExitCritical>

    return xAlreadyYielded;
 8002de6:	69bb      	ldr	r3, [r7, #24]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000180 	.word	0x20000180
 8002df4:	20000158 	.word	0x20000158
 8002df8:	20000118 	.word	0x20000118
 8002dfc:	20000160 	.word	0x20000160
 8002e00:	20000084 	.word	0x20000084
 8002e04:	20000080 	.word	0x20000080
 8002e08:	2000016c 	.word	0x2000016c
 8002e0c:	20000168 	.word	0x20000168
 8002e10:	e000ed04 	.word	0xe000ed04

08002e14 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e1a:	f000 fcdf 	bl	80037dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e22:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <xTaskGetTickCountFromISR+0x20>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e28:	683b      	ldr	r3, [r7, #0]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000015c 	.word	0x2000015c

08002e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	@ 0x28
 8002e3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e42:	4b80      	ldr	r3, [pc, #512]	@ (8003044 <xTaskIncrementTick+0x20c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 80f1 	bne.w	800302e <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003048 <xTaskIncrementTick+0x210>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e54:	4a7c      	ldr	r2, [pc, #496]	@ (8003048 <xTaskIncrementTick+0x210>)
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d121      	bne.n	8002ea4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e60:	4b7a      	ldr	r3, [pc, #488]	@ (800304c <xTaskIncrementTick+0x214>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <xTaskIncrementTick+0x4a>
        __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	607b      	str	r3, [r7, #4]
    }
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	e7fd      	b.n	8002e7e <xTaskIncrementTick+0x46>
 8002e82:	4b72      	ldr	r3, [pc, #456]	@ (800304c <xTaskIncrementTick+0x214>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	4b71      	ldr	r3, [pc, #452]	@ (8003050 <xTaskIncrementTick+0x218>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6f      	ldr	r2, [pc, #444]	@ (800304c <xTaskIncrementTick+0x214>)
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4a6f      	ldr	r2, [pc, #444]	@ (8003050 <xTaskIncrementTick+0x218>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <xTaskIncrementTick+0x21c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a6d      	ldr	r2, [pc, #436]	@ (8003054 <xTaskIncrementTick+0x21c>)
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	f000 f9e6 	bl	8003270 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ea4:	4b6c      	ldr	r3, [pc, #432]	@ (8003058 <xTaskIncrementTick+0x220>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f0c0 80aa 	bcc.w	8003004 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <xTaskIncrementTick+0x214>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <xTaskIncrementTick+0x220>)
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	601a      	str	r2, [r3, #0]
                    break;
 8002ec2:	e09f      	b.n	8003004 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ec4:	4b61      	ldr	r3, [pc, #388]	@ (800304c <xTaskIncrementTick+0x214>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d203      	bcs.n	8002ee4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002edc:	4a5e      	ldr	r2, [pc, #376]	@ (8003058 <xTaskIncrementTick+0x220>)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002ee2:	e08f      	b.n	8003004 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	3304      	adds	r3, #4
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d103      	bne.n	8002f12 <xTaskIncrementTick+0xda>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1e5a      	subs	r2, r3, #1
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01e      	beq.n	8002f68 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	6a12      	ldr	r2, [r2, #32]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	69d2      	ldr	r2, [r2, #28]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d103      	bne.n	8002f58 <xTaskIncrementTick+0x120>
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	1e5a      	subs	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 f8ea 	bl	8005144 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	2201      	movs	r2, #1
 8002f76:	409a      	lsls	r2, r3
 8002f78:	4b38      	ldr	r3, [pc, #224]	@ (800305c <xTaskIncrementTick+0x224>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	4a37      	ldr	r2, [pc, #220]	@ (800305c <xTaskIncrementTick+0x224>)
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f86:	4936      	ldr	r1, [pc, #216]	@ (8003060 <xTaskIncrementTick+0x228>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3304      	adds	r3, #4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	3204      	adds	r2, #4
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1d1a      	adds	r2, r3, #4
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4a26      	ldr	r2, [pc, #152]	@ (8003060 <xTaskIncrementTick+0x228>)
 8002fc6:	441a      	add	r2, r3
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd0:	4923      	ldr	r1, [pc, #140]	@ (8003060 <xTaskIncrementTick+0x228>)
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	1c59      	adds	r1, r3, #1
 8002fe0:	481f      	ldr	r0, [pc, #124]	@ (8003060 <xTaskIncrementTick+0x228>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4403      	add	r3, r0
 8002fec:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8003064 <xTaskIncrementTick+0x22c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f67f af59 	bls.w	8002eb0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003002:	e755      	b.n	8002eb0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003004:	4b17      	ldr	r3, [pc, #92]	@ (8003064 <xTaskIncrementTick+0x22c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300a:	4915      	ldr	r1, [pc, #84]	@ (8003060 <xTaskIncrementTick+0x228>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d901      	bls.n	8003020 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <xTaskIncrementTick+0x230>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003028:	2301      	movs	r3, #1
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
 800302c:	e004      	b.n	8003038 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800302e:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <xTaskIncrementTick+0x234>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	4a0d      	ldr	r2, [pc, #52]	@ (800306c <xTaskIncrementTick+0x234>)
 8003036:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800303a:	4618      	mov	r0, r3
 800303c:	3728      	adds	r7, #40	@ 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000180 	.word	0x20000180
 8003048:	2000015c 	.word	0x2000015c
 800304c:	20000110 	.word	0x20000110
 8003050:	20000114 	.word	0x20000114
 8003054:	20000170 	.word	0x20000170
 8003058:	20000178 	.word	0x20000178
 800305c:	20000160 	.word	0x20000160
 8003060:	20000084 	.word	0x20000084
 8003064:	20000080 	.word	0x20000080
 8003068:	2000016c 	.word	0x2000016c
 800306c:	20000168 	.word	0x20000168

08003070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003076:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <vTaskSwitchContext+0xbc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800307e:	4b2c      	ldr	r3, [pc, #176]	@ (8003130 <vTaskSwitchContext+0xc0>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003084:	e04e      	b.n	8003124 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003086:	4b2a      	ldr	r3, [pc, #168]	@ (8003130 <vTaskSwitchContext+0xc0>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308c:	4b29      	ldr	r3, [pc, #164]	@ (8003134 <vTaskSwitchContext+0xc4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800309a:	7afb      	ldrb	r3, [r7, #11]
 800309c:	f1c3 031f 	rsb	r3, r3, #31
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	4925      	ldr	r1, [pc, #148]	@ (8003138 <vTaskSwitchContext+0xc8>)
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10b      	bne.n	80030ce <vTaskSwitchContext+0x5e>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	607b      	str	r3, [r7, #4]
    }
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	e7fd      	b.n	80030ca <vTaskSwitchContext+0x5a>
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <vTaskSwitchContext+0xc8>)
 80030da:	4413      	add	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	3308      	adds	r3, #8
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d104      	bne.n	80030fe <vTaskSwitchContext+0x8e>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <vTaskSwitchContext+0xcc>)
 8003106:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <vTaskSwitchContext+0xcc>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <vTaskSwitchContext+0xd0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d102      	bne.n	800311a <vTaskSwitchContext+0xaa>
 8003114:	f001 ff76 	bl	8005004 <SEGGER_SYSVIEW_OnIdle>
}
 8003118:	e004      	b.n	8003124 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <vTaskSwitchContext+0xcc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f001 ffce 	bl	80050c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003124:	bf00      	nop
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000180 	.word	0x20000180
 8003130:	2000016c 	.word	0x2000016c
 8003134:	20000160 	.word	0x20000160
 8003138:	20000084 	.word	0x20000084
 800313c:	20000080 	.word	0x20000080
 8003140:	2000017c 	.word	0x2000017c

08003144 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800314c:	f000 f852 	bl	80031f4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <prvIdleTask+0x28>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d9f9      	bls.n	800314c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <prvIdleTask+0x2c>)
 800315a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003168:	e7f0      	b.n	800314c <prvIdleTask+0x8>
 800316a:	bf00      	nop
 800316c:	20000084 	.word	0x20000084
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	e00c      	b.n	800319a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4a12      	ldr	r2, [pc, #72]	@ (80031d4 <prvInitialiseTaskLists+0x60>)
 800318c:	4413      	add	r3, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fa86 	bl	80026a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3301      	adds	r3, #1
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d9ef      	bls.n	8003180 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80031a0:	480d      	ldr	r0, [pc, #52]	@ (80031d8 <prvInitialiseTaskLists+0x64>)
 80031a2:	f7ff fa7d 	bl	80026a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80031a6:	480d      	ldr	r0, [pc, #52]	@ (80031dc <prvInitialiseTaskLists+0x68>)
 80031a8:	f7ff fa7a 	bl	80026a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <prvInitialiseTaskLists+0x6c>)
 80031ae:	f7ff fa77 	bl	80026a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80031b2:	480c      	ldr	r0, [pc, #48]	@ (80031e4 <prvInitialiseTaskLists+0x70>)
 80031b4:	f7ff fa74 	bl	80026a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80031b8:	480b      	ldr	r0, [pc, #44]	@ (80031e8 <prvInitialiseTaskLists+0x74>)
 80031ba:	f7ff fa71 	bl	80026a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80031be:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <prvInitialiseTaskLists+0x78>)
 80031c0:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <prvInitialiseTaskLists+0x64>)
 80031c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031c4:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <prvInitialiseTaskLists+0x7c>)
 80031c6:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <prvInitialiseTaskLists+0x68>)
 80031c8:	601a      	str	r2, [r3, #0]
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000084 	.word	0x20000084
 80031d8:	200000e8 	.word	0x200000e8
 80031dc:	200000fc 	.word	0x200000fc
 80031e0:	20000118 	.word	0x20000118
 80031e4:	2000012c 	.word	0x2000012c
 80031e8:	20000144 	.word	0x20000144
 80031ec:	20000110 	.word	0x20000110
 80031f0:	20000114 	.word	0x20000114

080031f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031fa:	e019      	b.n	8003230 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80031fc:	f000 fa06 	bl	800360c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003200:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <prvCheckTasksWaitingTermination+0x50>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff faad 	bl	800276c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <prvCheckTasksWaitingTermination+0x54>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3b01      	subs	r3, #1
 8003218:	4a0b      	ldr	r2, [pc, #44]	@ (8003248 <prvCheckTasksWaitingTermination+0x54>)
 800321a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <prvCheckTasksWaitingTermination+0x58>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3b01      	subs	r3, #1
 8003222:	4a0a      	ldr	r2, [pc, #40]	@ (800324c <prvCheckTasksWaitingTermination+0x58>)
 8003224:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003226:	f000 fa23 	bl	8003670 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f810 	bl	8003250 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <prvCheckTasksWaitingTermination+0x58>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e1      	bne.n	80031fc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2000012c 	.word	0x2000012c
 8003248:	20000158 	.word	0x20000158
 800324c:	20000140 	.word	0x20000140

08003250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fbbb 	bl	80039d8 <vPortFree>
            vPortFree( pxTCB );
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fbb8 	bl	80039d8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003274:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <prvResetNextTaskUnblockTime+0x30>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d104      	bne.n	8003288 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <prvResetNextTaskUnblockTime+0x34>)
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003286:	e005      	b.n	8003294 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <prvResetNextTaskUnblockTime+0x30>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a04      	ldr	r2, [pc, #16]	@ (80032a4 <prvResetNextTaskUnblockTime+0x34>)
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000110 	.word	0x20000110
 80032a4:	20000178 	.word	0x20000178

080032a8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80032b2:	4b36      	ldr	r3, [pc, #216]	@ (800338c <prvAddCurrentTaskToDelayedList+0xe4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032b8:	4b35      	ldr	r3, [pc, #212]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3304      	adds	r3, #4
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fa54 	bl	800276c <uxListRemove>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032ca:	4b31      	ldr	r3, [pc, #196]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	2201      	movs	r2, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003394 <prvAddCurrentTaskToDelayedList+0xec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4013      	ands	r3, r2
 80032de:	4a2d      	ldr	r2, [pc, #180]	@ (8003394 <prvAddCurrentTaskToDelayedList+0xec>)
 80032e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d124      	bne.n	8003334 <prvAddCurrentTaskToDelayedList+0x8c>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d021      	beq.n	8003334 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032f0:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <prvAddCurrentTaskToDelayedList+0xf0>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	4b26      	ldr	r3, [pc, #152]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	6892      	ldr	r2, [r2, #8]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	3204      	adds	r2, #4
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	4b1e      	ldr	r3, [pc, #120]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	1d1a      	adds	r2, r3, #4
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	4b1c      	ldr	r3, [pc, #112]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	4b1c      	ldr	r3, [pc, #112]	@ (8003398 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	4a1a      	ldr	r2, [pc, #104]	@ (8003398 <prvAddCurrentTaskToDelayedList+0xf0>)
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003332:	e026      	b.n	8003382 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800333c:	4b14      	ldr	r3, [pc, #80]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	d209      	bcs.n	8003360 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <prvAddCurrentTaskToDelayedList+0xf4>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b0f      	ldr	r3, [pc, #60]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f7ff f9ce 	bl	80026fa <vListInsert>
}
 800335e:	e010      	b.n	8003382 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3304      	adds	r3, #4
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f7ff f9c4 	bl	80026fa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003372:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d202      	bcs.n	8003382 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800337c:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6013      	str	r3, [r2, #0]
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2000015c 	.word	0x2000015c
 8003390:	20000080 	.word	0x20000080
 8003394:	20000160 	.word	0x20000160
 8003398:	20000144 	.word	0x20000144
 800339c:	20000114 	.word	0x20000114
 80033a0:	20000110 	.word	0x20000110
 80033a4:	20000178 	.word	0x20000178

080033a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b04      	subs	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3b04      	subs	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3b04      	subs	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80033d8:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <pxPortInitialiseStack+0x64>)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3b14      	subs	r3, #20
 80033e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b04      	subs	r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f06f 0202 	mvn.w	r2, #2
 80033f6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3b20      	subs	r3, #32
 80033fc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80033fe:	68fb      	ldr	r3, [r7, #12]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	08003411 	.word	0x08003411

08003410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800341a:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <prvTaskExitError+0x58>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d00b      	beq.n	800343c <prvTaskExitError+0x2c>
        __asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	60fb      	str	r3, [r7, #12]
    }
 8003436:	bf00      	nop
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <prvTaskExitError+0x28>
        __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60bb      	str	r3, [r7, #8]
    }
 800344e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003450:	bf00      	nop
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0fc      	beq.n	8003452 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000010 	.word	0x20000010
 800346c:	00000000 	.word	0x00000000

08003470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003470:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <pxCurrentTCBConst2>)
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	6808      	ldr	r0, [r1, #0]
 8003476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347a:	f380 8809 	msr	PSP, r0
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f380 8811 	msr	BASEPRI, r0
 800348a:	4770      	bx	lr
 800348c:	f3af 8000 	nop.w

08003490 <pxCurrentTCBConst2>:
 8003490:	20000080 	.word	0x20000080
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop

08003498 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003498:	4808      	ldr	r0, [pc, #32]	@ (80034bc <prvPortStartFirstTask+0x24>)
 800349a:	6800      	ldr	r0, [r0, #0]
 800349c:	6800      	ldr	r0, [r0, #0]
 800349e:	f380 8808 	msr	MSP, r0
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f380 8814 	msr	CONTROL, r0
 80034aa:	b662      	cpsie	i
 80034ac:	b661      	cpsie	f
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	df00      	svc	0
 80034b8:	bf00      	nop
 80034ba:	0000      	.short	0x0000
 80034bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop

080034c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <xPortStartScheduler+0x124>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a47      	ldr	r2, [pc, #284]	@ (80035ec <xPortStartScheduler+0x128>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10b      	bne.n	80034ec <xPortStartScheduler+0x28>
        __asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	613b      	str	r3, [r7, #16]
    }
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034ec:	4b3e      	ldr	r3, [pc, #248]	@ (80035e8 <xPortStartScheduler+0x124>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3f      	ldr	r2, [pc, #252]	@ (80035f0 <xPortStartScheduler+0x12c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10b      	bne.n	800350e <xPortStartScheduler+0x4a>
        __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	60fb      	str	r3, [r7, #12]
    }
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	e7fd      	b.n	800350a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800350e:	4b39      	ldr	r3, [pc, #228]	@ (80035f4 <xPortStartScheduler+0x130>)
 8003510:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	22ff      	movs	r2, #255	@ 0xff
 800351e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <xPortStartScheduler+0x134>)
 8003534:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003536:	4b31      	ldr	r3, [pc, #196]	@ (80035fc <xPortStartScheduler+0x138>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800353c:	e009      	b.n	8003552 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800353e:	4b2f      	ldr	r3, [pc, #188]	@ (80035fc <xPortStartScheduler+0x138>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3b01      	subs	r3, #1
 8003544:	4a2d      	ldr	r2, [pc, #180]	@ (80035fc <xPortStartScheduler+0x138>)
 8003546:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b80      	cmp	r3, #128	@ 0x80
 800355c:	d0ef      	beq.n	800353e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800355e:	4b27      	ldr	r3, [pc, #156]	@ (80035fc <xPortStartScheduler+0x138>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	d00b      	beq.n	8003582 <xPortStartScheduler+0xbe>
        __asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60bb      	str	r3, [r7, #8]
    }
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	e7fd      	b.n	800357e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003582:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <xPortStartScheduler+0x138>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <xPortStartScheduler+0x138>)
 800358a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800358c:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <xPortStartScheduler+0x138>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003594:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <xPortStartScheduler+0x138>)
 8003596:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80035a0:	4b17      	ldr	r3, [pc, #92]	@ (8003600 <xPortStartScheduler+0x13c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a16      	ldr	r2, [pc, #88]	@ (8003600 <xPortStartScheduler+0x13c>)
 80035a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80035ac:	4b14      	ldr	r3, [pc, #80]	@ (8003600 <xPortStartScheduler+0x13c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a13      	ldr	r2, [pc, #76]	@ (8003600 <xPortStartScheduler+0x13c>)
 80035b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80035b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80035b8:	f000 f8e0 	bl	800377c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <xPortStartScheduler+0x140>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80035c2:	f000 f8ff 	bl	80037c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <xPortStartScheduler+0x144>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003608 <xPortStartScheduler+0x144>)
 80035cc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80035d0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80035d2:	f7ff ff61 	bl	8003498 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80035d6:	f7ff fd4b 	bl	8003070 <vTaskSwitchContext>
    prvTaskExitError();
 80035da:	f7ff ff19 	bl	8003410 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e000ed00 	.word	0xe000ed00
 80035ec:	410fc271 	.word	0x410fc271
 80035f0:	410fc270 	.word	0x410fc270
 80035f4:	e000e400 	.word	0xe000e400
 80035f8:	20000184 	.word	0x20000184
 80035fc:	20000188 	.word	0x20000188
 8003600:	e000ed20 	.word	0xe000ed20
 8003604:	20000010 	.word	0x20000010
 8003608:	e000ef34 	.word	0xe000ef34

0800360c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
        __asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	607b      	str	r3, [r7, #4]
    }
 8003624:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <vPortEnterCritical+0x5c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3301      	adds	r3, #1
 800362c:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <vPortEnterCritical+0x5c>)
 800362e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003630:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <vPortEnterCritical+0x5c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d110      	bne.n	800365a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003638:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <vPortEnterCritical+0x60>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <vPortEnterCritical+0x4e>
        __asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	603b      	str	r3, [r7, #0]
    }
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	e7fd      	b.n	8003656 <vPortEnterCritical+0x4a>
    }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000010 	.word	0x20000010
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <vPortExitCritical+0x50>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <vPortExitCritical+0x26>
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	607b      	str	r3, [r7, #4]
    }
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <vPortExitCritical+0x50>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3b01      	subs	r3, #1
 800369c:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <vPortExitCritical+0x50>)
 800369e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80036a0:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <vPortExitCritical+0x50>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <vPortExitCritical+0x44>
 80036a8:	2300      	movs	r3, #0
 80036aa:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80036b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20000010 	.word	0x20000010
	...

080036d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80036d0:	f3ef 8009 	mrs	r0, PSP
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <pxCurrentTCBConst>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f01e 0f10 	tst.w	lr, #16
 80036e0:	bf08      	it	eq
 80036e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	6010      	str	r0, [r2, #0]
 80036ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80036f4:	f380 8811 	msr	BASEPRI, r0
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f7ff fcb6 	bl	8003070 <vTaskSwitchContext>
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	f380 8811 	msr	BASEPRI, r0
 800370c:	bc09      	pop	{r0, r3}
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	6808      	ldr	r0, [r1, #0]
 8003712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003716:	f01e 0f10 	tst.w	lr, #16
 800371a:	bf08      	it	eq
 800371c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003720:	f380 8809 	msr	PSP, r0
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	f3af 8000 	nop.w

08003730 <pxCurrentTCBConst>:
 8003730:	20000080 	.word	0x20000080
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop

08003738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
        __asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	607b      	str	r3, [r7, #4]
    }
 8003750:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003752:	f7ff fb71 	bl	8002e38 <xTaskIncrementTick>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <SysTick_Handler+0x40>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	2300      	movs	r3, #0
 8003766:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f383 8811 	msr	BASEPRI, r3
    }
 800376e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <vPortSetupTimerInterrupt+0x34>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003786:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <vPortSetupTimerInterrupt+0x38>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <vPortSetupTimerInterrupt+0x3c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <vPortSetupTimerInterrupt+0x40>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	4a09      	ldr	r2, [pc, #36]	@ (80037c0 <vPortSetupTimerInterrupt+0x44>)
 800379a:	3b01      	subs	r3, #1
 800379c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800379e:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <vPortSetupTimerInterrupt+0x34>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010
 80037b4:	e000e018 	.word	0xe000e018
 80037b8:	20000000 	.word	0x20000000
 80037bc:	10624dd3 	.word	0x10624dd3
 80037c0:	e000e014 	.word	0xe000e014

080037c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80037c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80037d4 <vPortEnableVFP+0x10>
 80037c8:	6801      	ldr	r1, [r0, #0]
 80037ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80037ce:	6001      	str	r1, [r0, #0]
 80037d0:	4770      	bx	lr
 80037d2:	0000      	.short	0x0000
 80037d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop

080037dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80037e2:	f3ef 8305 	mrs	r3, IPSR
 80037e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	d915      	bls.n	800381a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80037ee:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <vPortValidateInterruptPriority+0x74>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80037f8:	4b16      	ldr	r3, [pc, #88]	@ (8003854 <vPortValidateInterruptPriority+0x78>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	7afa      	ldrb	r2, [r7, #11]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d20b      	bcs.n	800381a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	607b      	str	r3, [r7, #4]
    }
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800381a:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <vPortValidateInterruptPriority+0x7c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003822:	4b0e      	ldr	r3, [pc, #56]	@ (800385c <vPortValidateInterruptPriority+0x80>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d90b      	bls.n	8003842 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	603b      	str	r3, [r7, #0]
    }
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <vPortValidateInterruptPriority+0x62>
    }
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000e3f0 	.word	0xe000e3f0
 8003854:	20000184 	.word	0x20000184
 8003858:	e000ed0c 	.word	0xe000ed0c
 800385c:	20000188 	.word	0x20000188

08003860 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800386c:	f7ff f9c4 	bl	8002bf8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003870:	4b54      	ldr	r3, [pc, #336]	@ (80039c4 <pvPortMalloc+0x164>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003878:	f000 f90c 	bl	8003a94 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003882:	2208      	movs	r2, #8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	3308      	adds	r3, #8
 800388e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	43db      	mvns	r3, r3
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	d804      	bhi.n	80038a4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	e001      	b.n	80038a8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	db71      	blt.n	8003992 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d06e      	beq.n	8003992 <pvPortMalloc+0x132>
 80038b4:	4b44      	ldr	r3, [pc, #272]	@ (80039c8 <pvPortMalloc+0x168>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d869      	bhi.n	8003992 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80038be:	4b43      	ldr	r3, [pc, #268]	@ (80039cc <pvPortMalloc+0x16c>)
 80038c0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80038c2:	4b42      	ldr	r3, [pc, #264]	@ (80039cc <pvPortMalloc+0x16c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038c8:	e004      	b.n	80038d4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d903      	bls.n	80038e6 <pvPortMalloc+0x86>
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f1      	bne.n	80038ca <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80038e6:	4b37      	ldr	r3, [pc, #220]	@ (80039c4 <pvPortMalloc+0x164>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d050      	beq.n	8003992 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2208      	movs	r2, #8
 80038f6:	4413      	add	r3, r2
 80038f8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1ad2      	subs	r2, r2, r3
 800390a:	2308      	movs	r3, #8
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	429a      	cmp	r2, r3
 8003910:	d920      	bls.n	8003954 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <pvPortMalloc+0xdc>
        __asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	613b      	str	r3, [r7, #16]
    }
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f000 f8fc 	bl	8003b4c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003954:	4b1c      	ldr	r3, [pc, #112]	@ (80039c8 <pvPortMalloc+0x168>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <pvPortMalloc+0x168>)
 8003960:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003962:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <pvPortMalloc+0x168>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <pvPortMalloc+0x170>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d203      	bcs.n	8003976 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800396e:	4b16      	ldr	r3, [pc, #88]	@ (80039c8 <pvPortMalloc+0x168>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <pvPortMalloc+0x170>)
 8003974:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003988:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <pvPortMalloc+0x174>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	4a11      	ldr	r2, [pc, #68]	@ (80039d4 <pvPortMalloc+0x174>)
 8003990:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003992:	f7ff f93f 	bl	8002c14 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <pvPortMalloc+0x158>
        __asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60fb      	str	r3, [r7, #12]
    }
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <pvPortMalloc+0x154>
    return pvReturn;
 80039b8:	69fb      	ldr	r3, [r7, #28]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3728      	adds	r7, #40	@ 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20012d94 	.word	0x20012d94
 80039c8:	20012d98 	.word	0x20012d98
 80039cc:	20012d8c 	.word	0x20012d8c
 80039d0:	20012d9c 	.word	0x20012d9c
 80039d4:	20012da0 	.word	0x20012da0

080039d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04b      	beq.n	8003a82 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80039ea:	2308      	movs	r3, #8
 80039ec:	425b      	negs	r3, r3
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4413      	add	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0b      	blt.n	8003a18 <vPortFree+0x40>
        __asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	60fb      	str	r3, [r7, #12]
    }
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <vPortFree+0x60>
        __asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	60bb      	str	r3, [r7, #8]
    }
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	0fdb      	lsrs	r3, r3, #31
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01c      	beq.n	8003a82 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d118      	bne.n	8003a82 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003a5c:	f7ff f8cc 	bl	8002bf8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <vPortFree+0xb4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	4a08      	ldr	r2, [pc, #32]	@ (8003a8c <vPortFree+0xb4>)
 8003a6c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a6e:	6938      	ldr	r0, [r7, #16]
 8003a70:	f000 f86c 	bl	8003b4c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <vPortFree+0xb8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <vPortFree+0xb8>)
 8003a7c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a7e:	f7ff f8c9 	bl	8002c14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20012d98 	.word	0x20012d98
 8003a90:	20012da4 	.word	0x20012da4

08003a94 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a9a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003a9e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003aa0:	4b25      	ldr	r3, [pc, #148]	@ (8003b38 <prvHeapInit+0xa4>)
 8003aa2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3307      	adds	r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <prvHeapInit+0xa4>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003acc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <prvHeapInit+0xa8>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <prvHeapInit+0xa8>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4413      	add	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0307 	bic.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a13      	ldr	r2, [pc, #76]	@ (8003b40 <prvHeapInit+0xac>)
 8003af4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <prvHeapInit+0xac>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <prvHeapInit+0xac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <prvHeapInit+0xac>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <prvHeapInit+0xb0>)
 8003b22:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <prvHeapInit+0xb4>)
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	2000018c 	.word	0x2000018c
 8003b3c:	20012d8c 	.word	0x20012d8c
 8003b40:	20012d94 	.word	0x20012d94
 8003b44:	20012d9c 	.word	0x20012d9c
 8003b48:	20012d98 	.word	0x20012d98

08003b4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b54:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <prvInsertBlockIntoFreeList+0xac>)
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e002      	b.n	8003b60 <prvInsertBlockIntoFreeList+0x14>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d8f7      	bhi.n	8003b5a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	4413      	add	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d108      	bne.n	8003b8e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	441a      	add	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d118      	bne.n	8003bd4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <prvInsertBlockIntoFreeList+0xb0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d00d      	beq.n	8003bca <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	441a      	add	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e008      	b.n	8003bdc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bca:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <prvInsertBlockIntoFreeList+0xb0>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e003      	b.n	8003bdc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d002      	beq.n	8003bea <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20012d8c 	.word	0x20012d8c
 8003bfc:	20012d94 	.word	0x20012d94

08003c00 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003c04:	4803      	ldr	r0, [pc, #12]	@ (8003c14 <_cbSendSystemDesc+0x14>)
 8003c06:	f001 f9a7 	bl	8004f58 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003c0a:	4803      	ldr	r0, [pc, #12]	@ (8003c18 <_cbSendSystemDesc+0x18>)
 8003c0c:	f001 f9a4 	bl	8004f58 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	08005698 	.word	0x08005698
 8003c18:	080056cc 	.word	0x080056cc

08003c1c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <SEGGER_SYSVIEW_Conf+0x20>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <SEGGER_SYSVIEW_Conf+0x20>)
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <SEGGER_SYSVIEW_Conf+0x24>)
 8003c2a:	4a06      	ldr	r2, [pc, #24]	@ (8003c44 <SEGGER_SYSVIEW_Conf+0x28>)
 8003c2c:	f000 fe1a 	bl	8004864 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c30:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003c34:	f000 fe5a 	bl	80048ec <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	08003c01 	.word	0x08003c01
 8003c44:	08005768 	.word	0x08005768

08003c48 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	e033      	b.n	8003cbc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c54:	491e      	ldr	r1, [pc, #120]	@ (8003cd0 <_cbSendTaskList+0x88>)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	491a      	ldr	r1, [pc, #104]	@ (8003cd0 <_cbSendTaskList+0x88>)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3304      	adds	r3, #4
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	4c16      	ldr	r4, [pc, #88]	@ (8003cd0 <_cbSendTaskList+0x88>)
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4423      	add	r3, r4
 8003c84:	3308      	adds	r3, #8
 8003c86:	681c      	ldr	r4, [r3, #0]
 8003c88:	4d11      	ldr	r5, [pc, #68]	@ (8003cd0 <_cbSendTaskList+0x88>)
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	442b      	add	r3, r5
 8003c96:	330c      	adds	r3, #12
 8003c98:	681d      	ldr	r5, [r3, #0]
 8003c9a:	4e0d      	ldr	r6, [pc, #52]	@ (8003cd0 <_cbSendTaskList+0x88>)
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4433      	add	r3, r6
 8003ca8:	3310      	adds	r3, #16
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	462b      	mov	r3, r5
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	f000 f8bd 	bl	8003e30 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <_cbSendTaskList+0x8c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3c6      	bcc.n	8003c54 <_cbSendTaskList+0xc>
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd0:	20012da8 	.word	0x20012da8
 8003cd4:	20012e48 	.word	0x20012e48

08003cd8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003ce0:	f7ff f898 	bl	8002e14 <xTaskGetTickCountFromISR>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	469a      	mov	sl, r3
 8003cea:	4693      	mov	fp, r2
 8003cec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	f04f 0a00 	mov.w	sl, #0
 8003cfc:	f04f 0b00 	mov.w	fp, #0
 8003d00:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003d04:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003d08:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003d0c:	4652      	mov	r2, sl
 8003d0e:	465b      	mov	r3, fp
 8003d10:	1a14      	subs	r4, r2, r0
 8003d12:	eb63 0501 	sbc.w	r5, r3, r1
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	00ab      	lsls	r3, r5, #2
 8003d20:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003d24:	00a2      	lsls	r2, r4, #2
 8003d26:	4614      	mov	r4, r2
 8003d28:	461d      	mov	r5, r3
 8003d2a:	eb14 0800 	adds.w	r8, r4, r0
 8003d2e:	eb45 0901 	adc.w	r9, r5, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d46:	4690      	mov	r8, r2
 8003d48:	4699      	mov	r9, r3
 8003d4a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003d60 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d6e:	2205      	movs	r2, #5
 8003d70:	492b      	ldr	r1, [pc, #172]	@ (8003e20 <SYSVIEW_AddTask+0xc0>)
 8003d72:	68b8      	ldr	r0, [r7, #8]
 8003d74:	f001 fb7e 	bl	8005474 <memcmp>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04b      	beq.n	8003e16 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d7e:	4b29      	ldr	r3, [pc, #164]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b07      	cmp	r3, #7
 8003d84:	d903      	bls.n	8003d8e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d86:	4828      	ldr	r0, [pc, #160]	@ (8003e28 <SYSVIEW_AddTask+0xc8>)
 8003d88:	f001 fb18 	bl	80053bc <SEGGER_SYSVIEW_Warn>
    return;
 8003d8c:	e044      	b.n	8003e18 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d8e:	4b25      	ldr	r3, [pc, #148]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4926      	ldr	r1, [pc, #152]	@ (8003e2c <SYSVIEW_AddTask+0xcc>)
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4921      	ldr	r1, [pc, #132]	@ (8003e2c <SYSVIEW_AddTask+0xcc>)
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3304      	adds	r3, #4
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003db8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	491b      	ldr	r1, [pc, #108]	@ (8003e2c <SYSVIEW_AddTask+0xcc>)
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3308      	adds	r3, #8
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4916      	ldr	r1, [pc, #88]	@ (8003e2c <SYSVIEW_AddTask+0xcc>)
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	330c      	adds	r3, #12
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003de4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4910      	ldr	r1, [pc, #64]	@ (8003e2c <SYSVIEW_AddTask+0xcc>)
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	3310      	adds	r3, #16
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a08      	ldr	r2, [pc, #32]	@ (8003e24 <SYSVIEW_AddTask+0xc4>)
 8003e02:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f80e 	bl	8003e30 <SYSVIEW_SendTaskInfo>
 8003e14:	e000      	b.n	8003e18 <SYSVIEW_AddTask+0xb8>
    return;
 8003e16:	bf00      	nop

}
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	080056dc 	.word	0x080056dc
 8003e24:	20012e48 	.word	0x20012e48
 8003e28:	080056e4 	.word	0x080056e4
 8003e2c:	20012da8 	.word	0x20012da8

08003e30 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	@ 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	2214      	movs	r2, #20
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 fb24 	bl	8005494 <memset>
  TaskInfo.TaskID     = TaskID;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 ff7f 	bl	8004d68 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003e6a:	bf00      	nop
 8003e6c:	3728      	adds	r7, #40	@ 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e7a:	4b26      	ldr	r3, [pc, #152]	@ (8003f14 <_DoInit+0xa0>)
 8003e7c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e7e:	22a8      	movs	r2, #168	@ 0xa8
 8003e80:	2100      	movs	r1, #0
 8003e82:	6838      	ldr	r0, [r7, #0]
 8003e84:	f001 fb06 	bl	8005494 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2203      	movs	r2, #3
 8003e92:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4a20      	ldr	r2, [pc, #128]	@ (8003f18 <_DoInit+0xa4>)
 8003e98:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f1c <_DoInit+0xa8>)
 8003e9e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ea6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <_DoInit+0xa4>)
 8003ebe:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4a17      	ldr	r2, [pc, #92]	@ (8003f20 <_DoInit+0xac>)
 8003ec4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ede:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	e00c      	b.n	8003f02 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1c3 030f 	rsb	r3, r3, #15
 8003eee:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <_DoInit+0xb0>)
 8003ef0:	5cd1      	ldrb	r1, [r2, r3]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	460a      	mov	r2, r1
 8003efa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3301      	adds	r3, #1
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d9ef      	bls.n	8003ee8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f08:	f3bf 8f5f 	dmb	sy
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20012e4c 	.word	0x20012e4c
 8003f18:	08005734 	.word	0x08005734
 8003f1c:	20012ef4 	.word	0x20012ef4
 8003f20:	200132f4 	.word	0x200132f4
 8003f24:	08005770 	.word	0x08005770

08003f28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	@ 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f34:	4b3e      	ldr	r3, [pc, #248]	@ (8004030 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b53      	cmp	r3, #83	@ 0x53
 8003f40:	d001      	beq.n	8003f46 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f42:	f7ff ff97 	bl	8003e74 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3360      	adds	r3, #96	@ 0x60
 8003f52:	4a37      	ldr	r2, [pc, #220]	@ (8004030 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f54:	4413      	add	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d92b      	bls.n	8003fcc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4293      	cmp	r3, r2
 8003f84:	bf28      	it	cs
 8003f86:	4613      	movcs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	4413      	add	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	6939      	ldr	r1, [r7, #16]
 8003f98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f9a:	f001 faa7 	bl	80054ec <memcpy>
    NumBytesRead += NumBytesRem;
 8003f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	4413      	add	r3, r2
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d101      	bne.n	8003fcc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf28      	it	cs
 8003fdc:	4613      	movcs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d019      	beq.n	800401a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	4413      	add	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	6939      	ldr	r1, [r7, #16]
 8003ff4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ff6:	f001 fa79 	bl	80054ec <memcpy>
    NumBytesRead += NumBytesRem;
 8003ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4413      	add	r3, r2
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	4413      	add	r3, r2
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800401a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004024:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004028:	4618      	mov	r0, r3
 800402a:	3730      	adds	r7, #48	@ 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20012e4c 	.word	0x20012e4c

08004034 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004042:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b53      	cmp	r3, #83	@ 0x53
 800404e:	d001      	beq.n	8004054 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004050:	f7ff ff10 	bl	8003e74 <_DoInit>
  SEGGER_RTT_LOCK();
 8004054:	f3ef 8311 	mrs	r3, BASEPRI
 8004058:	f04f 0120 	mov.w	r1, #32
 800405c:	f381 8811 	msr	BASEPRI, r1
 8004060:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004062:	4b35      	ldr	r3, [pc, #212]	@ (8004138 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004064:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	4613      	mov	r3, r2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4413      	add	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	440b      	add	r3, r1
 800407a:	3304      	adds	r3, #4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3301      	adds	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	429a      	cmp	r2, r3
 8004090:	dbeb      	blt.n	800406a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004092:	e000      	b.n	8004096 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004094:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	429a      	cmp	r2, r3
 800409e:	da3f      	bge.n	8004120 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80040a0:	6939      	ldr	r1, [r7, #16]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	440b      	add	r3, r1
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	4613      	mov	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4413      	add	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	440b      	add	r3, r1
 80040c4:	3304      	adds	r3, #4
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80040ca:	6939      	ldr	r1, [r7, #16]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	440b      	add	r3, r1
 80040d8:	3320      	adds	r3, #32
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80040de:	6939      	ldr	r1, [r7, #16]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	440b      	add	r3, r1
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80040f2:	6939      	ldr	r1, [r7, #16]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	3324      	adds	r3, #36	@ 0x24
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004106:	6939      	ldr	r1, [r7, #16]
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	440b      	add	r3, r1
 8004114:	332c      	adds	r3, #44	@ 0x2c
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800411a:	f3bf 8f5f 	dmb	sy
 800411e:	e002      	b.n	8004126 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800412c:	69fb      	ldr	r3, [r7, #28]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20012e4c 	.word	0x20012e4c

0800413c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	@ 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800414a:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b53      	cmp	r3, #83	@ 0x53
 8004156:	d001      	beq.n	800415c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004158:	f7ff fe8c 	bl	8003e74 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800415c:	4b1c      	ldr	r3, [pc, #112]	@ (80041d0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800415e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d82c      	bhi.n	80041c0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004166:	f3ef 8311 	mrs	r3, BASEPRI
 800416a:	f04f 0120 	mov.w	r1, #32
 800416e:	f381 8811 	msr	BASEPRI, r1
 8004172:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	3360      	adds	r3, #96	@ 0x60
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ae:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041b0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041be:	e002      	b.n	80041c6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80041c0:	f04f 33ff 	mov.w	r3, #4294967295
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3728      	adds	r7, #40	@ 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20012e4c 	.word	0x20012e4c

080041d4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	60fa      	str	r2, [r7, #12]
 80041ea:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b80      	cmp	r3, #128	@ 0x80
 80041f0:	d90a      	bls.n	8004208 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80041f6:	e007      	b.n	8004208 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	1c53      	adds	r3, r2, #1
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1c59      	adds	r1, r3, #1
 8004202:	60f9      	str	r1, [r7, #12]
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	1e5a      	subs	r2, r3, #1
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <_EncodeStr+0x46>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ee      	bne.n	80041f8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	b2da      	uxtb	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3307      	adds	r3, #7
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004252:	4b34      	ldr	r3, [pc, #208]	@ (8004324 <_HandleIncomingPacket+0xd8>)
 8004254:	7e1b      	ldrb	r3, [r3, #24]
 8004256:	4618      	mov	r0, r3
 8004258:	1cfb      	adds	r3, r7, #3
 800425a:	2201      	movs	r2, #1
 800425c:	4619      	mov	r1, r3
 800425e:	f7ff fe63 	bl	8003f28 <SEGGER_RTT_ReadNoLock>
 8004262:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d057      	beq.n	800431a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	2b80      	cmp	r3, #128	@ 0x80
 800426e:	d031      	beq.n	80042d4 <_HandleIncomingPacket+0x88>
 8004270:	2b80      	cmp	r3, #128	@ 0x80
 8004272:	dc40      	bgt.n	80042f6 <_HandleIncomingPacket+0xaa>
 8004274:	2b07      	cmp	r3, #7
 8004276:	dc15      	bgt.n	80042a4 <_HandleIncomingPacket+0x58>
 8004278:	2b00      	cmp	r3, #0
 800427a:	dd3c      	ble.n	80042f6 <_HandleIncomingPacket+0xaa>
 800427c:	3b01      	subs	r3, #1
 800427e:	2b06      	cmp	r3, #6
 8004280:	d839      	bhi.n	80042f6 <_HandleIncomingPacket+0xaa>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <_HandleIncomingPacket+0x3c>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042ab 	.word	0x080042ab
 800428c:	080042b1 	.word	0x080042b1
 8004290:	080042b7 	.word	0x080042b7
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	080042cf 	.word	0x080042cf
 80042a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80042a6:	d033      	beq.n	8004310 <_HandleIncomingPacket+0xc4>
 80042a8:	e025      	b.n	80042f6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042aa:	f000 fbe3 	bl	8004a74 <SEGGER_SYSVIEW_Start>
      break;
 80042ae:	e034      	b.n	800431a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042b0:	f000 fc9a 	bl	8004be8 <SEGGER_SYSVIEW_Stop>
      break;
 80042b4:	e031      	b.n	800431a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80042b6:	f000 fe73 	bl	8004fa0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80042ba:	e02e      	b.n	800431a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80042bc:	f000 fe38 	bl	8004f30 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80042c0:	e02b      	b.n	800431a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80042c2:	f000 fcb7 	bl	8004c34 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80042c6:	e028      	b.n	800431a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80042c8:	f001 f826 	bl	8005318 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80042cc:	e025      	b.n	800431a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80042ce:	f001 f805 	bl	80052dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80042d2:	e022      	b.n	800431a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042d4:	4b13      	ldr	r3, [pc, #76]	@ (8004324 <_HandleIncomingPacket+0xd8>)
 80042d6:	7e1b      	ldrb	r3, [r3, #24]
 80042d8:	4618      	mov	r0, r3
 80042da:	1cfb      	adds	r3, r7, #3
 80042dc:	2201      	movs	r2, #1
 80042de:	4619      	mov	r1, r3
 80042e0:	f7ff fe22 	bl	8003f28 <SEGGER_RTT_ReadNoLock>
 80042e4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 ff6a 	bl	80051c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80042f4:	e00e      	b.n	8004314 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	da0c      	bge.n	8004318 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042fe:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <_HandleIncomingPacket+0xd8>)
 8004300:	7e1b      	ldrb	r3, [r3, #24]
 8004302:	4618      	mov	r0, r3
 8004304:	1cfb      	adds	r3, r7, #3
 8004306:	2201      	movs	r2, #1
 8004308:	4619      	mov	r1, r3
 800430a:	f7ff fe0d 	bl	8003f28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800430e:	e003      	b.n	8004318 <_HandleIncomingPacket+0xcc>
      break;
 8004310:	bf00      	nop
 8004312:	e002      	b.n	800431a <_HandleIncomingPacket+0xce>
      break;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <_HandleIncomingPacket+0xce>
      break;
 8004318:	bf00      	nop
    }
  }
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	2001370c 	.word	0x2001370c

08004328 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b08c      	sub	sp, #48	@ 0x30
 800432c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800432e:	2301      	movs	r3, #1
 8004330:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	3301      	adds	r3, #1
 8004336:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800433c:	4b31      	ldr	r3, [pc, #196]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004342:	e00b      	b.n	800435c <_TrySendOverflowPacket+0x34>
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	b2da      	uxtb	r2, r3
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800434e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004358:	09db      	lsrs	r3, r3, #7
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800435c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004360:	d8f0      	bhi.n	8004344 <_TrySendOverflowPacket+0x1c>
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004372:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <_TrySendOverflowPacket+0xe0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004378:	4b22      	ldr	r3, [pc, #136]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	623b      	str	r3, [r7, #32]
 800438a:	e00b      	b.n	80043a4 <_TrySendOverflowPacket+0x7c>
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	1c59      	adds	r1, r3, #1
 8004394:	6279      	str	r1, [r7, #36]	@ 0x24
 8004396:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	09db      	lsrs	r3, r3, #7
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80043a8:	d8f0      	bhi.n	800438c <_TrySendOverflowPacket+0x64>
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80043ba:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	4618      	mov	r0, r3
 80043c0:	1d3b      	adds	r3, r7, #4
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7fb ff00 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043d0:	4603      	mov	r3, r0
 80043d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043da:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80043e0:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e004      	b.n	80043f8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80043ee:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	3301      	adds	r3, #1
 80043f4:	4a03      	ldr	r2, [pc, #12]	@ (8004404 <_TrySendOverflowPacket+0xdc>)
 80043f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80043f8:	693b      	ldr	r3, [r7, #16]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3730      	adds	r7, #48	@ 0x30
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	2001370c 	.word	0x2001370c
 8004408:	e0001004 	.word	0xe0001004

0800440c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	@ 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004418:	4b98      	ldr	r3, [pc, #608]	@ (800467c <_SendPacket+0x270>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d010      	beq.n	8004442 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004420:	4b96      	ldr	r3, [pc, #600]	@ (800467c <_SendPacket+0x270>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 812d 	beq.w	8004684 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800442a:	4b94      	ldr	r3, [pc, #592]	@ (800467c <_SendPacket+0x270>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d109      	bne.n	8004446 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004432:	f7ff ff79 	bl	8004328 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004436:	4b91      	ldr	r3, [pc, #580]	@ (800467c <_SendPacket+0x270>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b01      	cmp	r3, #1
 800443c:	f040 8124 	bne.w	8004688 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004440:	e001      	b.n	8004446 <_SendPacket+0x3a>
    goto Send;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <_SendPacket+0x3c>
Send:
 8004446:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b1f      	cmp	r3, #31
 800444c:	d809      	bhi.n	8004462 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800444e:	4b8b      	ldr	r3, [pc, #556]	@ (800467c <_SendPacket+0x270>)
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 8115 	bne.w	800468c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b17      	cmp	r3, #23
 8004466:	d807      	bhi.n	8004478 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3b01      	subs	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e0c4      	b.n	8004602 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b7f      	cmp	r3, #127	@ 0x7f
 8004484:	d912      	bls.n	80044ac <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	09da      	lsrs	r2, r3, #7
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3b01      	subs	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	3a01      	subs	r2, #1
 800449e:	60fa      	str	r2, [r7, #12]
 80044a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e006      	b.n	80044ba <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80044be:	d807      	bhi.n	80044d0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e098      	b.n	8004602 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044d6:	d212      	bcs.n	80044fe <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	09da      	lsrs	r2, r3, #7
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3b01      	subs	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	3a01      	subs	r2, #1
 80044f0:	60fa      	str	r2, [r7, #12]
 80044f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e081      	b.n	8004602 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004504:	d21d      	bcs.n	8004542 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0b9a      	lsrs	r2, r3, #14
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3b01      	subs	r3, #1
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	09db      	lsrs	r3, r3, #7
 800451a:	b2db      	uxtb	r3, r3
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	3a01      	subs	r2, #1
 8004520:	60fa      	str	r2, [r7, #12]
 8004522:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	3a01      	subs	r2, #1
 8004534:	60fa      	str	r2, [r7, #12]
 8004536:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e05f      	b.n	8004602 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004548:	d228      	bcs.n	800459c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0d5a      	lsrs	r2, r3, #21
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b01      	subs	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0b9b      	lsrs	r3, r3, #14
 800455e:	b2db      	uxtb	r3, r3
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	3a01      	subs	r2, #1
 8004564:	60fa      	str	r2, [r7, #12]
 8004566:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	09db      	lsrs	r3, r3, #7
 8004574:	b2db      	uxtb	r3, r3
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	3a01      	subs	r2, #1
 800457a:	60fa      	str	r2, [r7, #12]
 800457c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	3a01      	subs	r2, #1
 800458e:	60fa      	str	r2, [r7, #12]
 8004590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e032      	b.n	8004602 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0f1a      	lsrs	r2, r3, #28
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0d5b      	lsrs	r3, r3, #21
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	3a01      	subs	r2, #1
 80045b6:	60fa      	str	r2, [r7, #12]
 80045b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0b9b      	lsrs	r3, r3, #14
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	3a01      	subs	r2, #1
 80045cc:	60fa      	str	r2, [r7, #12]
 80045ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	09db      	lsrs	r3, r3, #7
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	3a01      	subs	r2, #1
 80045e2:	60fa      	str	r2, [r7, #12]
 80045e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	3a01      	subs	r2, #1
 80045f6:	60fa      	str	r2, [r7, #12]
 80045f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004602:	4b1f      	ldr	r3, [pc, #124]	@ (8004680 <_SendPacket+0x274>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004608:	4b1c      	ldr	r3, [pc, #112]	@ (800467c <_SendPacket+0x270>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	623b      	str	r3, [r7, #32]
 800461a:	e00b      	b.n	8004634 <_SendPacket+0x228>
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	1c59      	adds	r1, r3, #1
 8004624:	6279      	str	r1, [r7, #36]	@ 0x24
 8004626:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	09db      	lsrs	r3, r3, #7
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b7f      	cmp	r3, #127	@ 0x7f
 8004638:	d8f0      	bhi.n	800461c <_SendPacket+0x210>
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800464a:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <_SendPacket+0x270>)
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	4618      	mov	r0, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	461a      	mov	r2, r3
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	f7fb fdb9 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800465e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004666:	4a05      	ldr	r2, [pc, #20]	@ (800467c <_SendPacket+0x270>)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	60d3      	str	r3, [r2, #12]
 800466c:	e00f      	b.n	800468e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800466e:	4b03      	ldr	r3, [pc, #12]	@ (800467c <_SendPacket+0x270>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4b01      	ldr	r3, [pc, #4]	@ (800467c <_SendPacket+0x270>)
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e008      	b.n	800468e <_SendPacket+0x282>
 800467c:	2001370c 	.word	0x2001370c
 8004680:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004684:	bf00      	nop
 8004686:	e002      	b.n	800468e <_SendPacket+0x282>
      goto SendDone;
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <_SendPacket+0x282>
      goto SendDone;
 800468c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <_SendPacket+0x2d4>)
 8004690:	7e1b      	ldrb	r3, [r3, #24]
 8004692:	4619      	mov	r1, r3
 8004694:	4a13      	ldr	r2, [pc, #76]	@ (80046e4 <_SendPacket+0x2d8>)
 8004696:	460b      	mov	r3, r1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	440b      	add	r3, r1
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	336c      	adds	r3, #108	@ 0x6c
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <_SendPacket+0x2d4>)
 80046a6:	7e1b      	ldrb	r3, [r3, #24]
 80046a8:	4618      	mov	r0, r3
 80046aa:	490e      	ldr	r1, [pc, #56]	@ (80046e4 <_SendPacket+0x2d8>)
 80046ac:	4603      	mov	r3, r0
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4403      	add	r3, r0
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	440b      	add	r3, r1
 80046b6:	3370      	adds	r3, #112	@ 0x70
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d00b      	beq.n	80046d6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80046be:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <_SendPacket+0x2d4>)
 80046c0:	789b      	ldrb	r3, [r3, #2]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <_SendPacket+0x2d4>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80046cc:	f7ff fdbe 	bl	800424c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80046d0:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <_SendPacket+0x2d4>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80046d6:	bf00      	nop
 80046d8:	3728      	adds	r7, #40	@ 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2001370c 	.word	0x2001370c
 80046e4:	20012e4c 	.word	0x20012e4c

080046e8 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0a2      	sub	sp, #136	@ 0x88
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 80046fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 800470a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01d      	beq.n	800474e <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8004712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004716:	2b25      	cmp	r3, #37	@ 0x25
 8004718:	d1f1      	bne.n	80046fe <_VPrintHost+0x16>
      c = *p;
 800471a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	1d19      	adds	r1, r3, #4
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6011      	str	r1, [r2, #0]
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004738:	460a      	mov	r2, r1
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	3388      	adds	r3, #136	@ 0x88
 800473e:	443b      	add	r3, r7
 8004740:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8004744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004748:	2b10      	cmp	r3, #16
 800474a:	d002      	beq.n	8004752 <_VPrintHost+0x6a>
    c = *p++;
 800474c:	e7d7      	b.n	80046fe <_VPrintHost+0x16>
      break;
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <_VPrintHost+0x6c>
        break;
 8004752:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8004754:	f3ef 8311 	mrs	r3, BASEPRI
 8004758:	f04f 0120 	mov.w	r1, #32
 800475c:	f381 8811 	msr	BASEPRI, r1
 8004760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004762:	483f      	ldr	r0, [pc, #252]	@ (8004860 <_VPrintHost+0x178>)
 8004764:	f7ff fd66 	bl	8004234 <_PreparePacket>
 8004768:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800476a:	2280      	movs	r2, #128	@ 0x80
 800476c:	68f9      	ldr	r1, [r7, #12]
 800476e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004770:	f7ff fd30 	bl	80041d4 <_EncodeStr>
 8004774:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 8004776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004778:	677b      	str	r3, [r7, #116]	@ 0x74
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	673b      	str	r3, [r7, #112]	@ 0x70
 800477e:	e00b      	b.n	8004798 <_VPrintHost+0xb0>
 8004780:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004782:	b2da      	uxtb	r2, r3
 8004784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004786:	1c59      	adds	r1, r3, #1
 8004788:	6779      	str	r1, [r7, #116]	@ 0x74
 800478a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004794:	09db      	lsrs	r3, r3, #7
 8004796:	673b      	str	r3, [r7, #112]	@ 0x70
 8004798:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800479a:	2b7f      	cmp	r3, #127	@ 0x7f
 800479c:	d8f0      	bhi.n	8004780 <_VPrintHost+0x98>
 800479e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047a4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 80047ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047b8:	e00b      	b.n	80047d2 <_VPrintHost+0xea>
 80047ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047c0:	1c59      	adds	r1, r3, #1
 80047c2:	66f9      	str	r1, [r7, #108]	@ 0x6c
 80047c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ce:	09db      	lsrs	r3, r3, #7
 80047d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80047d6:	d8f0      	bhi.n	80047ba <_VPrintHost+0xd2>
 80047d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 80047e8:	f107 0314 	add.w	r3, r7, #20
 80047ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 80047f0:	e022      	b.n	8004838 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 80047f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80047f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80047fe:	e00b      	b.n	8004818 <_VPrintHost+0x130>
 8004800:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004802:	b2da      	uxtb	r2, r3
 8004804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004806:	1c59      	adds	r1, r3, #1
 8004808:	6679      	str	r1, [r7, #100]	@ 0x64
 800480a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004814:	09db      	lsrs	r3, r3, #7
 8004816:	663b      	str	r3, [r7, #96]	@ 0x60
 8004818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800481a:	2b7f      	cmp	r3, #127	@ 0x7f
 800481c:	d8f0      	bhi.n	8004800 <_VPrintHost+0x118>
 800481e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	667a      	str	r2, [r7, #100]	@ 0x64
 8004824:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800482c:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 800482e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004832:	3304      	adds	r3, #4
 8004834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8004838:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800483c:	1e5a      	subs	r2, r3, #1
 800483e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1d5      	bne.n	80047f2 <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004846:	221a      	movs	r2, #26
 8004848:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800484a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800484c:	f7ff fdde 	bl	800440c <_SendPacket>
    RECORD_END();
 8004850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004852:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3788      	adds	r7, #136	@ 0x88
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	2001373c 	.word	0x2001373c

08004864 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004872:	2300      	movs	r3, #0
 8004874:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004878:	4917      	ldr	r1, [pc, #92]	@ (80048d8 <SEGGER_SYSVIEW_Init+0x74>)
 800487a:	4818      	ldr	r0, [pc, #96]	@ (80048dc <SEGGER_SYSVIEW_Init+0x78>)
 800487c:	f7ff fbda 	bl	8004034 <SEGGER_RTT_AllocUpBuffer>
 8004880:	4603      	mov	r3, r0
 8004882:	b2da      	uxtb	r2, r3
 8004884:	4b16      	ldr	r3, [pc, #88]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004886:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 800488a:	785a      	ldrb	r2, [r3, #1]
 800488c:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 800488e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004890:	4b13      	ldr	r3, [pc, #76]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004892:	7e1b      	ldrb	r3, [r3, #24]
 8004894:	4618      	mov	r0, r3
 8004896:	2300      	movs	r3, #0
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	2308      	movs	r3, #8
 800489c:	4a11      	ldr	r2, [pc, #68]	@ (80048e4 <SEGGER_SYSVIEW_Init+0x80>)
 800489e:	490f      	ldr	r1, [pc, #60]	@ (80048dc <SEGGER_SYSVIEW_Init+0x78>)
 80048a0:	f7ff fc4c 	bl	800413c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80048a4:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048aa:	4b0f      	ldr	r3, [pc, #60]	@ (80048e8 <SEGGER_SYSVIEW_Init+0x84>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a0c      	ldr	r2, [pc, #48]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80048b0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80048b2:	4a0b      	ldr	r2, [pc, #44]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80048b8:	4a09      	ldr	r2, [pc, #36]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80048be:	4a08      	ldr	r2, [pc, #32]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80048c4:	4a06      	ldr	r2, [pc, #24]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80048ca:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <SEGGER_SYSVIEW_Init+0x7c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20013304 	.word	0x20013304
 80048dc:	08005748 	.word	0x08005748
 80048e0:	2001370c 	.word	0x2001370c
 80048e4:	20013704 	.word	0x20013704
 80048e8:	e0001004 	.word	0xe0001004

080048ec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80048f4:	4a04      	ldr	r2, [pc, #16]	@ (8004908 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6113      	str	r3, [r2, #16]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	2001370c 	.word	0x2001370c

0800490c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004914:	f3ef 8311 	mrs	r3, BASEPRI
 8004918:	f04f 0120 	mov.w	r1, #32
 800491c:	f381 8811 	msr	BASEPRI, r1
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4808      	ldr	r0, [pc, #32]	@ (8004944 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004924:	f7ff fc86 	bl	8004234 <_PreparePacket>
 8004928:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68b8      	ldr	r0, [r7, #8]
 8004930:	f7ff fd6c 	bl	800440c <_SendPacket>
  RECORD_END();
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f383 8811 	msr	BASEPRI, r3
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	2001373c 	.word	0x2001373c

08004948 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004952:	f3ef 8311 	mrs	r3, BASEPRI
 8004956:	f04f 0120 	mov.w	r1, #32
 800495a:	f381 8811 	msr	BASEPRI, r1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	4816      	ldr	r0, [pc, #88]	@ (80049bc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004962:	f7ff fc67 	bl	8004234 <_PreparePacket>
 8004966:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e00b      	b.n	800498e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	1c59      	adds	r1, r3, #1
 800497e:	61f9      	str	r1, [r7, #28]
 8004980:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	09db      	lsrs	r3, r3, #7
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b7f      	cmp	r3, #127	@ 0x7f
 8004992:	d8f0      	bhi.n	8004976 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	61fa      	str	r2, [r7, #28]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	6938      	ldr	r0, [r7, #16]
 80049aa:	f7ff fd2f 	bl	800440c <_SendPacket>
  RECORD_END();
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f383 8811 	msr	BASEPRI, r3
}
 80049b4:	bf00      	nop
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	2001373c 	.word	0x2001373c

080049c0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08c      	sub	sp, #48	@ 0x30
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80049cc:	f3ef 8311 	mrs	r3, BASEPRI
 80049d0:	f04f 0120 	mov.w	r1, #32
 80049d4:	f381 8811 	msr	BASEPRI, r1
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	4825      	ldr	r0, [pc, #148]	@ (8004a70 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80049dc:	f7ff fc2a 	bl	8004234 <_PreparePacket>
 80049e0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ee:	e00b      	b.n	8004a08 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f6:	1c59      	adds	r1, r3, #1
 80049f8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80049fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	09db      	lsrs	r3, r3, #7
 8004a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a0c:	d8f0      	bhi.n	80049f0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	623b      	str	r3, [r7, #32]
 8004a26:	e00b      	b.n	8004a40 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	09db      	lsrs	r3, r3, #7
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a44:	d8f0      	bhi.n	8004a28 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	6979      	ldr	r1, [r7, #20]
 8004a5a:	69b8      	ldr	r0, [r7, #24]
 8004a5c:	f7ff fcd6 	bl	800440c <_SendPacket>
  RECORD_END();
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f383 8811 	msr	BASEPRI, r3
}
 8004a66:	bf00      	nop
 8004a68:	3730      	adds	r7, #48	@ 0x30
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2001373c 	.word	0x2001373c

08004a74 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08c      	sub	sp, #48	@ 0x30
 8004a78:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004a7a:	4b58      	ldr	r3, [pc, #352]	@ (8004bdc <SEGGER_SYSVIEW_Start+0x168>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004a80:	f3ef 8311 	mrs	r3, BASEPRI
 8004a84:	f04f 0120 	mov.w	r1, #32
 8004a88:	f381 8811 	msr	BASEPRI, r1
 8004a8c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004a8e:	4b53      	ldr	r3, [pc, #332]	@ (8004bdc <SEGGER_SYSVIEW_Start+0x168>)
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	220a      	movs	r2, #10
 8004a94:	4952      	ldr	r1, [pc, #328]	@ (8004be0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fb fb9a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004aa2:	200a      	movs	r0, #10
 8004aa4:	f7ff ff32 	bl	800490c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aac:	f04f 0120 	mov.w	r1, #32
 8004ab0:	f381 8811 	msr	BASEPRI, r1
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	484b      	ldr	r0, [pc, #300]	@ (8004be4 <SEGGER_SYSVIEW_Start+0x170>)
 8004ab8:	f7ff fbbc 	bl	8004234 <_PreparePacket>
 8004abc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac6:	4b45      	ldr	r3, [pc, #276]	@ (8004bdc <SEGGER_SYSVIEW_Start+0x168>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004acc:	e00b      	b.n	8004ae6 <SEGGER_SYSVIEW_Start+0x72>
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	1c59      	adds	r1, r3, #1
 8004ad6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ad8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	09db      	lsrs	r3, r3, #7
 8004ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aea:	d8f0      	bhi.n	8004ace <SEGGER_SYSVIEW_Start+0x5a>
 8004aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b00:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <SEGGER_SYSVIEW_Start+0x168>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	e00b      	b.n	8004b20 <SEGGER_SYSVIEW_Start+0xac>
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b24:	d8f0      	bhi.n	8004b08 <SEGGER_SYSVIEW_Start+0x94>
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	4b28      	ldr	r3, [pc, #160]	@ (8004bdc <SEGGER_SYSVIEW_Start+0x168>)
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	e00b      	b.n	8004b5a <SEGGER_SYSVIEW_Start+0xe6>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	1c59      	adds	r1, r3, #1
 8004b4a:	61f9      	str	r1, [r7, #28]
 8004b4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b5e:	d8f0      	bhi.n	8004b42 <SEGGER_SYSVIEW_Start+0xce>
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	61fa      	str	r2, [r7, #28]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	e00b      	b.n	8004b92 <SEGGER_SYSVIEW_Start+0x11e>
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	1c59      	adds	r1, r3, #1
 8004b82:	6179      	str	r1, [r7, #20]
 8004b84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	09db      	lsrs	r3, r3, #7
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b96:	d8f0      	bhi.n	8004b7a <SEGGER_SYSVIEW_Start+0x106>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	617a      	str	r2, [r7, #20]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ba8:	2218      	movs	r2, #24
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fc2d 	bl	800440c <_SendPacket>
      RECORD_END();
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bb8:	4b08      	ldr	r3, [pc, #32]	@ (8004bdc <SEGGER_SYSVIEW_Start+0x168>)
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <SEGGER_SYSVIEW_Start+0x168>)
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004bc6:	f000 f9eb 	bl	8004fa0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004bca:	f000 f9b1 	bl	8004f30 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004bce:	f000 fba3 	bl	8005318 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004bd2:	bf00      	nop
 8004bd4:	3730      	adds	r7, #48	@ 0x30
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	2001370c 	.word	0x2001370c
 8004be0:	08005784 	.word	0x08005784
 8004be4:	2001373c 	.word	0x2001373c

08004be8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bee:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf2:	f04f 0120 	mov.w	r1, #32
 8004bf6:	f381 8811 	msr	BASEPRI, r1
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	480b      	ldr	r0, [pc, #44]	@ (8004c2c <SEGGER_SYSVIEW_Stop+0x44>)
 8004bfe:	f7ff fb19 	bl	8004234 <_PreparePacket>
 8004c02:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004c04:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <SEGGER_SYSVIEW_Stop+0x48>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004c0c:	220b      	movs	r2, #11
 8004c0e:	6839      	ldr	r1, [r7, #0]
 8004c10:	6838      	ldr	r0, [r7, #0]
 8004c12:	f7ff fbfb 	bl	800440c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004c16:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <SEGGER_SYSVIEW_Stop+0x48>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f383 8811 	msr	BASEPRI, r3
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	2001373c 	.word	0x2001373c
 8004c30:	2001370c 	.word	0x2001370c

08004c34 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	@ 0x30
 8004c38:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3e:	f04f 0120 	mov.w	r1, #32
 8004c42:	f381 8811 	msr	BASEPRI, r1
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	4845      	ldr	r0, [pc, #276]	@ (8004d60 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c4a:	f7ff faf3 	bl	8004234 <_PreparePacket>
 8004c4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c58:	4b42      	ldr	r3, [pc, #264]	@ (8004d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c5e:	e00b      	b.n	8004c78 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	09db      	lsrs	r3, r3, #7
 8004c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c7c:	d8f0      	bhi.n	8004c60 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c92:	4b34      	ldr	r3, [pc, #208]	@ (8004d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	e00b      	b.n	8004cb2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	1c59      	adds	r1, r3, #1
 8004ca2:	6279      	str	r1, [r7, #36]	@ 0x24
 8004ca4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	09db      	lsrs	r3, r3, #7
 8004cb0:	623b      	str	r3, [r7, #32]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cb6:	d8f0      	bhi.n	8004c9a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cbe:	6a3a      	ldr	r2, [r7, #32]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	4b25      	ldr	r3, [pc, #148]	@ (8004d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e00b      	b.n	8004cec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	61f9      	str	r1, [r7, #28]
 8004cde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	09db      	lsrs	r3, r3, #7
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cf0:	d8f0      	bhi.n	8004cd4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	61fa      	str	r2, [r7, #28]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	e00b      	b.n	8004d24 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1c59      	adds	r1, r3, #1
 8004d14:	6179      	str	r1, [r7, #20]
 8004d16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	09db      	lsrs	r3, r3, #7
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d28:	d8f0      	bhi.n	8004d0c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	617a      	str	r2, [r7, #20]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d3a:	2218      	movs	r2, #24
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	68b8      	ldr	r0, [r7, #8]
 8004d40:	f7ff fb64 	bl	800440c <_SendPacket>
  RECORD_END();
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d4a:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d52:	4b04      	ldr	r3, [pc, #16]	@ (8004d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	4798      	blx	r3
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3730      	adds	r7, #48	@ 0x30
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	2001373c 	.word	0x2001373c
 8004d64:	2001370c 	.word	0x2001370c

08004d68 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b092      	sub	sp, #72	@ 0x48
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004d70:	f3ef 8311 	mrs	r3, BASEPRI
 8004d74:	f04f 0120 	mov.w	r1, #32
 8004d78:	f381 8811 	msr	BASEPRI, r1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	486a      	ldr	r0, [pc, #424]	@ (8004f28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004d80:	f7ff fa58 	bl	8004234 <_PreparePacket>
 8004d84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b66      	ldr	r3, [pc, #408]	@ (8004f2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d9a:	e00b      	b.n	8004db4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	6479      	str	r1, [r7, #68]	@ 0x44
 8004da6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db0:	09db      	lsrs	r3, r3, #7
 8004db2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db8:	d8f0      	bhi.n	8004d9c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dd4:	e00b      	b.n	8004dee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004de0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dea:	09db      	lsrs	r3, r3, #7
 8004dec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df2:	d8f0      	bhi.n	8004dd6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e02:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f7ff f9e1 	bl	80041d4 <_EncodeStr>
 8004e12:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004e14:	2209      	movs	r2, #9
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	6938      	ldr	r0, [r7, #16]
 8004e1a:	f7ff faf7 	bl	800440c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b40      	ldr	r3, [pc, #256]	@ (8004f2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e32:	e00b      	b.n	8004e4c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	6379      	str	r1, [r7, #52]	@ 0x34
 8004e3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	09db      	lsrs	r3, r3, #7
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e50:	d8f0      	bhi.n	8004e34 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e6c:	e00b      	b.n	8004e86 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	09db      	lsrs	r3, r3, #7
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e8a:	d8f0      	bhi.n	8004e6e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	e00b      	b.n	8004ec0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	1c59      	adds	r1, r3, #1
 8004eb0:	6279      	str	r1, [r7, #36]	@ 0x24
 8004eb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	09db      	lsrs	r3, r3, #7
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ec4:	d8f0      	bhi.n	8004ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e00b      	b.n	8004ef8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	61f9      	str	r1, [r7, #28]
 8004eea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	09db      	lsrs	r3, r3, #7
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004efc:	d8f0      	bhi.n	8004ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	61fa      	str	r2, [r7, #28]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004f0e:	2215      	movs	r2, #21
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	6938      	ldr	r0, [r7, #16]
 8004f14:	f7ff fa7a 	bl	800440c <_SendPacket>
  RECORD_END();
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
}
 8004f1e:	bf00      	nop
 8004f20:	3748      	adds	r7, #72	@ 0x48
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	2001373c 	.word	0x2001373c
 8004f2c:	2001370c 	.word	0x2001370c

08004f30 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004f34:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004f3c:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f46:	4b03      	ldr	r3, [pc, #12]	@ (8004f54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4798      	blx	r3
  }
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2001370c 	.word	0x2001370c

08004f58 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f60:	f3ef 8311 	mrs	r3, BASEPRI
 8004f64:	f04f 0120 	mov.w	r1, #32
 8004f68:	f381 8811 	msr	BASEPRI, r1
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	480b      	ldr	r0, [pc, #44]	@ (8004f9c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004f70:	f7ff f960 	bl	8004234 <_PreparePacket>
 8004f74:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f76:	2280      	movs	r2, #128	@ 0x80
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	6938      	ldr	r0, [r7, #16]
 8004f7c:	f7ff f92a 	bl	80041d4 <_EncodeStr>
 8004f80:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004f82:	220e      	movs	r2, #14
 8004f84:	68f9      	ldr	r1, [r7, #12]
 8004f86:	6938      	ldr	r0, [r7, #16]
 8004f88:	f7ff fa40 	bl	800440c <_SendPacket>
  RECORD_END();
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f383 8811 	msr	BASEPRI, r3
}
 8004f92:	bf00      	nop
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	2001373c 	.word	0x2001373c

08004fa0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004fa0:	b590      	push	{r4, r7, lr}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004fa6:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01a      	beq.n	8004fe4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004fae:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004fb8:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4798      	blx	r3
 8004fc0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fc4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	000a      	movs	r2, r1
 8004fd4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4621      	mov	r1, r4
 8004fdc:	200d      	movs	r0, #13
 8004fde:	f7ff fcef 	bl	80049c0 <SEGGER_SYSVIEW_RecordU32x2>
 8004fe2:	e006      	b.n	8004ff2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	200c      	movs	r0, #12
 8004fec:	f7ff fcac 	bl	8004948 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	2001370c 	.word	0x2001370c
 8005000:	e0001004 	.word	0xe0001004

08005004 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800500a:	f3ef 8311 	mrs	r3, BASEPRI
 800500e:	f04f 0120 	mov.w	r1, #32
 8005012:	f381 8811 	msr	BASEPRI, r1
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	4807      	ldr	r0, [pc, #28]	@ (8005038 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800501a:	f7ff f90b 	bl	8004234 <_PreparePacket>
 800501e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005020:	2211      	movs	r2, #17
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	6838      	ldr	r0, [r7, #0]
 8005026:	f7ff f9f1 	bl	800440c <_SendPacket>
  RECORD_END();
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f383 8811 	msr	BASEPRI, r3
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	2001373c 	.word	0x2001373c

0800503c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005044:	f3ef 8311 	mrs	r3, BASEPRI
 8005048:	f04f 0120 	mov.w	r1, #32
 800504c:	f381 8811 	msr	BASEPRI, r1
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	4819      	ldr	r0, [pc, #100]	@ (80050b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005054:	f7ff f8ee 	bl	8004234 <_PreparePacket>
 8005058:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800505e:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	e00b      	b.n	800508a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	1c59      	adds	r1, r3, #1
 800507a:	61f9      	str	r1, [r7, #28]
 800507c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b7f      	cmp	r3, #127	@ 0x7f
 800508e:	d8f0      	bhi.n	8005072 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	61fa      	str	r2, [r7, #28]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80050a0:	2208      	movs	r2, #8
 80050a2:	68f9      	ldr	r1, [r7, #12]
 80050a4:	6938      	ldr	r0, [r7, #16]
 80050a6:	f7ff f9b1 	bl	800440c <_SendPacket>
  RECORD_END();
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f383 8811 	msr	BASEPRI, r3
}
 80050b0:	bf00      	nop
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	2001373c 	.word	0x2001373c
 80050bc:	2001370c 	.word	0x2001370c

080050c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050c8:	f3ef 8311 	mrs	r3, BASEPRI
 80050cc:	f04f 0120 	mov.w	r1, #32
 80050d0:	f381 8811 	msr	BASEPRI, r1
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	4819      	ldr	r0, [pc, #100]	@ (800513c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80050d8:	f7ff f8ac 	bl	8004234 <_PreparePacket>
 80050dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050e2:	4b17      	ldr	r3, [pc, #92]	@ (8005140 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	e00b      	b.n	800510e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	61f9      	str	r1, [r7, #28]
 8005100:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	09db      	lsrs	r3, r3, #7
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b7f      	cmp	r3, #127	@ 0x7f
 8005112:	d8f0      	bhi.n	80050f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	61fa      	str	r2, [r7, #28]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005124:	2204      	movs	r2, #4
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	6938      	ldr	r0, [r7, #16]
 800512a:	f7ff f96f 	bl	800440c <_SendPacket>
  RECORD_END();
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f383 8811 	msr	BASEPRI, r3
}
 8005134:	bf00      	nop
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2001373c 	.word	0x2001373c
 8005140:	2001370c 	.word	0x2001370c

08005144 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800514c:	f3ef 8311 	mrs	r3, BASEPRI
 8005150:	f04f 0120 	mov.w	r1, #32
 8005154:	f381 8811 	msr	BASEPRI, r1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	4819      	ldr	r0, [pc, #100]	@ (80051c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800515c:	f7ff f86a 	bl	8004234 <_PreparePacket>
 8005160:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005166:	4b17      	ldr	r3, [pc, #92]	@ (80051c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e00b      	b.n	8005192 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	1c59      	adds	r1, r3, #1
 8005182:	61f9      	str	r1, [r7, #28]
 8005184:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	09db      	lsrs	r3, r3, #7
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b7f      	cmp	r3, #127	@ 0x7f
 8005196:	d8f0      	bhi.n	800517a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	61fa      	str	r2, [r7, #28]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80051a8:	2206      	movs	r2, #6
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	6938      	ldr	r0, [r7, #16]
 80051ae:	f7ff f92d 	bl	800440c <_SendPacket>
  RECORD_END();
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f383 8811 	msr	BASEPRI, r3
}
 80051b8:	bf00      	nop
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	2001373c 	.word	0x2001373c
 80051c4:	2001370c 	.word	0x2001370c

080051c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08c      	sub	sp, #48	@ 0x30
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80051d2:	4b40      	ldr	r3, [pc, #256]	@ (80052d4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d077      	beq.n	80052ca <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80051da:	4b3e      	ldr	r3, [pc, #248]	@ (80052d4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80051e0:	2300      	movs	r3, #0
 80051e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e4:	e008      	b.n	80051f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d007      	beq.n	8005202 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	3301      	adds	r3, #1
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d3f2      	bcc.n	80051e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005200:	e000      	b.n	8005204 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005202:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d055      	beq.n	80052b6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800520a:	f3ef 8311 	mrs	r3, BASEPRI
 800520e:	f04f 0120 	mov.w	r1, #32
 8005212:	f381 8811 	msr	BASEPRI, r1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	482f      	ldr	r0, [pc, #188]	@ (80052d8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800521a:	f7ff f80b 	bl	8004234 <_PreparePacket>
 800521e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	e00b      	b.n	8005246 <SEGGER_SYSVIEW_SendModule+0x7e>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	6279      	str	r1, [r7, #36]	@ 0x24
 8005238:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	09db      	lsrs	r3, r3, #7
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2b7f      	cmp	r3, #127	@ 0x7f
 800524a:	d8f0      	bhi.n	800522e <SEGGER_SYSVIEW_SendModule+0x66>
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	627a      	str	r2, [r7, #36]	@ 0x24
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e00b      	b.n	8005280 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	61f9      	str	r1, [r7, #28]
 8005272:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	09db      	lsrs	r3, r3, #7
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b7f      	cmp	r3, #127	@ 0x7f
 8005284:	d8f0      	bhi.n	8005268 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	61fa      	str	r2, [r7, #28]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2280      	movs	r2, #128	@ 0x80
 800529c:	4619      	mov	r1, r3
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7fe ff98 	bl	80041d4 <_EncodeStr>
 80052a4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052a6:	2216      	movs	r2, #22
 80052a8:	68f9      	ldr	r1, [r7, #12]
 80052aa:	6938      	ldr	r0, [r7, #16]
 80052ac:	f7ff f8ae 	bl	800440c <_SendPacket>
      RECORD_END();
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <SEGGER_SYSVIEW_SendModule+0x102>
 80052bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80052c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4798      	blx	r3
    }
  }
}
 80052ca:	bf00      	nop
 80052cc:	3730      	adds	r7, #48	@ 0x30
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20013734 	.word	0x20013734
 80052d8:	2001373c 	.word	0x2001373c

080052dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00f      	beq.n	800530a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80052ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005314 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f2      	bne.n	80052f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20013734 	.word	0x20013734

08005318 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800531e:	f3ef 8311 	mrs	r3, BASEPRI
 8005322:	f04f 0120 	mov.w	r1, #32
 8005326:	f381 8811 	msr	BASEPRI, r1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	4817      	ldr	r0, [pc, #92]	@ (800538c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800532e:	f7fe ff81 	bl	8004234 <_PreparePacket>
 8005332:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e00b      	b.n	800535c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	6179      	str	r1, [r7, #20]
 800534e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	09db      	lsrs	r3, r3, #7
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005360:	d8f0      	bhi.n	8005344 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	617a      	str	r2, [r7, #20]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005372:	221b      	movs	r2, #27
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	68b8      	ldr	r0, [r7, #8]
 8005378:	f7ff f848 	bl	800440c <_SendPacket>
  RECORD_END();
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f383 8811 	msr	BASEPRI, r3
}
 8005382:	bf00      	nop
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	2001373c 	.word	0x2001373c
 8005390:	20013738 	.word	0x20013738

08005394 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8005394:	b40f      	push	{r0, r1, r2, r3}
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800539c:	f107 0314 	add.w	r3, r7, #20
 80053a0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	461a      	mov	r2, r3
 80053a6:	2100      	movs	r1, #0
 80053a8:	6938      	ldr	r0, [r7, #16]
 80053aa:	f7ff f99d 	bl	80046e8 <_VPrintHost>
  va_end(ParamList);
#endif
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053b8:	b004      	add	sp, #16
 80053ba:	4770      	bx	lr

080053bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08a      	sub	sp, #40	@ 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053c4:	f3ef 8311 	mrs	r3, BASEPRI
 80053c8:	f04f 0120 	mov.w	r1, #32
 80053cc:	f381 8811 	msr	BASEPRI, r1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	4827      	ldr	r0, [pc, #156]	@ (8005470 <SEGGER_SYSVIEW_Warn+0xb4>)
 80053d4:	f7fe ff2e 	bl	8004234 <_PreparePacket>
 80053d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053da:	2280      	movs	r2, #128	@ 0x80
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f7fe fef8 	bl	80041d4 <_EncodeStr>
 80053e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ea:	2301      	movs	r3, #1
 80053ec:	623b      	str	r3, [r7, #32]
 80053ee:	e00b      	b.n	8005408 <SEGGER_SYSVIEW_Warn+0x4c>
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80053fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	09db      	lsrs	r3, r3, #7
 8005406:	623b      	str	r3, [r7, #32]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b7f      	cmp	r3, #127	@ 0x7f
 800540c:	d8f0      	bhi.n	80053f0 <SEGGER_SYSVIEW_Warn+0x34>
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	627a      	str	r2, [r7, #36]	@ 0x24
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e00b      	b.n	8005440 <SEGGER_SYSVIEW_Warn+0x84>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	1c59      	adds	r1, r3, #1
 8005430:	61f9      	str	r1, [r7, #28]
 8005432:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	09db      	lsrs	r3, r3, #7
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b7f      	cmp	r3, #127	@ 0x7f
 8005444:	d8f0      	bhi.n	8005428 <SEGGER_SYSVIEW_Warn+0x6c>
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	61fa      	str	r2, [r7, #28]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005456:	221a      	movs	r2, #26
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	6938      	ldr	r0, [r7, #16]
 800545c:	f7fe ffd6 	bl	800440c <_SendPacket>
  RECORD_END();
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f383 8811 	msr	BASEPRI, r3
}
 8005466:	bf00      	nop
 8005468:	3728      	adds	r7, #40	@ 0x28
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2001373c 	.word	0x2001373c

08005474 <memcmp>:
 8005474:	b510      	push	{r4, lr}
 8005476:	3901      	subs	r1, #1
 8005478:	4402      	add	r2, r0
 800547a:	4290      	cmp	r0, r2
 800547c:	d101      	bne.n	8005482 <memcmp+0xe>
 800547e:	2000      	movs	r0, #0
 8005480:	e005      	b.n	800548e <memcmp+0x1a>
 8005482:	7803      	ldrb	r3, [r0, #0]
 8005484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005488:	42a3      	cmp	r3, r4
 800548a:	d001      	beq.n	8005490 <memcmp+0x1c>
 800548c:	1b18      	subs	r0, r3, r4
 800548e:	bd10      	pop	{r4, pc}
 8005490:	3001      	adds	r0, #1
 8005492:	e7f2      	b.n	800547a <memcmp+0x6>

08005494 <memset>:
 8005494:	4402      	add	r2, r0
 8005496:	4603      	mov	r3, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	f803 1b01 	strb.w	r1, [r3], #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	@ (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	@ (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	@ (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	@ (80054e8 <__libc_init_array+0x44>)
 80054b8:	f000 f826 	bl	8005508 <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08005798 	.word	0x08005798
 80054e0:	08005798 	.word	0x08005798
 80054e4:	08005798 	.word	0x08005798
 80054e8:	0800579c 	.word	0x0800579c

080054ec <memcpy>:
 80054ec:	440a      	add	r2, r1
 80054ee:	4291      	cmp	r1, r2
 80054f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f4:	d100      	bne.n	80054f8 <memcpy+0xc>
 80054f6:	4770      	bx	lr
 80054f8:	b510      	push	{r4, lr}
 80054fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005502:	4291      	cmp	r1, r2
 8005504:	d1f9      	bne.n	80054fa <memcpy+0xe>
 8005506:	bd10      	pop	{r4, pc}

08005508 <_init>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr

08005514 <_fini>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr
