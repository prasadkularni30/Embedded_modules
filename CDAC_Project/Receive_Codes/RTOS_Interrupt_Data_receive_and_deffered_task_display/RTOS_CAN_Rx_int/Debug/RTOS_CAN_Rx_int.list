
RTOS_CAN_Rx_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008080  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08008210  08008210  00009210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800856c  0800856c  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  0800856c  0800856c  0000956c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008574  08008574  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008574  08008574  00009574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008578  08008578  00009578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800857c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a064  2**0
                  CONTENTS
 10 .bss          000139ec  20000064  20000064  0000a064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013a50  20013a50  0000a064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ca4  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000315a  00000000  00000000  00020d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00023e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010db  00000000  00000000  00025438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005e24  00000000  00000000  00026513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c16d  00000000  00000000  0002c337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e97e7  00000000  00000000  000484a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131c8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062b4  00000000  00000000  00131cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  00137f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081f8 	.word	0x080081f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080081f8 	.word	0x080081f8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f30 	.word	0x20012f30
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__gedf2>:
 8000688:	f04f 3cff 	mov.w	ip, #4294967295
 800068c:	e006      	b.n	800069c <__cmpdf2+0x4>
 800068e:	bf00      	nop

08000690 <__ledf2>:
 8000690:	f04f 0c01 	mov.w	ip, #1
 8000694:	e002      	b.n	800069c <__cmpdf2+0x4>
 8000696:	bf00      	nop

08000698 <__cmpdf2>:
 8000698:	f04f 0c01 	mov.w	ip, #1
 800069c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006b2:	d01b      	beq.n	80006ec <__cmpdf2+0x54>
 80006b4:	b001      	add	sp, #4
 80006b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006ba:	bf0c      	ite	eq
 80006bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006c0:	ea91 0f03 	teqne	r1, r3
 80006c4:	bf02      	ittt	eq
 80006c6:	ea90 0f02 	teqeq	r0, r2
 80006ca:	2000      	moveq	r0, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	f110 0f00 	cmn.w	r0, #0
 80006d2:	ea91 0f03 	teq	r1, r3
 80006d6:	bf58      	it	pl
 80006d8:	4299      	cmppl	r1, r3
 80006da:	bf08      	it	eq
 80006dc:	4290      	cmpeq	r0, r2
 80006de:	bf2c      	ite	cs
 80006e0:	17d8      	asrcs	r0, r3, #31
 80006e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006e6:	f040 0001 	orr.w	r0, r0, #1
 80006ea:	4770      	bx	lr
 80006ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d102      	bne.n	80006fc <__cmpdf2+0x64>
 80006f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006fa:	d107      	bne.n	800070c <__cmpdf2+0x74>
 80006fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000704:	d1d6      	bne.n	80006b4 <__cmpdf2+0x1c>
 8000706:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800070a:	d0d3      	beq.n	80006b4 <__cmpdf2+0x1c>
 800070c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop

08000714 <__aeabi_cdrcmple>:
 8000714:	4684      	mov	ip, r0
 8000716:	4610      	mov	r0, r2
 8000718:	4662      	mov	r2, ip
 800071a:	468c      	mov	ip, r1
 800071c:	4619      	mov	r1, r3
 800071e:	4663      	mov	r3, ip
 8000720:	e000      	b.n	8000724 <__aeabi_cdcmpeq>
 8000722:	bf00      	nop

08000724 <__aeabi_cdcmpeq>:
 8000724:	b501      	push	{r0, lr}
 8000726:	f7ff ffb7 	bl	8000698 <__cmpdf2>
 800072a:	2800      	cmp	r0, #0
 800072c:	bf48      	it	mi
 800072e:	f110 0f00 	cmnmi.w	r0, #0
 8000732:	bd01      	pop	{r0, pc}

08000734 <__aeabi_dcmpeq>:
 8000734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000738:	f7ff fff4 	bl	8000724 <__aeabi_cdcmpeq>
 800073c:	bf0c      	ite	eq
 800073e:	2001      	moveq	r0, #1
 8000740:	2000      	movne	r0, #0
 8000742:	f85d fb08 	ldr.w	pc, [sp], #8
 8000746:	bf00      	nop

08000748 <__aeabi_dcmplt>:
 8000748:	f84d ed08 	str.w	lr, [sp, #-8]!
 800074c:	f7ff ffea 	bl	8000724 <__aeabi_cdcmpeq>
 8000750:	bf34      	ite	cc
 8000752:	2001      	movcc	r0, #1
 8000754:	2000      	movcs	r0, #0
 8000756:	f85d fb08 	ldr.w	pc, [sp], #8
 800075a:	bf00      	nop

0800075c <__aeabi_dcmple>:
 800075c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000760:	f7ff ffe0 	bl	8000724 <__aeabi_cdcmpeq>
 8000764:	bf94      	ite	ls
 8000766:	2001      	movls	r0, #1
 8000768:	2000      	movhi	r0, #0
 800076a:	f85d fb08 	ldr.w	pc, [sp], #8
 800076e:	bf00      	nop

08000770 <__aeabi_dcmpge>:
 8000770:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000774:	f7ff ffce 	bl	8000714 <__aeabi_cdrcmple>
 8000778:	bf94      	ite	ls
 800077a:	2001      	movls	r0, #1
 800077c:	2000      	movhi	r0, #0
 800077e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000782:	bf00      	nop

08000784 <__aeabi_dcmpgt>:
 8000784:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000788:	f7ff ffc4 	bl	8000714 <__aeabi_cdrcmple>
 800078c:	bf34      	ite	cc
 800078e:	2001      	movcc	r0, #1
 8000790:	2000      	movcs	r0, #0
 8000792:	f85d fb08 	ldr.w	pc, [sp], #8
 8000796:	bf00      	nop

08000798 <__aeabi_d2uiz>:
 8000798:	004a      	lsls	r2, r1, #1
 800079a:	d211      	bcs.n	80007c0 <__aeabi_d2uiz+0x28>
 800079c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007a0:	d211      	bcs.n	80007c6 <__aeabi_d2uiz+0x2e>
 80007a2:	d50d      	bpl.n	80007c0 <__aeabi_d2uiz+0x28>
 80007a4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007ac:	d40e      	bmi.n	80007cc <__aeabi_d2uiz+0x34>
 80007ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	4770      	bx	lr
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	4770      	bx	lr
 80007c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ca:	d102      	bne.n	80007d2 <__aeabi_d2uiz+0x3a>
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	4770      	bx	lr
 80007d2:	f04f 0000 	mov.w	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b96a 	b.w	8000ac4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9d08      	ldr	r5, [sp, #32]
 800080e:	460c      	mov	r4, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14e      	bne.n	80008b2 <__udivmoddi4+0xaa>
 8000814:	4694      	mov	ip, r2
 8000816:	458c      	cmp	ip, r1
 8000818:	4686      	mov	lr, r0
 800081a:	fab2 f282 	clz	r2, r2
 800081e:	d962      	bls.n	80008e6 <__udivmoddi4+0xde>
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0320 	rsb	r3, r2, #32
 8000826:	4091      	lsls	r1, r2
 8000828:	fa20 f303 	lsr.w	r3, r0, r3
 800082c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000830:	4319      	orrs	r1, r3
 8000832:	fa00 fe02 	lsl.w	lr, r0, r2
 8000836:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800083a:	fa1f f68c 	uxth.w	r6, ip
 800083e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000842:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000846:	fb07 1114 	mls	r1, r7, r4, r1
 800084a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084e:	fb04 f106 	mul.w	r1, r4, r6
 8000852:	4299      	cmp	r1, r3
 8000854:	d90a      	bls.n	800086c <__udivmoddi4+0x64>
 8000856:	eb1c 0303 	adds.w	r3, ip, r3
 800085a:	f104 30ff 	add.w	r0, r4, #4294967295
 800085e:	f080 8112 	bcs.w	8000a86 <__udivmoddi4+0x27e>
 8000862:	4299      	cmp	r1, r3
 8000864:	f240 810f 	bls.w	8000a86 <__udivmoddi4+0x27e>
 8000868:	3c02      	subs	r4, #2
 800086a:	4463      	add	r3, ip
 800086c:	1a59      	subs	r1, r3, r1
 800086e:	fa1f f38e 	uxth.w	r3, lr
 8000872:	fbb1 f0f7 	udiv	r0, r1, r7
 8000876:	fb07 1110 	mls	r1, r7, r0, r1
 800087a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800087e:	fb00 f606 	mul.w	r6, r0, r6
 8000882:	429e      	cmp	r6, r3
 8000884:	d90a      	bls.n	800089c <__udivmoddi4+0x94>
 8000886:	eb1c 0303 	adds.w	r3, ip, r3
 800088a:	f100 31ff 	add.w	r1, r0, #4294967295
 800088e:	f080 80fc 	bcs.w	8000a8a <__udivmoddi4+0x282>
 8000892:	429e      	cmp	r6, r3
 8000894:	f240 80f9 	bls.w	8000a8a <__udivmoddi4+0x282>
 8000898:	4463      	add	r3, ip
 800089a:	3802      	subs	r0, #2
 800089c:	1b9b      	subs	r3, r3, r6
 800089e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008a2:	2100      	movs	r1, #0
 80008a4:	b11d      	cbz	r5, 80008ae <__udivmoddi4+0xa6>
 80008a6:	40d3      	lsrs	r3, r2
 80008a8:	2200      	movs	r2, #0
 80008aa:	e9c5 3200 	strd	r3, r2, [r5]
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	428b      	cmp	r3, r1
 80008b4:	d905      	bls.n	80008c2 <__udivmoddi4+0xba>
 80008b6:	b10d      	cbz	r5, 80008bc <__udivmoddi4+0xb4>
 80008b8:	e9c5 0100 	strd	r0, r1, [r5]
 80008bc:	2100      	movs	r1, #0
 80008be:	4608      	mov	r0, r1
 80008c0:	e7f5      	b.n	80008ae <__udivmoddi4+0xa6>
 80008c2:	fab3 f183 	clz	r1, r3
 80008c6:	2900      	cmp	r1, #0
 80008c8:	d146      	bne.n	8000958 <__udivmoddi4+0x150>
 80008ca:	42a3      	cmp	r3, r4
 80008cc:	d302      	bcc.n	80008d4 <__udivmoddi4+0xcc>
 80008ce:	4290      	cmp	r0, r2
 80008d0:	f0c0 80f0 	bcc.w	8000ab4 <__udivmoddi4+0x2ac>
 80008d4:	1a86      	subs	r6, r0, r2
 80008d6:	eb64 0303 	sbc.w	r3, r4, r3
 80008da:	2001      	movs	r0, #1
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d0e6      	beq.n	80008ae <__udivmoddi4+0xa6>
 80008e0:	e9c5 6300 	strd	r6, r3, [r5]
 80008e4:	e7e3      	b.n	80008ae <__udivmoddi4+0xa6>
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	f040 8090 	bne.w	8000a0c <__udivmoddi4+0x204>
 80008ec:	eba1 040c 	sub.w	r4, r1, ip
 80008f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f4:	fa1f f78c 	uxth.w	r7, ip
 80008f8:	2101      	movs	r1, #1
 80008fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000902:	fb08 4416 	mls	r4, r8, r6, r4
 8000906:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800090a:	fb07 f006 	mul.w	r0, r7, r6
 800090e:	4298      	cmp	r0, r3
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x11c>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 34ff 	add.w	r4, r6, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x11a>
 800091c:	4298      	cmp	r0, r3
 800091e:	f200 80cd 	bhi.w	8000abc <__udivmoddi4+0x2b4>
 8000922:	4626      	mov	r6, r4
 8000924:	1a1c      	subs	r4, r3, r0
 8000926:	fa1f f38e 	uxth.w	r3, lr
 800092a:	fbb4 f0f8 	udiv	r0, r4, r8
 800092e:	fb08 4410 	mls	r4, r8, r0, r4
 8000932:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000936:	fb00 f707 	mul.w	r7, r0, r7
 800093a:	429f      	cmp	r7, r3
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x148>
 800093e:	eb1c 0303 	adds.w	r3, ip, r3
 8000942:	f100 34ff 	add.w	r4, r0, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x146>
 8000948:	429f      	cmp	r7, r3
 800094a:	f200 80b0 	bhi.w	8000aae <__udivmoddi4+0x2a6>
 800094e:	4620      	mov	r0, r4
 8000950:	1bdb      	subs	r3, r3, r7
 8000952:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000956:	e7a5      	b.n	80008a4 <__udivmoddi4+0x9c>
 8000958:	f1c1 0620 	rsb	r6, r1, #32
 800095c:	408b      	lsls	r3, r1
 800095e:	fa22 f706 	lsr.w	r7, r2, r6
 8000962:	431f      	orrs	r7, r3
 8000964:	fa20 fc06 	lsr.w	ip, r0, r6
 8000968:	fa04 f301 	lsl.w	r3, r4, r1
 800096c:	ea43 030c 	orr.w	r3, r3, ip
 8000970:	40f4      	lsrs	r4, r6
 8000972:	fa00 f801 	lsl.w	r8, r0, r1
 8000976:	0c38      	lsrs	r0, r7, #16
 8000978:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800097c:	fbb4 fef0 	udiv	lr, r4, r0
 8000980:	fa1f fc87 	uxth.w	ip, r7
 8000984:	fb00 441e 	mls	r4, r0, lr, r4
 8000988:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800098c:	fb0e f90c 	mul.w	r9, lr, ip
 8000990:	45a1      	cmp	r9, r4
 8000992:	fa02 f201 	lsl.w	r2, r2, r1
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x1a6>
 8000998:	193c      	adds	r4, r7, r4
 800099a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800099e:	f080 8084 	bcs.w	8000aaa <__udivmoddi4+0x2a2>
 80009a2:	45a1      	cmp	r9, r4
 80009a4:	f240 8081 	bls.w	8000aaa <__udivmoddi4+0x2a2>
 80009a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80009ac:	443c      	add	r4, r7
 80009ae:	eba4 0409 	sub.w	r4, r4, r9
 80009b2:	fa1f f983 	uxth.w	r9, r3
 80009b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009ba:	fb00 4413 	mls	r4, r0, r3, r4
 80009be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009c6:	45a4      	cmp	ip, r4
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x1d2>
 80009ca:	193c      	adds	r4, r7, r4
 80009cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009d0:	d267      	bcs.n	8000aa2 <__udivmoddi4+0x29a>
 80009d2:	45a4      	cmp	ip, r4
 80009d4:	d965      	bls.n	8000aa2 <__udivmoddi4+0x29a>
 80009d6:	3b02      	subs	r3, #2
 80009d8:	443c      	add	r4, r7
 80009da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009de:	fba0 9302 	umull	r9, r3, r0, r2
 80009e2:	eba4 040c 	sub.w	r4, r4, ip
 80009e6:	429c      	cmp	r4, r3
 80009e8:	46ce      	mov	lr, r9
 80009ea:	469c      	mov	ip, r3
 80009ec:	d351      	bcc.n	8000a92 <__udivmoddi4+0x28a>
 80009ee:	d04e      	beq.n	8000a8e <__udivmoddi4+0x286>
 80009f0:	b155      	cbz	r5, 8000a08 <__udivmoddi4+0x200>
 80009f2:	ebb8 030e 	subs.w	r3, r8, lr
 80009f6:	eb64 040c 	sbc.w	r4, r4, ip
 80009fa:	fa04 f606 	lsl.w	r6, r4, r6
 80009fe:	40cb      	lsrs	r3, r1
 8000a00:	431e      	orrs	r6, r3
 8000a02:	40cc      	lsrs	r4, r1
 8000a04:	e9c5 6400 	strd	r6, r4, [r5]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	e750      	b.n	80008ae <__udivmoddi4+0xa6>
 8000a0c:	f1c2 0320 	rsb	r3, r2, #32
 8000a10:	fa20 f103 	lsr.w	r1, r0, r3
 8000a14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a18:	fa24 f303 	lsr.w	r3, r4, r3
 8000a1c:	4094      	lsls	r4, r2
 8000a1e:	430c      	orrs	r4, r1
 8000a20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a28:	fa1f f78c 	uxth.w	r7, ip
 8000a2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a30:	fb08 3110 	mls	r1, r8, r0, r3
 8000a34:	0c23      	lsrs	r3, r4, #16
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb00 f107 	mul.w	r1, r0, r7
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x24c>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a4a:	d22c      	bcs.n	8000aa6 <__udivmoddi4+0x29e>
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	d92a      	bls.n	8000aa6 <__udivmoddi4+0x29e>
 8000a50:	3802      	subs	r0, #2
 8000a52:	4463      	add	r3, ip
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb01 f307 	mul.w	r3, r1, r7
 8000a68:	42a3      	cmp	r3, r4
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x276>
 8000a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a74:	d213      	bcs.n	8000a9e <__udivmoddi4+0x296>
 8000a76:	42a3      	cmp	r3, r4
 8000a78:	d911      	bls.n	8000a9e <__udivmoddi4+0x296>
 8000a7a:	3902      	subs	r1, #2
 8000a7c:	4464      	add	r4, ip
 8000a7e:	1ae4      	subs	r4, r4, r3
 8000a80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a84:	e739      	b.n	80008fa <__udivmoddi4+0xf2>
 8000a86:	4604      	mov	r4, r0
 8000a88:	e6f0      	b.n	800086c <__udivmoddi4+0x64>
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e706      	b.n	800089c <__udivmoddi4+0x94>
 8000a8e:	45c8      	cmp	r8, r9
 8000a90:	d2ae      	bcs.n	80009f0 <__udivmoddi4+0x1e8>
 8000a92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a9a:	3801      	subs	r0, #1
 8000a9c:	e7a8      	b.n	80009f0 <__udivmoddi4+0x1e8>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	e7ed      	b.n	8000a7e <__udivmoddi4+0x276>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	e799      	b.n	80009da <__udivmoddi4+0x1d2>
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	e7d4      	b.n	8000a54 <__udivmoddi4+0x24c>
 8000aaa:	46d6      	mov	lr, sl
 8000aac:	e77f      	b.n	80009ae <__udivmoddi4+0x1a6>
 8000aae:	4463      	add	r3, ip
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	e74d      	b.n	8000950 <__udivmoddi4+0x148>
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	4608      	mov	r0, r1
 8000aba:	e70f      	b.n	80008dc <__udivmoddi4+0xd4>
 8000abc:	3e02      	subs	r6, #2
 8000abe:	4463      	add	r3, ip
 8000ac0:	e730      	b.n	8000924 <__udivmoddi4+0x11c>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_idiv0>:
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <lcd_send_string>:

extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E // Change this according to your setup

void lcd_send_string(char *str)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8000ad0:	e006      	b.n	8000ae0 <lcd_send_string+0x18>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f83a 	bl	8000b54 <lcd_send_data>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <lcd_send_string+0xa>
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f023 030f 	bic.w	r3, r3, #15
 8000b04:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	f043 030c 	orr.w	r3, r3, #12
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	f043 030c 	orr.w	r3, r3, #12
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000b34:	f107 0208 	add.w	r2, r7, #8
 8000b38:	2364      	movs	r3, #100	@ 0x64
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	214e      	movs	r1, #78	@ 0x4e
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <lcd_send_cmd+0x5c>)
 8000b42:	f002 f88d 	bl	8002c60 <HAL_I2C_Master_Transmit>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000a8 	.word	0x200000a8

08000b54 <lcd_send_data>:

void lcd_send_data(char data) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f023 030f 	bic.w	r3, r3, #15
 8000b64:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f043 030d 	orr.w	r3, r3, #13
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f043 0309 	orr.w	r3, r3, #9
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	f043 030d 	orr.w	r3, r3, #13
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	f043 0309 	orr.w	r3, r3, #9
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000b94:	f107 0208 	add.w	r2, r7, #8
 8000b98:	2364      	movs	r3, #100	@ 0x64
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	214e      	movs	r1, #78	@ 0x4e
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <lcd_send_data+0x5c>)
 8000ba2:	f002 f85d 	bl	8002c60 <HAL_I2C_Master_Transmit>
   // HAL_Delay(10);
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000a8 	.word	0x200000a8

08000bb4 <lcd_clear>:

void lcd_clear(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff ff9b 	bl	8000af4 <lcd_send_cmd>
    HAL_Delay(2);
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f000 fd34 	bl	800162c <HAL_Delay>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
    switch (row) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d81f      	bhi.n	8000c18 <lcd_put_cur+0x50>
 8000bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <lcd_put_cur+0x18>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000bf1 	.word	0x08000bf1
 8000be4:	08000bfb 	.word	0x08000bfb
 8000be8:	08000c05 	.word	0x08000c05
 8000bec:	08000c0f 	.word	0x08000c0f
        case 0:
            col |= 0x80;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf6:	603b      	str	r3, [r7, #0]
            break;
 8000bf8:	e00e      	b.n	8000c18 <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000c00:	603b      	str	r3, [r7, #0]
            break;
 8000c02:	e009      	b.n	8000c18 <lcd_put_cur+0x50>
        case 2:
            col |= 0x90;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8000c0a:	603b      	str	r3, [r7, #0]
            break;
 8000c0c:	e004      	b.n	8000c18 <lcd_put_cur+0x50>
        case 3:
            col |= 0xD0;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8000c14:	603b      	str	r3, [r7, #0]
            break;
 8000c16:	bf00      	nop
    }
    lcd_send_cmd(col);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff69 	bl	8000af4 <lcd_send_cmd>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 8000c32:	f000 fcb9 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 f853 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3a:	f000 f913 	bl	8000e64 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000c3e:	f000 f8ad 	bl	8000d9c <MX_CAN2_Init>
  MX_I2C1_Init();
 8000c42:	f000 f8e1 	bl	8000e08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* segger system configuration for segger system view  */
  SEGGER_SYSVIEW_Conf();
 8000c46:	f005 f941 	bl	8005ecc <SEGGER_SYSVIEW_Conf>
  /* making priority of task to 4
   * With FreeRTOS, it's important that critical system interrupts
   *(like the SysTick handler or PendSV handler) are not blocked by other less
   * critical interrupts. By using NVIC_PRIORITYGROUP_4, you can assign the lowest preemption
   * priority to FreeRTOS interrupts, ensuring they are not blocked.*/
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f001 fad0 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* filtering the CAN configurations before starting the can */
  CAN_Filter_Config();
 8000c50:	f000 f94c 	bl	8000eec <CAN_Filter_Config>
    * @brief  Start the CAN module.
    * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
    *         the configuration information for the specified CAN.
    * @retval HAL status
    */
  if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8000c54:	481b      	ldr	r0, [pc, #108]	@ (8000cc4 <main+0x98>)
 8000c56:	f001 f879 	bl	8001d4c <HAL_CAN_Start>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <main+0x38>
  {
	  Error_Handler();
 8000c60:	f000 faee 	bl	8001240 <Error_Handler>
    *         the configuration information for the specified CAN.
    * @param  ActiveITs indicates which interrupts will be enabled.
    *         This parameter can be any combination of @arg CAN_Interrupts.
    * @retval HAL status
    */
  if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
 8000c64:	2102      	movs	r1, #2
 8000c66:	4817      	ldr	r0, [pc, #92]	@ (8000cc4 <main+0x98>)
 8000c68:	f001 f9e2 	bl	8002030 <HAL_CAN_ActivateNotification>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <main+0x4a>
  {
	  Error_Handler();
 8000c72:	f000 fae5 	bl	8001240 <Error_Handler>
  }

  //creating tasks
  assert_param(xTaskCreate(Deferred_Task, "Task for Deferred work", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, &xDeferrefTaskHandle) == pdPASS);
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <main+0x9c>)
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	4912      	ldr	r1, [pc, #72]	@ (8000ccc <main+0xa0>)
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <main+0xa4>)
 8000c86:	f003 fd7b 	bl	8004780 <xTaskCreate>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d003      	beq.n	8000c98 <main+0x6c>
 8000c90:	21b0      	movs	r1, #176	@ 0xb0
 8000c92:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <main+0xa8>)
 8000c94:	f000 fada 	bl	800124c <assert_failed>
  assert_param(xTaskCreate(WasteFullLED, "LED_Blink on low priority", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2280      	movs	r2, #128	@ 0x80
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <main+0xac>)
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <main+0xb0>)
 8000ca8:	f003 fd6a 	bl	8004780 <xTaskCreate>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d003      	beq.n	8000cba <main+0x8e>
 8000cb2:	21b1      	movs	r1, #177	@ 0xb1
 8000cb4:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <main+0xa8>)
 8000cb6:	f000 fac9 	bl	800124c <assert_failed>

  //Data_transmitt= xQueueCreate(4,sizeof(float));


  //Starting Scheduler
  vTaskStartScheduler();
 8000cba:	f003 ff21 	bl	8004b00 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000cbe:	bf00      	nop
 8000cc0:	e7fd      	b.n	8000cbe <main+0x92>
 8000cc2:	bf00      	nop
 8000cc4:	20000080 	.word	0x20000080
 8000cc8:	20000114 	.word	0x20000114
 8000ccc:	08008210 	.word	0x08008210
 8000cd0:	08000f71 	.word	0x08000f71
 8000cd4:	08008228 	.word	0x08008228
 8000cd8:	0800823c 	.word	0x0800823c
 8000cdc:	08000f3d 	.word	0x08000f3d

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	@ 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2230      	movs	r2, #48	@ 0x30
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f006 fda6 	bl	8007840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <SystemClock_Config+0xb4>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	4a21      	ldr	r2, [pc, #132]	@ (8000d94 <SystemClock_Config+0xb4>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <SystemClock_Config+0xb4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <SystemClock_Config+0xb8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <SystemClock_Config+0xb8>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <SystemClock_Config+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d44:	2310      	movs	r3, #16
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fadf 	bl	8003314 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d5c:	f000 fa70 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fdf6 	bl	800396c <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d86:	f000 fa5b 	bl	8001240 <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3750      	adds	r7, #80	@ 0x50
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000da0:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000da2:	4a18      	ldr	r2, [pc, #96]	@ (8000e04 <MX_CAN2_Init+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 24;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000da8:	2218      	movs	r2, #24
 8000daa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000dba:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000dbe:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000dc2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000dc6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <MX_CAN2_Init+0x64>)
 8000dee:	f000 fc41 	bl	8001674 <HAL_CAN_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000df8:	f000 fa22 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000080 	.word	0x20000080
 8000e04:	40006800 	.word	0x40006800

08000e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e0e:	4a13      	ldr	r2, [pc, #76]	@ (8000e5c <MX_I2C1_Init+0x54>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e14:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <MX_I2C1_Init+0x58>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_I2C1_Init+0x50>)
 8000e46:	f001 fd43 	bl	80028d0 <HAL_I2C_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e50:	f000 f9f6 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200000a8 	.word	0x200000a8
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	000186a0 	.word	0x000186a0

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
  /*USER CODE BEGIN MX_GPIO_Init_1 */

  /*USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_GPIO_Init+0x80>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <MX_GPIO_Init+0x80>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_GPIO_Init+0x80>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_GPIO_Init+0x80>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ee4 <MX_GPIO_Init+0x80>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_GPIO_Init+0x80>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <MX_GPIO_Init+0x84>)
 8000eba:	f001 fcdd 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ebe:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <MX_GPIO_Init+0x84>)
 8000ed8:	f001 f9ee 	bl	80022b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <CAN_Filter_Config>:
  * @brief This function configures the CAN filter
  * @retval None
  */

void CAN_Filter_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can2_filter_init;
  can2_filter_init.FilterActivation = ENABLE;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	623b      	str	r3, [r7, #32]
  can2_filter_init.FilterBank = 14;
 8000ef6:	230e      	movs	r3, #14
 8000ef8:	617b      	str	r3, [r7, #20]
  can2_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  can2_filter_init.FilterIdHigh = 0x0000;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  can2_filter_init.FilterIdLow = 0x0000;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  can2_filter_init.FilterMaskIdHigh = 0x0000;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  can2_filter_init.FilterMaskIdLow = 0x0000;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  can2_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  can2_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
  can2_filter_init.SlaveStartFilterBank=14;
 8000f16:	230e      	movs	r3, #14
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24

  if(HAL_CAN_ConfigFilter(&hcan2, &can2_filter_init) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <CAN_Filter_Config+0x4c>)
 8000f20:	f000 fdc6 	bl	8001ab0 <HAL_CAN_ConfigFilter>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <CAN_Filter_Config+0x42>
  {
	Error_Handler();
 8000f2a:	f000 f989 	bl	8001240 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	@ 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000080 	.word	0x20000080

08000f3c <WasteFullLED>:


/* The vTaskDelay function is used to create a delay,
 * allowing the RTOS to manage the task's timing. */
void WasteFullLED(void *NotUsed)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f4a:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <WasteFullLED+0x30>)
 8000f4c:	f001 fc94 	bl	8002878 <HAL_GPIO_WritePin>
		vTaskDelay(100/portTICK_PERIOD_MS);
 8000f50:	2064      	movs	r0, #100	@ 0x64
 8000f52:	f003 fd9f 	bl	8004a94 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f5c:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <WasteFullLED+0x30>)
 8000f5e:	f001 fc8b 	bl	8002878 <HAL_GPIO_WritePin>
		vTaskDelay(100/portTICK_PERIOD_MS);
 8000f62:	2064      	movs	r0, #100	@ 0x64
 8000f64:	f003 fd96 	bl	8004a94 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8000f68:	bf00      	nop
 8000f6a:	e7eb      	b.n	8000f44 <WasteFullLED+0x8>
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <Deferred_Task>:
/* 1->This task waits for a notification from an ISR using ulTaskNotifyTake,
 * which blocks the task until the notification is received.
 * 2->Once notified, it extracts two float values from RxData,
 * representing distances for the front and rear */
void Deferred_Task(void *argument)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	6078      	str	r0, [r7, #4]
	char buffer[20];

	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("Waiting for mque receive\n");
 8000f78:	486a      	ldr	r0, [pc, #424]	@ (8001124 <Deferred_Task+0x1b4>)
 8000f7a:	f006 fbc1 	bl	8007700 <SEGGER_SYSVIEW_PrintfHost>

		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8000f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f82:	2101      	movs	r1, #1
 8000f84:	2000      	movs	r0, #0
 8000f86:	f004 f96f 	bl	8005268 <ulTaskGenericNotifyTake>

		memcpy(&distance_front,&RxData[0],sizeof(float));
 8000f8a:	4b67      	ldr	r3, [pc, #412]	@ (8001128 <Deferred_Task+0x1b8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a67      	ldr	r2, [pc, #412]	@ (800112c <Deferred_Task+0x1bc>)
 8000f90:	6013      	str	r3, [r2, #0]
		memcpy(&distance_rear,&RxData[4],sizeof(float));
 8000f92:	4b65      	ldr	r3, [pc, #404]	@ (8001128 <Deferred_Task+0x1b8>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a66      	ldr	r2, [pc, #408]	@ (8001130 <Deferred_Task+0x1c0>)
 8000f98:	6013      	str	r3, [r2, #0]

		SEGGER_SYSVIEW_PrintfHost("Distance Front: %d Rear: %d",distance_front,distance_rear);
 8000f9a:	4b64      	ldr	r3, [pc, #400]	@ (800112c <Deferred_Task+0x1bc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fb1a 	bl	80005d8 <__aeabi_f2d>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	4b61      	ldr	r3, [pc, #388]	@ (8001130 <Deferred_Task+0x1c0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fb13 	bl	80005d8 <__aeabi_f2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	e9cd 2300 	strd	r2, r3, [sp]
 8000fba:	4622      	mov	r2, r4
 8000fbc:	462b      	mov	r3, r5
 8000fbe:	485d      	ldr	r0, [pc, #372]	@ (8001134 <Deferred_Task+0x1c4>)
 8000fc0:	f006 fb9e 	bl	8007700 <SEGGER_SYSVIEW_PrintfHost>

		/* The task logs the distances and then calculates the minimum distance. */
		min_distance= fmin(distance_front,distance_front);
 8000fc4:	4b59      	ldr	r3, [pc, #356]	@ (800112c <Deferred_Task+0x1bc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fb05 	bl	80005d8 <__aeabi_f2d>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	4b56      	ldr	r3, [pc, #344]	@ (800112c <Deferred_Task+0x1bc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fafe 	bl	80005d8 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	ec43 2b11 	vmov	d1, r2, r3
 8000fe4:	ec45 4b10 	vmov	d0, r4, r5
 8000fe8:	f007 f8a4 	bl	8008134 <fmin>
 8000fec:	ec53 2b10 	vmov	r2, r3, d0
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fbd0 	bl	8000798 <__aeabi_d2uiz>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a4f      	ldr	r2, [pc, #316]	@ (8001138 <Deferred_Task+0x1c8>)
 8000ffc:	6013      	str	r3, [r2, #0]

		/* In this part of the code, the buzzer is controlled based on the min_distance value.
		 * The delay duration (period) is calculated by multiplying the min_distance by 5.
		 * This means that the closer the object, the shorter the delay, resulting in faster buzzing. */
		if(min_distance < 30)
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8001138 <Deferred_Task+0x1c8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b1d      	cmp	r3, #29
 8001004:	d81d      	bhi.n	8001042 <Deferred_Task+0xd2>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100c:	484b      	ldr	r0, [pc, #300]	@ (800113c <Deferred_Task+0x1cc>)
 800100e:	f001 fc33 	bl	8002878 <HAL_GPIO_WritePin>
			period=(5 * min_distance);
 8001012:	4b49      	ldr	r3, [pc, #292]	@ (8001138 <Deferred_Task+0x1c8>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	4a48      	ldr	r2, [pc, #288]	@ (8001140 <Deferred_Task+0x1d0>)
 800101e:	6013      	str	r3, [r2, #0]
			vTaskDelay(period/portTICK_PERIOD_MS);
 8001020:	4b47      	ldr	r3, [pc, #284]	@ (8001140 <Deferred_Task+0x1d0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fd35 	bl	8004a94 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001030:	4842      	ldr	r0, [pc, #264]	@ (800113c <Deferred_Task+0x1cc>)
 8001032:	f001 fc21 	bl	8002878 <HAL_GPIO_WritePin>
			vTaskDelay(period/portTICK_PERIOD_MS);
 8001036:	4b42      	ldr	r3, [pc, #264]	@ (8001140 <Deferred_Task+0x1d0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fd2a 	bl	8004a94 <vTaskDelay>
 8001040:	e005      	b.n	800104e <Deferred_Task+0xde>
		}
		/* else reset the buzzer */
		else
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001048:	483c      	ldr	r0, [pc, #240]	@ (800113c <Deferred_Task+0x1cc>)
 800104a:	f001 fc15 	bl	8002878 <HAL_GPIO_WritePin>


		/* for segger system view */
		SEGGER_SYSVIEW_PrintfHost("Distance Front: %d Rear: %d",(int)distance_front,(int)distance_rear);
 800104e:	4b37      	ldr	r3, [pc, #220]	@ (800112c <Deferred_Task+0x1bc>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001058:	4b35      	ldr	r3, [pc, #212]	@ (8001130 <Deferred_Task+0x1c0>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001062:	ee17 2a90 	vmov	r2, s15
 8001066:	ee17 1a10 	vmov	r1, s14
 800106a:	4832      	ldr	r0, [pc, #200]	@ (8001134 <Deferred_Task+0x1c4>)
 800106c:	f006 fb48 	bl	8007700 <SEGGER_SYSVIEW_PrintfHost>
		lcd_clear();
 8001070:	f7ff fda0 	bl	8000bb4 <lcd_clear>
		lcd_put_cur(0, 0);
 8001074:	2100      	movs	r1, #0
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fda6 	bl	8000bc8 <lcd_put_cur>
		sprintf(buffer, "Front Distance:");
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4930      	ldr	r1, [pc, #192]	@ (8001144 <Deferred_Task+0x1d4>)
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fbac 	bl	80077e0 <siprintf>
		lcd_send_string(buffer);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd1b 	bl	8000ac8 <lcd_send_string>

		/* printing front distance on LCD */
		lcd_put_cur(1, 0);
 8001092:	2100      	movs	r1, #0
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fd97 	bl	8000bc8 <lcd_put_cur>
		sprintf(buffer, "%d cm",(int)distance_front);
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <Deferred_Task+0x1bc>)
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	4926      	ldr	r1, [pc, #152]	@ (8001148 <Deferred_Task+0x1d8>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f006 fb96 	bl	80077e0 <siprintf>
		lcd_send_string(buffer);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fd05 	bl	8000ac8 <lcd_send_string>

		lcd_put_cur(2, 0);
 80010be:	2100      	movs	r1, #0
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff fd81 	bl	8000bc8 <lcd_put_cur>
		sprintf(buffer, "Rear Distance:");
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4920      	ldr	r1, [pc, #128]	@ (800114c <Deferred_Task+0x1dc>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f006 fb87 	bl	80077e0 <siprintf>
		lcd_send_string(buffer);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fcf6 	bl	8000ac8 <lcd_send_string>

		/* printing rear distance on LCD */
		lcd_put_cur(3, 0);
 80010dc:	2100      	movs	r1, #0
 80010de:	2003      	movs	r0, #3
 80010e0:	f7ff fd72 	bl	8000bc8 <lcd_put_cur>
		sprintf(buffer, "%d cm",(int)distance_rear);
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <Deferred_Task+0x1c0>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	ee17 2a90 	vmov	r2, s15
 80010f6:	4914      	ldr	r1, [pc, #80]	@ (8001148 <Deferred_Task+0x1d8>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fb71 	bl	80077e0 <siprintf>
		lcd_send_string(buffer);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fce0 	bl	8000ac8 <lcd_send_string>

		bzero(buffer,sizeof(buffer));
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	461a      	mov	r2, r3
 800110e:	2300      	movs	r3, #0
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	6053      	str	r3, [r2, #4]
 8001114:	6093      	str	r3, [r2, #8]
 8001116:	60d3      	str	r3, [r2, #12]
 8001118:	6113      	str	r3, [r2, #16]
		vTaskDelay(100/portTICK_PERIOD_MS);
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f003 fcba 	bl	8004a94 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("Waiting for mque receive\n");
 8001120:	e72a      	b.n	8000f78 <Deferred_Task+0x8>
 8001122:	bf00      	nop
 8001124:	08008258 	.word	0x08008258
 8001128:	200000fc 	.word	0x200000fc
 800112c:	2000010c 	.word	0x2000010c
 8001130:	20000108 	.word	0x20000108
 8001134:	08008274 	.word	0x08008274
 8001138:	20000104 	.word	0x20000104
 800113c:	40020c00 	.word	0x40020c00
 8001140:	20000110 	.word	0x20000110
 8001144:	08008290 	.word	0x08008290
 8001148:	080082a0 	.word	0x080082a0
 800114c:	080082a8 	.word	0x080082a8

08001150 <CAN2_RX0_IRQHandler>:

}


void CAN2_RX0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

	/* xHigherPriorityTaskWoken is a flag used to check
	 * if a higher priority task has been woken by an ISR. It is initialized to pdFALSE */
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]

	/* Format and send an ISR entry event.
	 * This function is used to log the entry into the ISR using SEGGER SystemView,
	 * a real-time analysis tool*/
	SEGGER_SYSVIEW_RecordEnterISR();
 800115a:	f006 f8ab 	bl	80072b4 <SEGGER_SYSVIEW_RecordEnterISR>
	/* Declares a structure to hold the header information of the received CAN message */
	CAN_RxHeaderTypeDef RxHeader;

	/* Reads the Interrupt Enable Register (IER) of the CAN peripheral
	 *  to check which interrupts are enabled. */
	uint32_t interrupts = READ_REG(hcan2.Instance->IER);
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <CAN2_RX0_IRQHandler+0xb0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Checks if the FIFO0 message pending interrupt is enabled
	 * by using a bitwise AND operation with CAN_IT_RX_FIFO0_MSG_PENDING */
	if((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING)!=0U)
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d036      	beq.n	80011de <CAN2_RX0_IRQHandler+0x8e>
	{
		/* Checks if there are any messages pending in the FIFO0 receive buffer.
		 * This is done by checking the FIFO0 Message Pending bits in the Receive FIFO 0 Register (RF0R) */
		if((hcan2.Instance->RF0R & CAN_RF0R_FMP0)!=0U)
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <CAN2_RX0_IRQHandler+0xb0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d02f      	beq.n	80011de <CAN2_RX0_IRQHandler+0x8e>
		{
			/* Calls the HAL_CAN_GetRxMessage function to retrieve the message from FIFO0.
			 * If it fails, the Error_Handler() function is called */
			if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData)!= HAL_OK )
 800117e:	1d3a      	adds	r2, r7, #4
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <CAN2_RX0_IRQHandler+0xb4>)
 8001182:	2100      	movs	r1, #0
 8001184:	481e      	ldr	r0, [pc, #120]	@ (8001200 <CAN2_RX0_IRQHandler+0xb0>)
 8001186:	f000 fe25 	bl	8001dd4 <HAL_CAN_GetRxMessage>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <CAN2_RX0_IRQHandler+0x44>
			{
				Error_Handler();
 8001190:	f000 f856 	bl	8001240 <Error_Handler>
			}
			/* This checks if the received message has a standard ID of 0x65D, is a standard frame (IDE == CAN_ID_STD)
			 * and has a data length code (DLC) of 8. If these conditions are met, the code proceeds to process the data. */
			if((RxHeader.StdId==0x65D)&&(RxHeader.IDE==CAN_ID_STD)&&(RxHeader.DLC==8))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f240 625d 	movw	r2, #1629	@ 0x65d
 800119a:	4293      	cmp	r3, r2
 800119c:	d11f      	bne.n	80011de <CAN2_RX0_IRQHandler+0x8e>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d11c      	bne.n	80011de <CAN2_RX0_IRQHandler+0x8e>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d119      	bne.n	80011de <CAN2_RX0_IRQHandler+0x8e>
			{
				/* printing received data on segger for debug and user view */
				SEGGER_SYSVIEW_PrintfHost("In Interrupt\n");
 80011aa:	4817      	ldr	r0, [pc, #92]	@ (8001208 <CAN2_RX0_IRQHandler+0xb8>)
 80011ac:	f006 faa8 	bl	8007700 <SEGGER_SYSVIEW_PrintfHost>
				SEGGER_SYSVIEW_PrintfHost("Data: %c\n",RxData[0]);
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <CAN2_RX0_IRQHandler+0xb4>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4815      	ldr	r0, [pc, #84]	@ (800120c <CAN2_RX0_IRQHandler+0xbc>)
 80011b8:	f006 faa2 	bl	8007700 <SEGGER_SYSVIEW_PrintfHost>
				SEGGER_SYSVIEW_PrintfHost("Data: %c\n",RxData[4]);
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <CAN2_RX0_IRQHandler+0xb4>)
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	@ (800120c <CAN2_RX0_IRQHandler+0xbc>)
 80011c4:	f006 fa9c 	bl	8007700 <SEGGER_SYSVIEW_PrintfHost>
				//xQueueSendFromISR(Data_transmitt, &RxData, &xHigherPriorityTaskWoken);

				/* This function is used to notify a task (referred to by xDeferrefTaskHandle) from within the ISR
				 * The xHigherPriorityTaskWoken flag is set to pdTRUE if the notified task has a higher priority than the currently running task. */
				vTaskNotifyGiveFromISR(xDeferrefTaskHandle,&xHigherPriorityTaskWoken);
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <CAN2_RX0_IRQHandler+0xc0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f107 0220 	add.w	r2, r7, #32
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 f8b0 	bl	8005338 <vTaskGenericNotifyGiveFromISR>
				SEGGER_SYSVIEW_PrintfHost("Data Sent\n");
 80011d8:	480e      	ldr	r0, [pc, #56]	@ (8001214 <CAN2_RX0_IRQHandler+0xc4>)
 80011da:	f006 fa91 	bl	8007700 <SEGGER_SYSVIEW_PrintfHost>
			}
		}
	}

	SEGGER_SYSVIEW_RecordExitISR();
 80011de:	f006 f8ab 	bl	8007338 <SEGGER_SYSVIEW_RecordExitISR>

	/* f xHigherPriorityTaskWoken was set to pdTRUE, this macro will cause a context
	 * switch to the higher priority task that was woken by the ISR,
	 *  ensuring that it runs immediately after the ISR completes. */
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d007      	beq.n	80011f8 <CAN2_RX0_IRQHandler+0xa8>
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <CAN2_RX0_IRQHandler+0xc8>)
 80011ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	f3bf 8f4f 	dsb	sy
 80011f4:	f3bf 8f6f 	isb	sy
  /* USER CODE END CAN2_RX0_IRQn 0 */

  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000080 	.word	0x20000080
 8001204:	200000fc 	.word	0x200000fc
 8001208:	080082b8 	.word	0x080082b8
 800120c:	080082c8 	.word	0x080082c8
 8001210:	20000114 	.word	0x20000114
 8001214:	080082d4 	.word	0x080082d4
 8001218:	e000ed04 	.word	0xe000ed04

0800121c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122e:	f000 f9dd 	bl	80015ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010000 	.word	0x40010000

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <Error_Handler+0x8>

0800124c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  /* User can add his own implementation to report the file name and line number,

     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* USER CODE END 6 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a24      	ldr	r2, [pc, #144]	@ (8001364 <HAL_CAN_MspInit+0xb0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d142      	bne.n	800135c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a22      	ldr	r2, [pc, #136]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 80012e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 80012fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a14      	ldr	r2, [pc, #80]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_CAN_MspInit+0xb4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800132a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800133c:	2309      	movs	r3, #9
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4809      	ldr	r0, [pc, #36]	@ (800136c <HAL_CAN_MspInit+0xb8>)
 8001348:	f000 ffb6 	bl	80022b8 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 6, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2106      	movs	r1, #6
 8001350:	2040      	movs	r0, #64	@ 0x40
 8001352:	f000 ff6d 	bl	8002230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001356:	2040      	movs	r0, #64	@ 0x40
 8001358:	f000 ff96 	bl	8002288 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	@ 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40006800 	.word	0x40006800
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400

08001370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <HAL_I2C_MspInit+0x84>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12b      	bne.n	80013ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <HAL_I2C_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <HAL_I2C_MspInit+0x88>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_I2C_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ae:	23c0      	movs	r3, #192	@ 0xc0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013be:	2304      	movs	r3, #4
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <HAL_I2C_MspInit+0x8c>)
 80013ca:	f000 ff75 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_I2C_MspInit+0x88>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <HAL_I2C_MspInit+0x88>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_I2C_MspInit+0x88>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	@ 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b2e      	ldr	r3, [pc, #184]	@ (80014d0 <HAL_InitTick+0xd0>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001418:	4a2d      	ldr	r2, [pc, #180]	@ (80014d0 <HAL_InitTick+0xd0>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001420:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <HAL_InitTick+0xd0>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800142c:	f107 020c 	add.w	r2, r7, #12
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fd20 	bl	8003e7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800143c:	f002 fd0a 	bl	8003e54 <HAL_RCC_GetPCLK2Freq>
 8001440:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	4a23      	ldr	r2, [pc, #140]	@ (80014d4 <HAL_InitTick+0xd4>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	3b01      	subs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_InitTick+0xd8>)
 8001452:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <HAL_InitTick+0xdc>)
 8001454:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_InitTick+0xd8>)
 8001458:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800145c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800145e:	4a1e      	ldr	r2, [pc, #120]	@ (80014d8 <HAL_InitTick+0xd8>)
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <HAL_InitTick+0xd8>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_InitTick+0xd8>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_InitTick+0xd8>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001476:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <HAL_InitTick+0xd8>)
 8001478:	f002 fd32 	bl	8003ee0 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001486:	2b00      	cmp	r3, #0
 8001488:	d11b      	bne.n	80014c2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800148a:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <HAL_InitTick+0xd8>)
 800148c:	f002 fe4a 	bl	8004124 <HAL_TIM_Base_Start_IT>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800149a:	2b00      	cmp	r3, #0
 800149c:	d111      	bne.n	80014c2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800149e:	2019      	movs	r0, #25
 80014a0:	f000 fef2 	bl	8002288 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	d808      	bhi.n	80014bc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80014aa:	2200      	movs	r2, #0
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	2019      	movs	r0, #25
 80014b0:	f000 febe 	bl	8002230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b4:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <HAL_InitTick+0xe0>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e002      	b.n	80014c2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3730      	adds	r7, #48	@ 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	20000118 	.word	0x20000118
 80014dc:	40010000 	.word	0x40010000
 80014e0:	20000004 	.word	0x20000004

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001522:	f002 fec5 	bl	80042b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000118 	.word	0x20000118

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001558:	f7ff ffea 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f006 f965 	bl	8007850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fb51 	bl	8000c2c <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001598:	0800857c 	.word	0x0800857c
  ldr r2, =_sbss
 800159c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80015a0:	20013a50 	.word	0x20013a50

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	@ (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 fe0d 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f7ff ff12 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fe42 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	20000160 	.word	0x20000160

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000160 	.word	0x20000160

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e20f      	b.n	8001aa6 <HAL_CAN_Init+0x432>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a91      	ldr	r2, [pc, #580]	@ (80018d0 <HAL_CAN_Init+0x25c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d009      	beq.n	80016a4 <HAL_CAN_Init+0x30>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a8f      	ldr	r2, [pc, #572]	@ (80018d4 <HAL_CAN_Init+0x260>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d004      	beq.n	80016a4 <HAL_CAN_Init+0x30>
 800169a:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800169e:	488e      	ldr	r0, [pc, #568]	@ (80018d8 <HAL_CAN_Init+0x264>)
 80016a0:	f7ff fdd4 	bl	800124c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e1b      	ldrb	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_CAN_Init+0x4a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7e1b      	ldrb	r3, [r3, #24]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d004      	beq.n	80016be <HAL_CAN_Init+0x4a>
 80016b4:	f240 111f 	movw	r1, #287	@ 0x11f
 80016b8:	4887      	ldr	r0, [pc, #540]	@ (80018d8 <HAL_CAN_Init+0x264>)
 80016ba:	f7ff fdc7 	bl	800124c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7e5b      	ldrb	r3, [r3, #25]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_CAN_Init+0x64>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7e5b      	ldrb	r3, [r3, #25]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d004      	beq.n	80016d8 <HAL_CAN_Init+0x64>
 80016ce:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80016d2:	4881      	ldr	r0, [pc, #516]	@ (80018d8 <HAL_CAN_Init+0x264>)
 80016d4:	f7ff fdba 	bl	800124c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7e9b      	ldrb	r3, [r3, #26]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_CAN_Init+0x7e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7e9b      	ldrb	r3, [r3, #26]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d004      	beq.n	80016f2 <HAL_CAN_Init+0x7e>
 80016e8:	f240 1121 	movw	r1, #289	@ 0x121
 80016ec:	487a      	ldr	r0, [pc, #488]	@ (80018d8 <HAL_CAN_Init+0x264>)
 80016ee:	f7ff fdad 	bl	800124c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7edb      	ldrb	r3, [r3, #27]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <HAL_CAN_Init+0x98>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7edb      	ldrb	r3, [r3, #27]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d004      	beq.n	800170c <HAL_CAN_Init+0x98>
 8001702:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001706:	4874      	ldr	r0, [pc, #464]	@ (80018d8 <HAL_CAN_Init+0x264>)
 8001708:	f7ff fda0 	bl	800124c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7f1b      	ldrb	r3, [r3, #28]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_CAN_Init+0xb2>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7f1b      	ldrb	r3, [r3, #28]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d004      	beq.n	8001726 <HAL_CAN_Init+0xb2>
 800171c:	f240 1123 	movw	r1, #291	@ 0x123
 8001720:	486d      	ldr	r0, [pc, #436]	@ (80018d8 <HAL_CAN_Init+0x264>)
 8001722:	f7ff fd93 	bl	800124c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7f5b      	ldrb	r3, [r3, #29]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_CAN_Init+0xcc>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7f5b      	ldrb	r3, [r3, #29]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d004      	beq.n	8001740 <HAL_CAN_Init+0xcc>
 8001736:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800173a:	4867      	ldr	r0, [pc, #412]	@ (80018d8 <HAL_CAN_Init+0x264>)
 800173c:	f7ff fd86 	bl	800124c <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_CAN_Init+0xfc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001750:	d00e      	beq.n	8001770 <HAL_CAN_Init+0xfc>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800175a:	d009      	beq.n	8001770 <HAL_CAN_Init+0xfc>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001764:	d004      	beq.n	8001770 <HAL_CAN_Init+0xfc>
 8001766:	f240 1125 	movw	r1, #293	@ 0x125
 800176a:	485b      	ldr	r0, [pc, #364]	@ (80018d8 <HAL_CAN_Init+0x264>)
 800176c:	f7ff fd6e 	bl	800124c <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_CAN_Init+0x12c>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001780:	d00e      	beq.n	80017a0 <HAL_CAN_Init+0x12c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800178a:	d009      	beq.n	80017a0 <HAL_CAN_Init+0x12c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001794:	d004      	beq.n	80017a0 <HAL_CAN_Init+0x12c>
 8001796:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800179a:	484f      	ldr	r0, [pc, #316]	@ (80018d8 <HAL_CAN_Init+0x264>)
 800179c:	f7ff fd56 	bl	800124c <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d04f      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b0:	d04a      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017ba:	d045      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80017c4:	d040      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017ce:	d03b      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d8:	d036      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80017e2:	d031      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 80017ec:	d02c      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80017f6:	d027      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8001800:	d022      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 800180a:	d01d      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 8001814:	d018      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800181e:	d013      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001828:	d00e      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001832:	d009      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 800183c:	d004      	beq.n	8001848 <HAL_CAN_Init+0x1d4>
 800183e:	f240 1127 	movw	r1, #295	@ 0x127
 8001842:	4825      	ldr	r0, [pc, #148]	@ (80018d8 <HAL_CAN_Init+0x264>)
 8001844:	f7ff fd02 	bl	800124c <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d027      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001858:	d022      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001862:	d01d      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800186c:	d018      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001876:	d013      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8001880:	d00e      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800188a:	d009      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8001894:	d004      	beq.n	80018a0 <HAL_CAN_Init+0x22c>
 8001896:	f44f 7194 	mov.w	r1, #296	@ 0x128
 800189a:	480f      	ldr	r0, [pc, #60]	@ (80018d8 <HAL_CAN_Init+0x264>)
 800189c:	f7ff fcd6 	bl	800124c <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_CAN_Init+0x23e>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018b0:	d904      	bls.n	80018bc <HAL_CAN_Init+0x248>
 80018b2:	f240 1129 	movw	r1, #297	@ 0x129
 80018b6:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <HAL_CAN_Init+0x264>)
 80018b8:	f7ff fcc8 	bl	800124c <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_CAN_Init+0x268>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fcf3 	bl	80012b4 <HAL_CAN_MspInit>
 80018ce:	e005      	b.n	80018dc <HAL_CAN_Init+0x268>
 80018d0:	40006400 	.word	0x40006400
 80018d4:	40006800 	.word	0x40006800
 80018d8:	080082e0 	.word	0x080082e0
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff fe92 	bl	8001614 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018f2:	e012      	b.n	800191a <HAL_CAN_Init+0x2a6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f4:	f7ff fe8e 	bl	8001614 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d90b      	bls.n	800191a <HAL_CAN_Init+0x2a6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2205      	movs	r2, #5
 8001912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0c5      	b.n	8001aa6 <HAL_CAN_Init+0x432>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0e5      	beq.n	80018f4 <HAL_CAN_Init+0x280>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0202 	bic.w	r2, r2, #2
 8001936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001938:	f7ff fe6c 	bl	8001614 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800193e:	e012      	b.n	8001966 <HAL_CAN_Init+0x2f2>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001940:	f7ff fe68 	bl	8001614 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d90b      	bls.n	8001966 <HAL_CAN_Init+0x2f2>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2205      	movs	r2, #5
 800195e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e09f      	b.n	8001aa6 <HAL_CAN_Init+0x432>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e5      	bne.n	8001940 <HAL_CAN_Init+0x2cc>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_CAN_Init+0x31a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e007      	b.n	800199e <HAL_CAN_Init+0x32a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_CAN_Init+0x344>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_CAN_Init+0x354>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e9b      	ldrb	r3, [r3, #26]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_CAN_Init+0x36e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_Init+0x37e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0220 	bic.w	r2, r2, #32
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7edb      	ldrb	r3, [r3, #27]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_CAN_Init+0x398>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0210 	bic.w	r2, r2, #16
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e007      	b.n	8001a1c <HAL_CAN_Init+0x3a8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0210 	orr.w	r2, r2, #16
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7f1b      	ldrb	r3, [r3, #28]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d108      	bne.n	8001a36 <HAL_CAN_Init+0x3c2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0208 	orr.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e007      	b.n	8001a46 <HAL_CAN_Init+0x3d2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7f5b      	ldrb	r3, [r3, #29]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d108      	bne.n	8001a60 <HAL_CAN_Init+0x3ec>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e007      	b.n	8001a70 <HAL_CAN_Init+0x3fc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	ea42 0103 	orr.w	r1, r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac8:	7cfb      	ldrb	r3, [r7, #19]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d003      	beq.n	8001ad6 <HAL_CAN_ConfigFilter+0x26>
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 812c 	bne.w	8001d2e <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ade:	d304      	bcc.n	8001aea <HAL_CAN_ConfigFilter+0x3a>
 8001ae0:	f240 3152 	movw	r1, #850	@ 0x352
 8001ae4:	4897      	ldr	r0, [pc, #604]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001ae6:	f7ff fbb1 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af2:	d304      	bcc.n	8001afe <HAL_CAN_ConfigFilter+0x4e>
 8001af4:	f240 3153 	movw	r1, #851	@ 0x353
 8001af8:	4892      	ldr	r0, [pc, #584]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001afa:	f7ff fba7 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b06:	d304      	bcc.n	8001b12 <HAL_CAN_ConfigFilter+0x62>
 8001b08:	f44f 7155 	mov.w	r1, #852	@ 0x354
 8001b0c:	488d      	ldr	r0, [pc, #564]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001b0e:	f7ff fb9d 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1a:	d304      	bcc.n	8001b26 <HAL_CAN_ConfigFilter+0x76>
 8001b1c:	f240 3155 	movw	r1, #853	@ 0x355
 8001b20:	4888      	ldr	r0, [pc, #544]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001b22:	f7ff fb93 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_CAN_ConfigFilter+0x90>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d004      	beq.n	8001b40 <HAL_CAN_ConfigFilter+0x90>
 8001b36:	f240 3156 	movw	r1, #854	@ 0x356
 8001b3a:	4882      	ldr	r0, [pc, #520]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001b3c:	f7ff fb86 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_CAN_ConfigFilter+0xaa>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d004      	beq.n	8001b5a <HAL_CAN_ConfigFilter+0xaa>
 8001b50:	f240 3157 	movw	r1, #855	@ 0x357
 8001b54:	487b      	ldr	r0, [pc, #492]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001b56:	f7ff fb79 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_CAN_ConfigFilter+0xc4>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d004      	beq.n	8001b74 <HAL_CAN_ConfigFilter+0xc4>
 8001b6a:	f44f 7156 	mov.w	r1, #856	@ 0x358
 8001b6e:	4875      	ldr	r0, [pc, #468]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001b70:	f7ff fb6c 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_CAN_ConfigFilter+0xde>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d004      	beq.n	8001b8e <HAL_CAN_ConfigFilter+0xde>
 8001b84:	f240 3159 	movw	r1, #857	@ 0x359
 8001b88:	486e      	ldr	r0, [pc, #440]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001b8a:	f7ff fb5f 	bl	800124c <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d48 <HAL_CAN_ConfigFilter+0x298>)
 8001b90:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b1b      	cmp	r3, #27
 8001b98:	d904      	bls.n	8001ba4 <HAL_CAN_ConfigFilter+0xf4>
 8001b9a:	f44f 715d 	mov.w	r1, #884	@ 0x374
 8001b9e:	4869      	ldr	r0, [pc, #420]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001ba0:	f7ff fb54 	bl	800124c <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	2b1b      	cmp	r3, #27
 8001baa:	d904      	bls.n	8001bb6 <HAL_CAN_ConfigFilter+0x106>
 8001bac:	f240 3175 	movw	r1, #885	@ 0x375
 8001bb0:	4864      	ldr	r0, [pc, #400]	@ (8001d44 <HAL_CAN_ConfigFilter+0x294>)
 8001bb2:	f7ff fb4b 	bl	800124c <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bcc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	431a      	orrs	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	401a      	ands	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d123      	bne.n	8001c5c <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3248      	adds	r2, #72	@ 0x48
 8001c3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c52:	6979      	ldr	r1, [r7, #20]
 8001c54:	3348      	adds	r3, #72	@ 0x48
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d122      	bne.n	8001caa <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c84:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3248      	adds	r2, #72	@ 0x48
 8001c8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c9e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca0:	6979      	ldr	r1, [r7, #20]
 8001ca2:	3348      	adds	r3, #72	@ 0x48
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001cc4:	e007      	b.n	8001cd6 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	401a      	ands	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001cf0:	e007      	b.n	8001d02 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d20:	f023 0201 	bic.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e006      	b.n	8001d3c <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
  }
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	080082e0 	.word	0x080082e0
 8001d48:	40006400 	.word	0x40006400

08001d4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d12e      	bne.n	8001dbe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d78:	f7ff fc4c 	bl	8001614 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d7e:	e012      	b.n	8001da6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d80:	f7ff fc48 	bl	8001614 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b0a      	cmp	r3, #10
 8001d8c:	d90b      	bls.n	8001da6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e012      	b.n	8001dcc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e5      	bne.n	8001d80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e006      	b.n	8001dcc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_CAN_GetRxMessage+0x2c>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d004      	beq.n	8001e00 <HAL_CAN_GetRxMessage+0x2c>
 8001df6:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8001dfa:	488c      	ldr	r0, [pc, #560]	@ (800202c <HAL_CAN_GetRxMessage+0x258>)
 8001dfc:	f7ff fa26 	bl	800124c <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d003      	beq.n	8001e0e <HAL_CAN_GetRxMessage+0x3a>
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	f040 8103 	bne.w	8002014 <HAL_CAN_GetRxMessage+0x240>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10e      	bne.n	8001e32 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d116      	bne.n	8001e50 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0f7      	b.n	8002022 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0e8      	b.n	8002022 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	331b      	adds	r3, #27
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0204 	and.w	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	331b      	adds	r3, #27
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0d5b      	lsrs	r3, r3, #21
 8001e7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	331b      	adds	r3, #27
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4413      	add	r3, r2
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	331b      	adds	r3, #27
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0202 	and.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	331b      	adds	r3, #27
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_CAN_GetRxMessage+0x102>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	e00b      	b.n	8001eee <HAL_CAN_GetRxMessage+0x11a>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	331b      	adds	r3, #27
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 020f 	and.w	r2, r3, #15
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	331b      	adds	r3, #27
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0c1b      	lsrs	r3, r3, #16
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0a1a      	lsrs	r2, r3, #8
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0c1a      	lsrs	r2, r3, #16
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	3302      	adds	r3, #2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e1a      	lsrs	r2, r3, #24
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3303      	adds	r3, #3
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	3304      	adds	r3, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0a1a      	lsrs	r2, r3, #8
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	3305      	adds	r3, #5
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0c1a      	lsrs	r2, r3, #16
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3306      	adds	r3, #6
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0e1a      	lsrs	r2, r3, #24
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_CAN_GetRxMessage+0x22c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0220 	orr.w	r2, r2, #32
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	e007      	b.n	8002010 <HAL_CAN_GetRxMessage+0x23c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0220 	orr.w	r2, r2, #32
 800200e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	e006      	b.n	8002022 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	080082e0 	.word	0x080082e0

08002030 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002040:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_CAN_ActivateNotification+0x5c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d904      	bls.n	8002054 <HAL_CAN_ActivateNotification+0x24>
 800204a:	f240 6182 	movw	r1, #1666	@ 0x682
 800204e:	4810      	ldr	r0, [pc, #64]	@ (8002090 <HAL_CAN_ActivateNotification+0x60>)
 8002050:	f7ff f8fc 	bl	800124c <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d002      	beq.n	8002060 <HAL_CAN_ActivateNotification+0x30>
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d109      	bne.n	8002074 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6959      	ldr	r1, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e006      	b.n	8002082 <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	00038f7f 	.word	0x00038f7f
 8002090:	080082e0 	.word	0x080082e0

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	@ (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	@ (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	@ (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	@ 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b07      	cmp	r3, #7
 80021fc:	d00f      	beq.n	800221e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b06      	cmp	r3, #6
 8002202:	d00c      	beq.n	800221e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d009      	beq.n	800221e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d006      	beq.n	800221e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d003      	beq.n	800221e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002216:	2190      	movs	r1, #144	@ 0x90
 8002218:	4804      	ldr	r0, [pc, #16]	@ (800222c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800221a:	f7ff f817 	bl	800124c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ff38 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	08008318 	.word	0x08008318

08002230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d903      	bls.n	8002250 <HAL_NVIC_SetPriority+0x20>
 8002248:	21a8      	movs	r1, #168	@ 0xa8
 800224a:	480e      	ldr	r0, [pc, #56]	@ (8002284 <HAL_NVIC_SetPriority+0x54>)
 800224c:	f7fe fffe 	bl	800124c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	d903      	bls.n	800225e <HAL_NVIC_SetPriority+0x2e>
 8002256:	21a9      	movs	r1, #169	@ 0xa9
 8002258:	480a      	ldr	r0, [pc, #40]	@ (8002284 <HAL_NVIC_SetPriority+0x54>)
 800225a:	f7fe fff7 	bl	800124c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225e:	f7ff ff3d 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002262:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7ff ff8d 	bl	8002188 <NVIC_EncodePriority>
 800226e:	4602      	mov	r2, r0
 8002270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff5c 	bl	8002134 <__NVIC_SetPriority>
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	08008318 	.word	0x08008318

08002288 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da03      	bge.n	80022a2 <HAL_NVIC_EnableIRQ+0x1a>
 800229a:	21bc      	movs	r1, #188	@ 0xbc
 800229c:	4805      	ldr	r0, [pc, #20]	@ (80022b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800229e:	f7fe ffd5 	bl	800124c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff26 	bl	80020f8 <__NVIC_EnableIRQ>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	08008318 	.word	0x08008318

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a38      	ldr	r2, [pc, #224]	@ (80023b4 <HAL_GPIO_Init+0xfc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d023      	beq.n	800231e <HAL_GPIO_Init+0x66>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a37      	ldr	r2, [pc, #220]	@ (80023b8 <HAL_GPIO_Init+0x100>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <HAL_GPIO_Init+0x66>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a36      	ldr	r2, [pc, #216]	@ (80023bc <HAL_GPIO_Init+0x104>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01b      	beq.n	800231e <HAL_GPIO_Init+0x66>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a35      	ldr	r2, [pc, #212]	@ (80023c0 <HAL_GPIO_Init+0x108>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d017      	beq.n	800231e <HAL_GPIO_Init+0x66>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a34      	ldr	r2, [pc, #208]	@ (80023c4 <HAL_GPIO_Init+0x10c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x66>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a33      	ldr	r2, [pc, #204]	@ (80023c8 <HAL_GPIO_Init+0x110>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00f      	beq.n	800231e <HAL_GPIO_Init+0x66>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a32      	ldr	r2, [pc, #200]	@ (80023cc <HAL_GPIO_Init+0x114>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00b      	beq.n	800231e <HAL_GPIO_Init+0x66>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <HAL_GPIO_Init+0x118>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x66>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a30      	ldr	r2, [pc, #192]	@ (80023d4 <HAL_GPIO_Init+0x11c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x66>
 8002316:	21ac      	movs	r1, #172	@ 0xac
 8002318:	482f      	ldr	r0, [pc, #188]	@ (80023d8 <HAL_GPIO_Init+0x120>)
 800231a:	f7fe ff97 	bl	800124c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_GPIO_Init+0x7a>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002330:	d303      	bcc.n	800233a <HAL_GPIO_Init+0x82>
 8002332:	21ad      	movs	r1, #173	@ 0xad
 8002334:	4828      	ldr	r0, [pc, #160]	@ (80023d8 <HAL_GPIO_Init+0x120>)
 8002336:	f7fe ff89 	bl	800124c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d035      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d031      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b11      	cmp	r3, #17
 8002350:	d02d      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d029      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b12      	cmp	r3, #18
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800236a:	d020      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002374:	d01b      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 800237e:	d016      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002388:	d011      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002392:	d00c      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0xf6>
 80023a6:	21ae      	movs	r1, #174	@ 0xae
 80023a8:	480b      	ldr	r0, [pc, #44]	@ (80023d8 <HAL_GPIO_Init+0x120>)
 80023aa:	f7fe ff4f 	bl	800124c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e241      	b.n	8002838 <HAL_GPIO_Init+0x580>
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021800 	.word	0x40021800
 80023d0:	40021c00 	.word	0x40021c00
 80023d4:	40022000 	.word	0x40022000
 80023d8:	08008354 	.word	0x08008354
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 821c 	bne.w	8002832 <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d144      	bne.n	800249c <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00f      	beq.n	800243a <HAL_GPIO_Init+0x182>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d00b      	beq.n	800243a <HAL_GPIO_Init+0x182>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d007      	beq.n	800243a <HAL_GPIO_Init+0x182>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x182>
 8002432:	21c0      	movs	r1, #192	@ 0xc0
 8002434:	4881      	ldr	r0, [pc, #516]	@ (800263c <HAL_GPIO_Init+0x384>)
 8002436:	f7fe ff09 	bl	800124c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d027      	beq.n	80024f8 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_GPIO_Init+0x210>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x210>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x210>
 80024c0:	21d1      	movs	r1, #209	@ 0xd1
 80024c2:	485e      	ldr	r0, [pc, #376]	@ (800263c <HAL_GPIO_Init+0x384>)
 80024c4:	f7fe fec2 	bl	800124c <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	f040 80c1 	bne.w	8002688 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8098 	beq.w	8002640 <HAL_GPIO_Init+0x388>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b09      	cmp	r3, #9
 8002516:	f000 8093 	beq.w	8002640 <HAL_GPIO_Init+0x388>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 808e 	beq.w	8002640 <HAL_GPIO_Init+0x388>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8089 	beq.w	8002640 <HAL_GPIO_Init+0x388>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8084 	beq.w	8002640 <HAL_GPIO_Init+0x388>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d07f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d07b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d077      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d073      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d06f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d06b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d067      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d063      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d05f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d05b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d057      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b05      	cmp	r3, #5
 8002596:	d053      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b09      	cmp	r3, #9
 800259e:	d04f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d04b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b09      	cmp	r3, #9
 80025ae:	d047      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d043      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d03f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d03b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d037      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d033      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d02f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d02b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d027      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b0a      	cmp	r3, #10
 80025f6:	d023      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b0a      	cmp	r3, #10
 80025fe:	d01f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b0b      	cmp	r3, #11
 8002606:	d01b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d013      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b0d      	cmp	r3, #13
 800261e:	d00f      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d00b      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d007      	beq.n	8002640 <HAL_GPIO_Init+0x388>
 8002630:	21de      	movs	r1, #222	@ 0xde
 8002632:	4802      	ldr	r0, [pc, #8]	@ (800263c <HAL_GPIO_Init+0x384>)
 8002634:	f7fe fe0a 	bl	800124c <assert_failed>
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x388>
 800263a:	bf00      	nop
 800263c:	08008354 	.word	0x08008354
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80b4 	beq.w	8002832 <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b5f      	ldr	r3, [pc, #380]	@ (800284c <HAL_GPIO_Init+0x594>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a5e      	ldr	r2, [pc, #376]	@ (800284c <HAL_GPIO_Init+0x594>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b5c      	ldr	r3, [pc, #368]	@ (800284c <HAL_GPIO_Init+0x594>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002850 <HAL_GPIO_Init+0x598>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	@ (8002854 <HAL_GPIO_Init+0x59c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02b      	beq.n	800276a <HAL_GPIO_Init+0x4b2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	@ (8002858 <HAL_GPIO_Init+0x5a0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x4ae>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_GPIO_Init+0x5a4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x4aa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	@ (8002860 <HAL_GPIO_Init+0x5a8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x4a6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	@ (8002864 <HAL_GPIO_Init+0x5ac>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x4a2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	@ (8002868 <HAL_GPIO_Init+0x5b0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x49e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	@ (800286c <HAL_GPIO_Init+0x5b4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x49a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4a      	ldr	r2, [pc, #296]	@ (8002870 <HAL_GPIO_Init+0x5b8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x496>
 800274a:	2307      	movs	r3, #7
 800274c:	e00e      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 800274e:	2308      	movs	r3, #8
 8002750:	e00c      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 8002752:	2306      	movs	r3, #6
 8002754:	e00a      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 8002756:	2305      	movs	r3, #5
 8002758:	e008      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 800275a:	2304      	movs	r3, #4
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 800275e:	2303      	movs	r3, #3
 8002760:	e004      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 8002762:	2302      	movs	r3, #2
 8002764:	e002      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_GPIO_Init+0x4b4>
 800276a:	2300      	movs	r3, #0
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	f002 0203 	and.w	r2, r2, #3
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	4093      	lsls	r3, r2
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800277c:	4934      	ldr	r1, [pc, #208]	@ (8002850 <HAL_GPIO_Init+0x598>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	089b      	lsrs	r3, r3, #2
 8002782:	3302      	adds	r3, #2
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278a:	4b3a      	ldr	r3, [pc, #232]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ae:	4a31      	ldr	r2, [pc, #196]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d8:	4a26      	ldr	r2, [pc, #152]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002802:	4a1c      	ldr	r2, [pc, #112]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002808:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800282c:	4a11      	ldr	r2, [pc, #68]	@ (8002874 <HAL_GPIO_Init+0x5bc>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	f67f adce 	bls.w	80023dc <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40013800 	.word	0x40013800
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020800 	.word	0x40020800
 8002860:	40020c00 	.word	0x40020c00
 8002864:	40021000 	.word	0x40021000
 8002868:	40021400 	.word	0x40021400
 800286c:	40021800 	.word	0x40021800
 8002870:	40021c00 	.word	0x40021c00
 8002874:	40013c00 	.word	0x40013c00

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <HAL_GPIO_WritePin+0x20>
 800288e:	f240 119d 	movw	r1, #413	@ 0x19d
 8002892:	480e      	ldr	r0, [pc, #56]	@ (80028cc <HAL_GPIO_WritePin+0x54>)
 8002894:	f7fe fcda 	bl	800124c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <HAL_GPIO_WritePin+0x36>
 800289e:	787b      	ldrb	r3, [r7, #1]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d004      	beq.n	80028ae <HAL_GPIO_WritePin+0x36>
 80028a4:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80028a8:	4808      	ldr	r0, [pc, #32]	@ (80028cc <HAL_GPIO_WritePin+0x54>)
 80028aa:	f7fe fccf 	bl	800124c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80028ae:	787b      	ldrb	r3, [r7, #1]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b4:	887a      	ldrh	r2, [r7, #2]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ba:	e003      	b.n	80028c4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	041a      	lsls	r2, r3, #16
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	08008354 	.word	0x08008354

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1ba      	b.n	8002c58 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a9d      	ldr	r2, [pc, #628]	@ (8002b5c <HAL_I2C_Init+0x28c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00e      	beq.n	800290a <HAL_I2C_Init+0x3a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a9b      	ldr	r2, [pc, #620]	@ (8002b60 <HAL_I2C_Init+0x290>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_I2C_Init+0x3a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a9a      	ldr	r2, [pc, #616]	@ (8002b64 <HAL_I2C_Init+0x294>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_I2C_Init+0x3a>
 8002900:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8002904:	4898      	ldr	r0, [pc, #608]	@ (8002b68 <HAL_I2C_Init+0x298>)
 8002906:	f7fe fca1 	bl	800124c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <HAL_I2C_Init+0x4c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4a95      	ldr	r2, [pc, #596]	@ (8002b6c <HAL_I2C_Init+0x29c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d904      	bls.n	8002926 <HAL_I2C_Init+0x56>
 800291c:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8002920:	4891      	ldr	r0, [pc, #580]	@ (8002b68 <HAL_I2C_Init+0x298>)
 8002922:	f7fe fc93 	bl	800124c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_I2C_Init+0x72>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002936:	d004      	beq.n	8002942 <HAL_I2C_Init+0x72>
 8002938:	f240 11cb 	movw	r1, #459	@ 0x1cb
 800293c:	488a      	ldr	r0, [pc, #552]	@ (8002b68 <HAL_I2C_Init+0x298>)
 800293e:	f7fe fc85 	bl	800124c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800294a:	d304      	bcc.n	8002956 <HAL_I2C_Init+0x86>
 800294c:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8002950:	4885      	ldr	r0, [pc, #532]	@ (8002b68 <HAL_I2C_Init+0x298>)
 8002952:	f7fe fc7b 	bl	800124c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800295e:	d009      	beq.n	8002974 <HAL_I2C_Init+0xa4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002968:	d004      	beq.n	8002974 <HAL_I2C_Init+0xa4>
 800296a:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800296e:	487e      	ldr	r0, [pc, #504]	@ (8002b68 <HAL_I2C_Init+0x298>)
 8002970:	f7fe fc6c 	bl	800124c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_I2C_Init+0xbe>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d004      	beq.n	800298e <HAL_I2C_Init+0xbe>
 8002984:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8002988:	4877      	ldr	r0, [pc, #476]	@ (8002b68 <HAL_I2C_Init+0x298>)
 800298a:	f7fe fc5f 	bl	800124c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_I2C_Init+0xd4>
 800299a:	f240 11cf 	movw	r1, #463	@ 0x1cf
 800299e:	4872      	ldr	r0, [pc, #456]	@ (8002b68 <HAL_I2C_Init+0x298>)
 80029a0:	f7fe fc54 	bl	800124c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_I2C_Init+0xee>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2b40      	cmp	r3, #64	@ 0x40
 80029b2:	d004      	beq.n	80029be <HAL_I2C_Init+0xee>
 80029b4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80029b8:	486b      	ldr	r0, [pc, #428]	@ (8002b68 <HAL_I2C_Init+0x298>)
 80029ba:	f7fe fc47 	bl	800124c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_I2C_Init+0x108>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b80      	cmp	r3, #128	@ 0x80
 80029cc:	d004      	beq.n	80029d8 <HAL_I2C_Init+0x108>
 80029ce:	f240 11d1 	movw	r1, #465	@ 0x1d1
 80029d2:	4865      	ldr	r0, [pc, #404]	@ (8002b68 <HAL_I2C_Init+0x298>)
 80029d4:	f7fe fc3a 	bl	800124c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7fe fcbf 	bl	8001370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2224      	movs	r2, #36	@ 0x24
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a18:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a28:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a2a:	f001 f9ff 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8002a2e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a4e      	ldr	r2, [pc, #312]	@ (8002b70 <HAL_I2C_Init+0x2a0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d807      	bhi.n	8002a4a <HAL_I2C_Init+0x17a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b74 <HAL_I2C_Init+0x2a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	bf94      	ite	ls
 8002a42:	2301      	movls	r3, #1
 8002a44:	2300      	movhi	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	e006      	b.n	8002a58 <HAL_I2C_Init+0x188>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b78 <HAL_I2C_Init+0x2a8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	bf94      	ite	ls
 8002a52:	2301      	movls	r3, #1
 8002a54:	2300      	movhi	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0fb      	b.n	8002c58 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a46      	ldr	r2, [pc, #280]	@ (8002b7c <HAL_I2C_Init+0x2ac>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	0c9b      	lsrs	r3, r3, #18
 8002a6a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a38      	ldr	r2, [pc, #224]	@ (8002b70 <HAL_I2C_Init+0x2a0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d802      	bhi.n	8002a9a <HAL_I2C_Init+0x1ca>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3301      	adds	r3, #1
 8002a98:	e009      	b.n	8002aae <HAL_I2C_Init+0x1de>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_I2C_Init+0x2b0>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	3301      	adds	r3, #1
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ac0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4929      	ldr	r1, [pc, #164]	@ (8002b70 <HAL_I2C_Init+0x2a0>)
 8002aca:	428b      	cmp	r3, r1
 8002acc:	d819      	bhi.n	8002b02 <HAL_I2C_Init+0x232>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e59      	subs	r1, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002adc:	1c59      	adds	r1, r3, #1
 8002ade:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_I2C_Init+0x22e>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e59      	subs	r1, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	e065      	b.n	8002bca <HAL_I2C_Init+0x2fa>
 8002afe:	2304      	movs	r3, #4
 8002b00:	e063      	b.n	8002bca <HAL_I2C_Init+0x2fa>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d111      	bne.n	8002b2e <HAL_I2C_Init+0x25e>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e58      	subs	r0, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	440b      	add	r3, r1
 8002b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	e012      	b.n	8002b54 <HAL_I2C_Init+0x284>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1e58      	subs	r0, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	0099      	lsls	r1, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_I2C_Init+0x2b4>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e036      	b.n	8002bca <HAL_I2C_Init+0x2fa>
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	40005800 	.word	0x40005800
 8002b64:	40005c00 	.word	0x40005c00
 8002b68:	08008390 	.word	0x08008390
 8002b6c:	00061a80 	.word	0x00061a80
 8002b70:	000186a0 	.word	0x000186a0
 8002b74:	001e847f 	.word	0x001e847f
 8002b78:	003d08ff 	.word	0x003d08ff
 8002b7c:	431bde83 	.word	0x431bde83
 8002b80:	10624dd3 	.word	0x10624dd3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10e      	bne.n	8002baa <HAL_I2C_Init+0x2da>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	440b      	add	r3, r1
 8002b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba8:	e00f      	b.n	8002bca <HAL_I2C_Init+0x2fa>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1e58      	subs	r0, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6859      	ldr	r1, [r3, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	0099      	lsls	r1, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	6809      	ldr	r1, [r1, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bf8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6911      	ldr	r1, [r2, #16]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68d2      	ldr	r2, [r2, #12]
 8002c04:	4311      	orrs	r1, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
 8002c70:	4613      	mov	r3, r2
 8002c72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7fe fcce 	bl	8001614 <HAL_GetTick>
 8002c78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 80e0 	bne.w	8002e48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4970      	ldr	r1, [pc, #448]	@ (8002e54 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f964 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0d3      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2C_Master_Transmit+0x50>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e0cc      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d007      	beq.n	8002cd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2221      	movs	r2, #33	@ 0x21
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	893a      	ldrh	r2, [r7, #8]
 8002d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a50      	ldr	r2, [pc, #320]	@ (8002e58 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f89c 	bl	8002e5c <I2C_MasterRequestWrite>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e08d      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d44:	e066      	b.n	8002e14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	6a39      	ldr	r1, [r7, #32]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fa22 	bl	8003194 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d107      	bne.n	8002d6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06b      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d11b      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x188>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	6a39      	ldr	r1, [r7, #32]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fa19 	bl	8003224 <I2C_WaitOnBTFFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d107      	bne.n	8002e10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e01a      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d194      	bne.n	8002d46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	00100002 	.word	0x00100002
 8002e58:	ffff0000 	.word	0xffff0000

08002e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d006      	beq.n	8002e86 <I2C_MasterRequestWrite+0x2a>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d003      	beq.n	8002e86 <I2C_MasterRequestWrite+0x2a>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e84:	d108      	bne.n	8002e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e00b      	b.n	8002eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	2b12      	cmp	r3, #18
 8002e9e:	d107      	bne.n	8002eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f84f 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed6:	d103      	bne.n	8002ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e035      	b.n	8002f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eec:	d108      	bne.n	8002f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	e01b      	b.n	8002f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	11db      	asrs	r3, r3, #7
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0306 	and.w	r3, r3, #6
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f063 030f 	orn	r3, r3, #15
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	490e      	ldr	r1, [pc, #56]	@ (8002f58 <I2C_MasterRequestWrite+0xfc>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f898 	bl	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e010      	b.n	8002f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4907      	ldr	r1, [pc, #28]	@ (8002f5c <I2C_MasterRequestWrite+0x100>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f888 	bl	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	00010008 	.word	0x00010008
 8002f5c:	00010002 	.word	0x00010002

08002f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	e048      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d044      	beq.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fb4b 	bl	8001614 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d139      	bne.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10d      	bne.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	e00c      	b.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d116      	bne.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e023      	b.n	800304c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10d      	bne.n	800302a <I2C_WaitOnFlagUntilTimeout+0xca>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	43da      	mvns	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	e00c      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	43da      	mvns	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	429a      	cmp	r2, r3
 8003048:	d093      	beq.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003062:	e071      	b.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003072:	d123      	bne.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003082:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800308c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f043 0204 	orr.w	r2, r3, #4
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e067      	b.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d041      	beq.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7fe faa6 	bl	8001614 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d302      	bcc.n	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d136      	bne.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10c      	bne.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e00b      	b.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	43da      	mvns	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e021      	b.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10c      	bne.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e00b      	b.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f af6d 	bne.w	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a0:	e034      	b.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f886 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e034      	b.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d028      	beq.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fa2b 	bl	8001614 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11d      	bne.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	2b80      	cmp	r3, #128	@ 0x80
 80031dc:	d016      	beq.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b80      	cmp	r3, #128	@ 0x80
 8003218:	d1c3      	bne.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003230:	e034      	b.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f83e 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e034      	b.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d028      	beq.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe f9e3 	bl	8001614 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11d      	bne.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d016      	beq.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e007      	b.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d1c3      	bne.n	8003232 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ca:	d11b      	bne.n	8003304 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e318      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d903      	bls.n	8003336 <HAL_RCC_OscConfig+0x22>
 800332e:	21e6      	movs	r1, #230	@ 0xe6
 8003330:	4897      	ldr	r0, [pc, #604]	@ (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003332:	f7fd ff8b 	bl	800124c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8088 	beq.w	8003454 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_RCC_OscConfig+0x54>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003354:	d008      	beq.n	8003368 <HAL_RCC_OscConfig+0x54>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800335e:	d003      	beq.n	8003368 <HAL_RCC_OscConfig+0x54>
 8003360:	21eb      	movs	r1, #235	@ 0xeb
 8003362:	488b      	ldr	r0, [pc, #556]	@ (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003364:	f7fd ff72 	bl	800124c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003368:	4b8a      	ldr	r3, [pc, #552]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b04      	cmp	r3, #4
 8003372:	d00c      	beq.n	800338e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003374:	4b87      	ldr	r3, [pc, #540]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337c:	2b08      	cmp	r3, #8
 800337e:	d112      	bne.n	80033a6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003380:	4b84      	ldr	r3, [pc, #528]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800338c:	d10b      	bne.n	80033a6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338e:	4b81      	ldr	r3, [pc, #516]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d05b      	beq.n	8003452 <HAL_RCC_OscConfig+0x13e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d157      	bne.n	8003452 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e2d8      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0xaa>
 80033b0:	4b78      	ldr	r3, [pc, #480]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a77      	ldr	r2, [pc, #476]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	e01d      	b.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0xce>
 80033c8:	4b72      	ldr	r3, [pc, #456]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a71      	ldr	r2, [pc, #452]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0xe6>
 80033e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6b      	ldr	r2, [pc, #428]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b69      	ldr	r3, [pc, #420]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a68      	ldr	r2, [pc, #416]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80033f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d013      	beq.n	800342a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe f907 	bl	8001614 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340a:	f7fe f903 	bl	8001614 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	@ 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e29d      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341c:	4b5d      	ldr	r3, [pc, #372]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0xf6>
 8003428:	e014      	b.n	8003454 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe f8f3 	bl	8001614 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003432:	f7fe f8ef 	bl	8001614 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	@ 0x64
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e289      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003444:	4b53      	ldr	r3, [pc, #332]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x11e>
 8003450:	e000      	b.n	8003454 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d079      	beq.n	8003554 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_OscConfig+0x166>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d004      	beq.n	800347a <HAL_RCC_OscConfig+0x166>
 8003470:	f240 111d 	movw	r1, #285	@ 0x11d
 8003474:	4846      	ldr	r0, [pc, #280]	@ (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003476:	f7fd fee9 	bl	800124c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b1f      	cmp	r3, #31
 8003480:	d904      	bls.n	800348c <HAL_RCC_OscConfig+0x178>
 8003482:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003486:	4842      	ldr	r0, [pc, #264]	@ (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003488:	f7fd fee0 	bl	800124c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348c:	4b41      	ldr	r3, [pc, #260]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003498:	4b3e      	ldr	r3, [pc, #248]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d11c      	bne.n	80034de <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d116      	bne.n	80034de <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b0:	4b38      	ldr	r3, [pc, #224]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_OscConfig+0x1b4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e247      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	492f      	ldr	r1, [pc, #188]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034dc:	e03a      	b.n	8003554 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d020      	beq.n	8003528 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003598 <HAL_RCC_OscConfig+0x284>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe f892 	bl	8001614 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fe f88e 	bl	8001614 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e228      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003506:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	491c      	ldr	r1, [pc, #112]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
 8003526:	e015      	b.n	8003554 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003528:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_RCC_OscConfig+0x284>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fe f871 	bl	8001614 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7fe f86d 	bl	8001614 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e207      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003548:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_RCC_OscConfig+0x280>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d045      	beq.n	80035ec <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_OscConfig+0x266>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d004      	beq.n	800357a <HAL_RCC_OscConfig+0x266>
 8003570:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003574:	4806      	ldr	r0, [pc, #24]	@ (8003590 <HAL_RCC_OscConfig+0x27c>)
 8003576:	f7fd fe69 	bl	800124c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01e      	beq.n	80035c0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe f844 	bl	8001614 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	e010      	b.n	80035b2 <HAL_RCC_OscConfig+0x29e>
 8003590:	080083c8 	.word	0x080083c8
 8003594:	40023800 	.word	0x40023800
 8003598:	42470000 	.word	0x42470000
 800359c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a0:	f7fe f838 	bl	8001614 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1d2      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	4b5e      	ldr	r3, [pc, #376]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80035b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x28c>
 80035be:	e015      	b.n	80035ec <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003730 <HAL_RCC_OscConfig+0x41c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7fe f825 	bl	8001614 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ce:	f7fe f821 	bl	8001614 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1bb      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	4b52      	ldr	r3, [pc, #328]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80035e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80b0 	beq.w	800375a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_RCC_OscConfig+0x30c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d008      	beq.n	8003620 <HAL_RCC_OscConfig+0x30c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d004      	beq.n	8003620 <HAL_RCC_OscConfig+0x30c>
 8003616:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800361a:	4846      	ldr	r0, [pc, #280]	@ (8003734 <HAL_RCC_OscConfig+0x420>)
 800361c:	f7fd fe16 	bl	800124c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003620:	4b42      	ldr	r3, [pc, #264]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10f      	bne.n	800364c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	4b3e      	ldr	r3, [pc, #248]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	4a3d      	ldr	r2, [pc, #244]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	@ 0x40
 800363c:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003648:	2301      	movs	r3, #1
 800364a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b3a      	ldr	r3, [pc, #232]	@ (8003738 <HAL_RCC_OscConfig+0x424>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d118      	bne.n	800368a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003658:	4b37      	ldr	r3, [pc, #220]	@ (8003738 <HAL_RCC_OscConfig+0x424>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a36      	ldr	r2, [pc, #216]	@ (8003738 <HAL_RCC_OscConfig+0x424>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003664:	f7fd ffd6 	bl	8001614 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366c:	f7fd ffd2 	bl	8001614 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e16c      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b2e      	ldr	r3, [pc, #184]	@ (8003738 <HAL_RCC_OscConfig+0x424>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x38c>
 8003692:	4b26      	ldr	r3, [pc, #152]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	4a25      	ldr	r2, [pc, #148]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	@ 0x70
 800369e:	e01c      	b.n	80036da <HAL_RCC_OscConfig+0x3c6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3ae>
 80036a8:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ac:	4a1f      	ldr	r2, [pc, #124]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b4:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b8:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c0:	e00b      	b.n	80036da <HAL_RCC_OscConfig+0x3c6>
 80036c2:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a19      	ldr	r2, [pc, #100]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ce:	4b17      	ldr	r3, [pc, #92]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	4a16      	ldr	r2, [pc, #88]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d015      	beq.n	800370e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd ff97 	bl	8001614 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fd ff93 	bl	8001614 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e12b      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <HAL_RCC_OscConfig+0x418>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ee      	beq.n	80036ea <HAL_RCC_OscConfig+0x3d6>
 800370c:	e01c      	b.n	8003748 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fd ff81 	bl	8001614 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	e012      	b.n	800373c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fd ff7d 	bl	8001614 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d909      	bls.n	800373c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e115      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470e80 	.word	0x42470e80
 8003734:	080083c8 	.word	0x080083c8
 8003738:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373c:	4b88      	ldr	r3, [pc, #544]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e6      	bne.n	8003716 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374e:	4b84      	ldr	r3, [pc, #528]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	4a83      	ldr	r2, [pc, #524]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 8003754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <HAL_RCC_OscConfig+0x468>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d008      	beq.n	800377c <HAL_RCC_OscConfig+0x468>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d004      	beq.n	800377c <HAL_RCC_OscConfig+0x468>
 8003772:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8003776:	487b      	ldr	r0, [pc, #492]	@ (8003964 <HAL_RCC_OscConfig+0x650>)
 8003778:	f7fd fd68 	bl	800124c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80e8 	beq.w	8003956 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003786:	4b76      	ldr	r3, [pc, #472]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	f000 80a9 	beq.w	80038e6 <HAL_RCC_OscConfig+0x5d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b02      	cmp	r3, #2
 800379a:	f040 808d 	bne.w	80038b8 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_OscConfig+0x4a6>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ae:	d004      	beq.n	80037ba <HAL_RCC_OscConfig+0x4a6>
 80037b0:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 80037b4:	486b      	ldr	r0, [pc, #428]	@ (8003964 <HAL_RCC_OscConfig+0x650>)
 80037b6:	f7fd fd49 	bl	800124c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d903      	bls.n	80037ca <HAL_RCC_OscConfig+0x4b6>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80037c8:	d904      	bls.n	80037d4 <HAL_RCC_OscConfig+0x4c0>
 80037ca:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80037ce:	4865      	ldr	r0, [pc, #404]	@ (8003964 <HAL_RCC_OscConfig+0x650>)
 80037d0:	f7fd fd3c 	bl	800124c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	2b31      	cmp	r3, #49	@ 0x31
 80037da:	d904      	bls.n	80037e6 <HAL_RCC_OscConfig+0x4d2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 80037e4:	d904      	bls.n	80037f0 <HAL_RCC_OscConfig+0x4dc>
 80037e6:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 80037ea:	485e      	ldr	r0, [pc, #376]	@ (8003964 <HAL_RCC_OscConfig+0x650>)
 80037ec:	f7fd fd2e 	bl	800124c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d010      	beq.n	800381a <HAL_RCC_OscConfig+0x506>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d00c      	beq.n	800381a <HAL_RCC_OscConfig+0x506>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	2b06      	cmp	r3, #6
 8003806:	d008      	beq.n	800381a <HAL_RCC_OscConfig+0x506>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	2b08      	cmp	r3, #8
 800380e:	d004      	beq.n	800381a <HAL_RCC_OscConfig+0x506>
 8003810:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8003814:	4853      	ldr	r0, [pc, #332]	@ (8003964 <HAL_RCC_OscConfig+0x650>)
 8003816:	f7fd fd19 	bl	800124c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d903      	bls.n	800382a <HAL_RCC_OscConfig+0x516>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	2b0f      	cmp	r3, #15
 8003828:	d904      	bls.n	8003834 <HAL_RCC_OscConfig+0x520>
 800382a:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800382e:	484d      	ldr	r0, [pc, #308]	@ (8003964 <HAL_RCC_OscConfig+0x650>)
 8003830:	f7fd fd0c 	bl	800124c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b4c      	ldr	r3, [pc, #304]	@ (8003968 <HAL_RCC_OscConfig+0x654>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd feeb 	bl	8001614 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7fd fee7 	bl	8001614 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e081      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003854:	4b42      	ldr	r3, [pc, #264]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	019b      	lsls	r3, r3, #6
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	3b01      	subs	r3, #1
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	4936      	ldr	r1, [pc, #216]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800388a:	4b37      	ldr	r3, [pc, #220]	@ (8003968 <HAL_RCC_OscConfig+0x654>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fd fec0 	bl	8001614 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x596>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003898:	f7fd febc 	bl	8001614 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e056      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x584>
 80038b6:	e04e      	b.n	8003956 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <HAL_RCC_OscConfig+0x654>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7fd fea9 	bl	8001614 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fd fea5 	bl	8001614 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e03f      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d8:	4b21      	ldr	r3, [pc, #132]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5b2>
 80038e4:	e037      	b.n	8003956 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e032      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <HAL_RCC_OscConfig+0x64c>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d028      	beq.n	8003952 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d121      	bne.n	8003952 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d11a      	bne.n	8003952 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003922:	4013      	ands	r3, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003928:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392a:	4293      	cmp	r3, r2
 800392c:	d111      	bne.n	8003952 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x642>
#endif
        {
          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	080083c8 	.word	0x080083c8
 8003968:	42470060 	.word	0x42470060

0800396c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e174      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_RCC_ClockConfig+0x24>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b0f      	cmp	r3, #15
 800398e:	d904      	bls.n	800399a <HAL_RCC_ClockConfig+0x2e>
 8003990:	f240 215a 	movw	r1, #602	@ 0x25a
 8003994:	487b      	ldr	r0, [pc, #492]	@ (8003b84 <HAL_RCC_ClockConfig+0x218>)
 8003996:	f7fd fc59 	bl	800124c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d019      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d016      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d010      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d00d      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d007      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b07      	cmp	r3, #7
 80039c8:	d004      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x68>
 80039ca:	f240 215b 	movw	r1, #603	@ 0x25b
 80039ce:	486d      	ldr	r0, [pc, #436]	@ (8003b84 <HAL_RCC_ClockConfig+0x218>)
 80039d0:	f7fd fc3c 	bl	800124c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b88 <HAL_RCC_ClockConfig+0x21c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d90c      	bls.n	80039fc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b69      	ldr	r3, [pc, #420]	@ (8003b88 <HAL_RCC_ClockConfig+0x21c>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b67      	ldr	r3, [pc, #412]	@ (8003b88 <HAL_RCC_ClockConfig+0x21c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e136      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d049      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b5d      	ldr	r3, [pc, #372]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a5c      	ldr	r2, [pc, #368]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b57      	ldr	r3, [pc, #348]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a56      	ldr	r2, [pc, #344]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d024      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b80      	cmp	r3, #128	@ 0x80
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b90      	cmp	r3, #144	@ 0x90
 8003a4e:	d01c      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a56:	d018      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2bb0      	cmp	r3, #176	@ 0xb0
 8003a5e:	d014      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a66:	d010      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2bd0      	cmp	r3, #208	@ 0xd0
 8003a6e:	d00c      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2be0      	cmp	r3, #224	@ 0xe0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a7e:	d004      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x11e>
 8003a80:	f240 217e 	movw	r1, #638	@ 0x27e
 8003a84:	483f      	ldr	r0, [pc, #252]	@ (8003b84 <HAL_RCC_ClockConfig+0x218>)
 8003a86:	f7fd fbe1 	bl	800124c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8a:	4b40      	ldr	r3, [pc, #256]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	493d      	ldr	r1, [pc, #244]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d059      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d010      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d004      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
 8003ac8:	f240 2185 	movw	r1, #645	@ 0x285
 8003acc:	482d      	ldr	r0, [pc, #180]	@ (8003b84 <HAL_RCC_ClockConfig+0x218>)
 8003ace:	f7fd fbbd 	bl	800124c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b2c      	ldr	r3, [pc, #176]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d119      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0bf      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b24      	ldr	r3, [pc, #144]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0af      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0a7      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4919      	ldr	r1, [pc, #100]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7fd fd72 	bl	8001614 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fd fd6e 	bl	8001614 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e08f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <HAL_RCC_ClockConfig+0x220>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b88 <HAL_RCC_ClockConfig+0x21c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d212      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b07      	ldr	r3, [pc, #28]	@ (8003b88 <HAL_RCC_ClockConfig+0x21c>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b05      	ldr	r3, [pc, #20]	@ (8003b88 <HAL_RCC_ClockConfig+0x21c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d007      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e072      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2fe>
 8003b84:	080083c8 	.word	0x080083c8
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d025      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d018      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x26a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bac:	d013      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x26a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x26a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x26a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8003bca:	d004      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x26a>
 8003bcc:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8003bd0:	4828      	ldr	r0, [pc, #160]	@ (8003c74 <HAL_RCC_ClockConfig+0x308>)
 8003bd2:	f7fd fb3b 	bl	800124c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd6:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <HAL_RCC_ClockConfig+0x30c>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	4925      	ldr	r1, [pc, #148]	@ (8003c78 <HAL_RCC_ClockConfig+0x30c>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d026      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d018      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2c2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c04:	d013      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2c2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c0e:	d00e      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2c2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2c2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8003c22:	d004      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x2c2>
 8003c24:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8003c28:	4812      	ldr	r0, [pc, #72]	@ (8003c74 <HAL_RCC_ClockConfig+0x308>)
 8003c2a:	f7fd fb0f 	bl	800124c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_RCC_ClockConfig+0x30c>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	@ (8003c78 <HAL_RCC_ClockConfig+0x30c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f821 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_RCC_ClockConfig+0x30c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	@ (8003c7c <HAL_RCC_ClockConfig+0x310>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_RCC_ClockConfig+0x314>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x318>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fbcc 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	080083c8 	.word	0x080083c8
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	080084f8 	.word	0x080084f8
 8003c80:	20000000 	.word	0x20000000
 8003c84:	20000004 	.word	0x20000004

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b090      	sub	sp, #64	@ 0x40
 8003c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c94:	2300      	movs	r3, #0
 8003c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c98:	2300      	movs	r3, #0
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca0:	4b59      	ldr	r3, [pc, #356]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	f200 80a1 	bhi.w	8003df4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x34>
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cba:	e09b      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b53      	ldr	r3, [pc, #332]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003cc0:	e09b      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc2:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cc6:	e098      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d028      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b4a      	ldr	r3, [pc, #296]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cf4:	fb03 f201 	mul.w	r2, r3, r1
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	fb00 f303 	mul.w	r3, r0, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	4a43      	ldr	r2, [pc, #268]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d02:	fba0 1202 	umull	r1, r2, r0, r2
 8003d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d08:	460a      	mov	r2, r1
 8003d0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d0e:	4413      	add	r3, r2
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d14:	2200      	movs	r2, #0
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	61fa      	str	r2, [r7, #28]
 8003d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d22:	f7fc fd59 	bl	80007d8 <__aeabi_uldivmod>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2e:	e053      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d30:	4b35      	ldr	r3, [pc, #212]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	2200      	movs	r2, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	617a      	str	r2, [r7, #20]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d42:	f04f 0b00 	mov.w	fp, #0
 8003d46:	4652      	mov	r2, sl
 8003d48:	465b      	mov	r3, fp
 8003d4a:	f04f 0000 	mov.w	r0, #0
 8003d4e:	f04f 0100 	mov.w	r1, #0
 8003d52:	0159      	lsls	r1, r3, #5
 8003d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d58:	0150      	lsls	r0, r2, #5
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8003d62:	eb63 090b 	sbc.w	r9, r3, fp
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	00eb      	lsls	r3, r5, #3
 8003d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d90:	00e2      	lsls	r2, r4, #3
 8003d92:	4614      	mov	r4, r2
 8003d94:	461d      	mov	r5, r3
 8003d96:	eb14 030a 	adds.w	r3, r4, sl
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	eb45 030b 	adc.w	r3, r5, fp
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dae:	4629      	mov	r1, r5
 8003db0:	028b      	lsls	r3, r1, #10
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db8:	4621      	mov	r1, r4
 8003dba:	028a      	lsls	r2, r1, #10
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	60fa      	str	r2, [r7, #12]
 8003dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dcc:	f7fc fd04 	bl	80007d8 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	3301      	adds	r3, #1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3740      	adds	r7, #64	@ 0x40
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	00f42400 	.word	0x00f42400
 8003e10:	017d7840 	.word	0x017d7840

08003e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e18:	4b03      	ldr	r3, [pc, #12]	@ (8003e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000000 	.word	0x20000000

08003e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e30:	f7ff fff0 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	0a9b      	lsrs	r3, r3, #10
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4903      	ldr	r1, [pc, #12]	@ (8003e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	08008508 	.word	0x08008508

08003e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e58:	f7ff ffdc 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	0b5b      	lsrs	r3, r3, #13
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4903      	ldr	r1, [pc, #12]	@ (8003e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08008508 	.word	0x08008508

08003e7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	220f      	movs	r2, #15
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e8c:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0203 	and.w	r2, r3, #3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003eb0:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ebe:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <HAL_RCC_GetClockConfig+0x60>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0207 	and.w	r2, r3, #7
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	601a      	str	r2, [r3, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40023c00 	.word	0x40023c00

08003ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0ed      	b.n	80040ce <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a78      	ldr	r2, [pc, #480]	@ (80040d8 <HAL_TIM_Base_Init+0x1f8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d045      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f04:	d040      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a74      	ldr	r2, [pc, #464]	@ (80040dc <HAL_TIM_Base_Init+0x1fc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d03b      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a72      	ldr	r2, [pc, #456]	@ (80040e0 <HAL_TIM_Base_Init+0x200>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d036      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a71      	ldr	r2, [pc, #452]	@ (80040e4 <HAL_TIM_Base_Init+0x204>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d031      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6f      	ldr	r2, [pc, #444]	@ (80040e8 <HAL_TIM_Base_Init+0x208>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d02c      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6e      	ldr	r2, [pc, #440]	@ (80040ec <HAL_TIM_Base_Init+0x20c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d027      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6c      	ldr	r2, [pc, #432]	@ (80040f0 <HAL_TIM_Base_Init+0x210>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6b      	ldr	r2, [pc, #428]	@ (80040f4 <HAL_TIM_Base_Init+0x214>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01d      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a69      	ldr	r2, [pc, #420]	@ (80040f8 <HAL_TIM_Base_Init+0x218>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a68      	ldr	r2, [pc, #416]	@ (80040fc <HAL_TIM_Base_Init+0x21c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a66      	ldr	r2, [pc, #408]	@ (8004100 <HAL_TIM_Base_Init+0x220>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a65      	ldr	r2, [pc, #404]	@ (8004104 <HAL_TIM_Base_Init+0x224>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a63      	ldr	r2, [pc, #396]	@ (8004108 <HAL_TIM_Base_Init+0x228>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_Base_Init+0xa8>
 8003f7e:	f240 1113 	movw	r1, #275	@ 0x113
 8003f82:	4862      	ldr	r0, [pc, #392]	@ (800410c <HAL_TIM_Base_Init+0x22c>)
 8003f84:	f7fd f962 	bl	800124c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d014      	beq.n	8003fba <HAL_TIM_Base_Init+0xda>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d010      	beq.n	8003fba <HAL_TIM_Base_Init+0xda>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d00c      	beq.n	8003fba <HAL_TIM_Base_Init+0xda>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b40      	cmp	r3, #64	@ 0x40
 8003fa6:	d008      	beq.n	8003fba <HAL_TIM_Base_Init+0xda>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b60      	cmp	r3, #96	@ 0x60
 8003fae:	d004      	beq.n	8003fba <HAL_TIM_Base_Init+0xda>
 8003fb0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003fb4:	4855      	ldr	r0, [pc, #340]	@ (800410c <HAL_TIM_Base_Init+0x22c>)
 8003fb6:	f7fd f949 	bl	800124c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIM_Base_Init+0x100>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIM_Base_Init+0x100>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_Base_Init+0x100>
 8003fd6:	f240 1115 	movw	r1, #277	@ 0x115
 8003fda:	484c      	ldr	r0, [pc, #304]	@ (800410c <HAL_TIM_Base_Init+0x22c>)
 8003fdc:	f7fd f936 	bl	800124c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Init+0x114>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	@ (80040e4 <HAL_TIM_Base_Init+0x204>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_Base_Init+0x124>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e00e      	b.n	8004022 <HAL_TIM_Base_Init+0x142>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <HAL_TIM_Base_Init+0x13a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004014:	d201      	bcs.n	800401a <HAL_TIM_Base_Init+0x13a>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_TIM_Base_Init+0x13c>
 800401a:	2300      	movs	r3, #0
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_TIM_Base_Init+0x150>
 8004026:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800402a:	4838      	ldr	r0, [pc, #224]	@ (800410c <HAL_TIM_Base_Init+0x22c>)
 800402c:	f7fd f90e 	bl	800124c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_TIM_Base_Init+0x16a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b80      	cmp	r3, #128	@ 0x80
 800403e:	d004      	beq.n	800404a <HAL_TIM_Base_Init+0x16a>
 8004040:	f240 1117 	movw	r1, #279	@ 0x117
 8004044:	4831      	ldr	r0, [pc, #196]	@ (800410c <HAL_TIM_Base_Init+0x22c>)
 8004046:	f7fd f901 	bl	800124c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f856 	bl	8004110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f000 fa32 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40001000 	.word	0x40001000
 80040ec:	40001400 	.word	0x40001400
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40001800 	.word	0x40001800
 8004104:	40001c00 	.word	0x40001c00
 8004108:	40002000 	.word	0x40002000
 800410c:	08008400 	.word	0x08008400

08004110 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a51      	ldr	r2, [pc, #324]	@ (8004278 <HAL_TIM_Base_Start_IT+0x154>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d045      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413e:	d040      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a4d      	ldr	r2, [pc, #308]	@ (800427c <HAL_TIM_Base_Start_IT+0x158>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d03b      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4c      	ldr	r2, [pc, #304]	@ (8004280 <HAL_TIM_Base_Start_IT+0x15c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d036      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a4a      	ldr	r2, [pc, #296]	@ (8004284 <HAL_TIM_Base_Start_IT+0x160>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d031      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a49      	ldr	r2, [pc, #292]	@ (8004288 <HAL_TIM_Base_Start_IT+0x164>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d02c      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a47      	ldr	r2, [pc, #284]	@ (800428c <HAL_TIM_Base_Start_IT+0x168>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d027      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a46      	ldr	r2, [pc, #280]	@ (8004290 <HAL_TIM_Base_Start_IT+0x16c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a44      	ldr	r2, [pc, #272]	@ (8004294 <HAL_TIM_Base_Start_IT+0x170>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01d      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a43      	ldr	r2, [pc, #268]	@ (8004298 <HAL_TIM_Base_Start_IT+0x174>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a41      	ldr	r2, [pc, #260]	@ (800429c <HAL_TIM_Base_Start_IT+0x178>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a40      	ldr	r2, [pc, #256]	@ (80042a0 <HAL_TIM_Base_Start_IT+0x17c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a3e      	ldr	r2, [pc, #248]	@ (80042a4 <HAL_TIM_Base_Start_IT+0x180>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a3d      	ldr	r2, [pc, #244]	@ (80042a8 <HAL_TIM_Base_Start_IT+0x184>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0x9e>
 80041b8:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80041bc:	483b      	ldr	r0, [pc, #236]	@ (80042ac <HAL_TIM_Base_Start_IT+0x188>)
 80041be:	f7fd f845 	bl	800124c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e04e      	b.n	8004270 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a22      	ldr	r2, [pc, #136]	@ (8004278 <HAL_TIM_Base_Start_IT+0x154>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d022      	beq.n	800423a <HAL_TIM_Base_Start_IT+0x116>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041fc:	d01d      	beq.n	800423a <HAL_TIM_Base_Start_IT+0x116>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1e      	ldr	r2, [pc, #120]	@ (800427c <HAL_TIM_Base_Start_IT+0x158>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d018      	beq.n	800423a <HAL_TIM_Base_Start_IT+0x116>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1c      	ldr	r2, [pc, #112]	@ (8004280 <HAL_TIM_Base_Start_IT+0x15c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_TIM_Base_Start_IT+0x116>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1b      	ldr	r2, [pc, #108]	@ (8004284 <HAL_TIM_Base_Start_IT+0x160>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_TIM_Base_Start_IT+0x116>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <HAL_TIM_Base_Start_IT+0x16c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_TIM_Base_Start_IT+0x116>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1a      	ldr	r2, [pc, #104]	@ (8004294 <HAL_TIM_Base_Start_IT+0x170>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIM_Base_Start_IT+0x116>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1a      	ldr	r2, [pc, #104]	@ (80042a0 <HAL_TIM_Base_Start_IT+0x17c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d111      	bne.n	800425e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b06      	cmp	r3, #6
 800424a:	d010      	beq.n	800426e <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425c:	e007      	b.n	800426e <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40001000 	.word	0x40001000
 800428c:	40001400 	.word	0x40001400
 8004290:	40010400 	.word	0x40010400
 8004294:	40014000 	.word	0x40014000
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800
 80042a0:	40001800 	.word	0x40001800
 80042a4:	40001c00 	.word	0x40001c00
 80042a8:	40002000 	.word	0x40002000
 80042ac:	08008400 	.word	0x08008400

080042b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d020      	beq.n	8004314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0202 	mvn.w	r2, #2
 80042e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8d2 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8c4 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8d5 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d020      	beq.n	8004360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01b      	beq.n	8004360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0204 	mvn.w	r2, #4
 8004330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8ac 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f89e 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8af 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d020      	beq.n	80043ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0208 	mvn.w	r2, #8
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2204      	movs	r2, #4
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f886 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f878 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f889 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0210 	mvn.w	r2, #16
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2208      	movs	r2, #8
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f860 	bl	80044a4 <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f852 	bl	8004490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f863 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0201 	mvn.w	r2, #1
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc ff00 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f906 	bl	800464c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f834 	bl	80044cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0220 	mvn.w	r2, #32
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8d8 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a46      	ldr	r2, [pc, #280]	@ (800460c <TIM_Base_SetConfig+0x12c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fe:	d00f      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a43      	ldr	r2, [pc, #268]	@ (8004610 <TIM_Base_SetConfig+0x130>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00b      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a42      	ldr	r2, [pc, #264]	@ (8004614 <TIM_Base_SetConfig+0x134>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a41      	ldr	r2, [pc, #260]	@ (8004618 <TIM_Base_SetConfig+0x138>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a40      	ldr	r2, [pc, #256]	@ (800461c <TIM_Base_SetConfig+0x13c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a35      	ldr	r2, [pc, #212]	@ (800460c <TIM_Base_SetConfig+0x12c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02b      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004540:	d027      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a32      	ldr	r2, [pc, #200]	@ (8004610 <TIM_Base_SetConfig+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d023      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a31      	ldr	r2, [pc, #196]	@ (8004614 <TIM_Base_SetConfig+0x134>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01f      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a30      	ldr	r2, [pc, #192]	@ (8004618 <TIM_Base_SetConfig+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01b      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2f      	ldr	r2, [pc, #188]	@ (800461c <TIM_Base_SetConfig+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d017      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2e      	ldr	r2, [pc, #184]	@ (8004620 <TIM_Base_SetConfig+0x140>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2d      	ldr	r2, [pc, #180]	@ (8004624 <TIM_Base_SetConfig+0x144>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00f      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2c      	ldr	r2, [pc, #176]	@ (8004628 <TIM_Base_SetConfig+0x148>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00b      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2b      	ldr	r2, [pc, #172]	@ (800462c <TIM_Base_SetConfig+0x14c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2a      	ldr	r2, [pc, #168]	@ (8004630 <TIM_Base_SetConfig+0x150>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a29      	ldr	r2, [pc, #164]	@ (8004634 <TIM_Base_SetConfig+0x154>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d108      	bne.n	80045a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a10      	ldr	r2, [pc, #64]	@ (800460c <TIM_Base_SetConfig+0x12c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0xf8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a12      	ldr	r2, [pc, #72]	@ (800461c <TIM_Base_SetConfig+0x13c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d105      	bne.n	80045fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]
  }
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40010000 	.word	0x40010000
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40010400 	.word	0x40010400
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800
 800462c:	40001800 	.word	0x40001800
 8004630:	40001c00 	.word	0x40001c00
 8004634:	40002000 	.word	0x40002000

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f103 0208 	add.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f04f 32ff 	mov.w	r2, #4294967295
 8004678:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f103 0208 	add.w	r2, r3, #8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f103 0208 	add.w	r2, r3, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d103      	bne.n	80046da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e00c      	b.n	80046f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3308      	adds	r3, #8
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e002      	b.n	80046e8 <vListInsert+0x2e>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d2f6      	bcs.n	80046e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	601a      	str	r2, [r3, #0]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6852      	ldr	r2, [r2, #4]
 800474c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d103      	bne.n	8004760 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	@ 0x30
 8004784:	af04      	add	r7, sp, #16
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4618      	mov	r0, r3
 8004796:	f001 f9bb 	bl	8005b10 <pvPortMalloc>
 800479a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047a2:	2058      	movs	r0, #88	@ 0x58
 80047a4:	f001 f9b4 	bl	8005b10 <pvPortMalloc>
 80047a8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80047b0:	2258      	movs	r2, #88	@ 0x58
 80047b2:	2100      	movs	r1, #0
 80047b4:	69f8      	ldr	r0, [r7, #28]
 80047b6:	f003 f843 	bl	8007840 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
 80047c0:	e005      	b.n	80047ce <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f001 fa60 	bl	8005c88 <vPortFree>
 80047c8:	e001      	b.n	80047ce <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	2300      	movs	r3, #0
 80047d8:	9303      	str	r3, [sp, #12]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	9302      	str	r3, [sp, #8]
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f80e 	bl	800480c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80047f0:	69f8      	ldr	r0, [r7, #28]
 80047f2:	f000 f89b 	bl	800492c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80047f6:	2301      	movs	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e002      	b.n	8004802 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004800:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004802:	69bb      	ldr	r3, [r7, #24]
    }
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	461a      	mov	r2, r3
 8004824:	21a5      	movs	r1, #165	@ 0xa5
 8004826:	f003 f80b 	bl	8007840 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004834:	3b01      	subs	r3, #1
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f023 0307 	bic.w	r3, r3, #7
 8004842:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <prvInitialiseNewTask+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01e      	beq.n	80048aa <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800486c:	2300      	movs	r3, #0
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	e012      	b.n	8004898 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	7819      	ldrb	r1, [r3, #0]
 800487a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	3334      	adds	r3, #52	@ 0x34
 8004882:	460a      	mov	r2, r1
 8004884:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3301      	adds	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b09      	cmp	r3, #9
 800489c:	d9e9      	bls.n	8004872 <prvInitialiseNewTask+0x66>
 800489e:	e000      	b.n	80048a2 <prvInitialiseNewTask+0x96>
            {
                break;
 80048a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80048aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d90b      	bls.n	80048c8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
    }
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d901      	bls.n	80048d2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048ce:	2304      	movs	r3, #4
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fedc 	bl	80046a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	3318      	adds	r3, #24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fed7 	bl	80046a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	f1c3 0205 	rsb	r2, r3, #5
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004906:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	69b8      	ldr	r0, [r7, #24]
 800490e:	f000 fe9f 	bl	8005650 <pxPortInitialiseStack>
 8004912:	4602      	mov	r2, r0
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004922:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004924:	bf00      	nop
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af02      	add	r7, sp, #8
 8004932:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004934:	f000 ffc2 	bl	80058bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004938:	4b4f      	ldr	r3, [pc, #316]	@ (8004a78 <prvAddNewTaskToReadyList+0x14c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a4e      	ldr	r2, [pc, #312]	@ (8004a78 <prvAddNewTaskToReadyList+0x14c>)
 8004940:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004942:	4b4e      	ldr	r3, [pc, #312]	@ (8004a7c <prvAddNewTaskToReadyList+0x150>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800494a:	4a4c      	ldr	r2, [pc, #304]	@ (8004a7c <prvAddNewTaskToReadyList+0x150>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004950:	4b49      	ldr	r3, [pc, #292]	@ (8004a78 <prvAddNewTaskToReadyList+0x14c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d110      	bne.n	800497a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004958:	f000 fbec 	bl	8005134 <prvInitialiseTaskLists>
 800495c:	e00d      	b.n	800497a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800495e:	4b48      	ldr	r3, [pc, #288]	@ (8004a80 <prvAddNewTaskToReadyList+0x154>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004966:	4b45      	ldr	r3, [pc, #276]	@ (8004a7c <prvAddNewTaskToReadyList+0x150>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	429a      	cmp	r2, r3
 8004972:	d802      	bhi.n	800497a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004974:	4a41      	ldr	r2, [pc, #260]	@ (8004a7c <prvAddNewTaskToReadyList+0x150>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800497a:	4b42      	ldr	r3, [pc, #264]	@ (8004a84 <prvAddNewTaskToReadyList+0x158>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	4a40      	ldr	r2, [pc, #256]	@ (8004a84 <prvAddNewTaskToReadyList+0x158>)
 8004982:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004984:	4b3f      	ldr	r3, [pc, #252]	@ (8004a84 <prvAddNewTaskToReadyList+0x158>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <prvAddNewTaskToReadyList+0x94>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4618      	mov	r0, r3
 8004996:	f002 fd07 	bl	80073a8 <SEGGER_SYSVIEW_OnTaskCreate>
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	461d      	mov	r5, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461c      	mov	r4, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	1ae3      	subs	r3, r4, r3
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	462b      	mov	r3, r5
 80049bc:	f001 fb28 	bl	8006010 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f002 fd74 	bl	80074b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a88 <prvAddNewTaskToReadyList+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004a88 <prvAddNewTaskToReadyList+0x15c>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049de:	492b      	ldr	r1, [pc, #172]	@ (8004a8c <prvAddNewTaskToReadyList+0x160>)
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	3304      	adds	r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	609a      	str	r2, [r3, #8]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	3204      	adds	r2, #4
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a8c <prvAddNewTaskToReadyList+0x160>)
 8004a1e:	441a      	add	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	615a      	str	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a28:	4918      	ldr	r1, [pc, #96]	@ (8004a8c <prvAddNewTaskToReadyList+0x160>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1c59      	adds	r1, r3, #1
 8004a38:	4814      	ldr	r0, [pc, #80]	@ (8004a8c <prvAddNewTaskToReadyList+0x160>)
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4403      	add	r3, r0
 8004a44:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004a46:	f000 ff6b 	bl	8005920 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <prvAddNewTaskToReadyList+0x154>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00e      	beq.n	8004a70 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <prvAddNewTaskToReadyList+0x150>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d207      	bcs.n	8004a70 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004a60:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <prvAddNewTaskToReadyList+0x164>)
 8004a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bdb0      	pop	{r4, r5, r7, pc}
 8004a78:	2000023c 	.word	0x2000023c
 8004a7c:	20000164 	.word	0x20000164
 8004a80:	20000248 	.word	0x20000248
 8004a84:	20000258 	.word	0x20000258
 8004a88:	20000244 	.word	0x20000244
 8004a8c:	20000168 	.word	0x20000168
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d018      	beq.n	8004ad8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004aa6:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <vTaskDelay+0x64>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <vTaskDelay+0x32>
        __asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	60bb      	str	r3, [r7, #8]
    }
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	e7fd      	b.n	8004ac2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004ac6:	f000 f877 	bl	8004bb8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004aca:	2100      	movs	r1, #0
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fd3f 	bl	8005550 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004ad2:	f000 f87f 	bl	8004bd4 <xTaskResumeAll>
 8004ad6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8004ade:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <vTaskDelay+0x68>)
 8004ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000264 	.word	0x20000264
 8004afc:	e000ed04 	.word	0xe000ed04

08004b00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <vTaskStartScheduler+0x98>)
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2282      	movs	r2, #130	@ 0x82
 8004b12:	4922      	ldr	r1, [pc, #136]	@ (8004b9c <vTaskStartScheduler+0x9c>)
 8004b14:	4822      	ldr	r0, [pc, #136]	@ (8004ba0 <vTaskStartScheduler+0xa0>)
 8004b16:	f7ff fe33 	bl	8004780 <xTaskCreate>
 8004b1a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d124      	bne.n	8004b6c <vTaskStartScheduler+0x6c>
        __asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60bb      	str	r3, [r7, #8]
    }
 8004b34:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004b36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <vTaskStartScheduler+0xa4>)
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba8 <vTaskStartScheduler+0xa8>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b44:	4b19      	ldr	r3, [pc, #100]	@ (8004bac <vTaskStartScheduler+0xac>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004b4a:	4b19      	ldr	r3, [pc, #100]	@ (8004bb0 <vTaskStartScheduler+0xb0>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <vTaskStartScheduler+0x98>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d102      	bne.n	8004b5c <vTaskStartScheduler+0x5c>
 8004b56:	f002 fc0b 	bl	8007370 <SEGGER_SYSVIEW_OnIdle>
 8004b5a:	e004      	b.n	8004b66 <vTaskStartScheduler+0x66>
 8004b5c:	4b14      	ldr	r3, [pc, #80]	@ (8004bb0 <vTaskStartScheduler+0xb0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f002 fc63 	bl	800742c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004b66:	f000 fe05 	bl	8005774 <xPortStartScheduler>
 8004b6a:	e00f      	b.n	8004b8c <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d10b      	bne.n	8004b8c <vTaskStartScheduler+0x8c>
        __asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	607b      	str	r3, [r7, #4]
    }
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004b8c:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <vTaskStartScheduler+0xb4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000260 	.word	0x20000260
 8004b9c:	08008438 	.word	0x08008438
 8004ba0:	08005105 	.word	0x08005105
 8004ba4:	2000025c 	.word	0x2000025c
 8004ba8:	20000248 	.word	0x20000248
 8004bac:	20000240 	.word	0x20000240
 8004bb0:	20000164 	.word	0x20000164
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004bbc:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <vTaskSuspendAll+0x18>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	4a03      	ldr	r2, [pc, #12]	@ (8004bd0 <vTaskSuspendAll+0x18>)
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	20000264 	.word	0x20000264

08004bd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004be2:	4b73      	ldr	r3, [pc, #460]	@ (8004db0 <xTaskResumeAll+0x1dc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10b      	bne.n	8004c02 <xTaskResumeAll+0x2e>
        __asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	607b      	str	r3, [r7, #4]
    }
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	e7fd      	b.n	8004bfe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004c02:	f000 fe5b 	bl	80058bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004c06:	4b6a      	ldr	r3, [pc, #424]	@ (8004db0 <xTaskResumeAll+0x1dc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <xTaskResumeAll+0x1dc>)
 8004c0e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c10:	4b67      	ldr	r3, [pc, #412]	@ (8004db0 <xTaskResumeAll+0x1dc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 80c4 	bne.w	8004da2 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c1a:	4b66      	ldr	r3, [pc, #408]	@ (8004db4 <xTaskResumeAll+0x1e0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80bf 	beq.w	8004da2 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c24:	e08e      	b.n	8004d44 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c26:	4b64      	ldr	r3, [pc, #400]	@ (8004db8 <xTaskResumeAll+0x1e4>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	6a12      	ldr	r2, [r2, #32]
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	69d2      	ldr	r2, [r2, #28]
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3318      	adds	r3, #24
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d103      	bne.n	8004c5c <xTaskResumeAll+0x88>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	68d2      	ldr	r2, [r2, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d103      	bne.n	8004c9a <xTaskResumeAll+0xc6>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	615a      	str	r2, [r3, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1e5a      	subs	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f002 fbff 	bl	80074b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	4b40      	ldr	r3, [pc, #256]	@ (8004dbc <xTaskResumeAll+0x1e8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	4a3e      	ldr	r2, [pc, #248]	@ (8004dbc <xTaskResumeAll+0x1e8>)
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc8:	493d      	ldr	r1, [pc, #244]	@ (8004dc0 <xTaskResumeAll+0x1ec>)
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	3204      	adds	r2, #4
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1d1a      	adds	r2, r3, #4
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc0 <xTaskResumeAll+0x1ec>)
 8004d08:	441a      	add	r2, r3
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	615a      	str	r2, [r3, #20]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d12:	492b      	ldr	r1, [pc, #172]	@ (8004dc0 <xTaskResumeAll+0x1ec>)
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	1c59      	adds	r1, r3, #1
 8004d22:	4827      	ldr	r0, [pc, #156]	@ (8004dc0 <xTaskResumeAll+0x1ec>)
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4403      	add	r3, r0
 8004d2e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	4b23      	ldr	r3, [pc, #140]	@ (8004dc4 <xTaskResumeAll+0x1f0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8004d3e:	4b22      	ldr	r3, [pc, #136]	@ (8004dc8 <xTaskResumeAll+0x1f4>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d44:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <xTaskResumeAll+0x1e4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f af6c 	bne.w	8004c26 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004d54:	f000 fa6c 	bl	8005230 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d58:	4b1c      	ldr	r3, [pc, #112]	@ (8004dcc <xTaskResumeAll+0x1f8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d010      	beq.n	8004d86 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004d64:	f000 f848 	bl	8004df8 <xTaskIncrementTick>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8004d6e:	4b16      	ldr	r3, [pc, #88]	@ (8004dc8 <xTaskResumeAll+0x1f4>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f1      	bne.n	8004d64 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8004d80:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <xTaskResumeAll+0x1f8>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004d86:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <xTaskResumeAll+0x1f4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004d92:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <xTaskResumeAll+0x1fc>)
 8004d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004da2:	f000 fdbd 	bl	8005920 <vPortExitCritical>

    return xAlreadyYielded;
 8004da6:	69bb      	ldr	r3, [r7, #24]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000264 	.word	0x20000264
 8004db4:	2000023c 	.word	0x2000023c
 8004db8:	200001fc 	.word	0x200001fc
 8004dbc:	20000244 	.word	0x20000244
 8004dc0:	20000168 	.word	0x20000168
 8004dc4:	20000164 	.word	0x20000164
 8004dc8:	20000250 	.word	0x20000250
 8004dcc:	2000024c 	.word	0x2000024c
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dda:	f000 fe57 	bl	8005a8c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004de2:	4b04      	ldr	r3, [pc, #16]	@ (8004df4 <xTaskGetTickCountFromISR+0x20>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004de8:	683b      	ldr	r3, [r7, #0]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000240 	.word	0x20000240

08004df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	@ 0x28
 8004dfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e02:	4b80      	ldr	r3, [pc, #512]	@ (8005004 <xTaskIncrementTick+0x20c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 80f1 	bne.w	8004fee <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005008 <xTaskIncrementTick+0x210>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004e14:	4a7c      	ldr	r2, [pc, #496]	@ (8005008 <xTaskIncrementTick+0x210>)
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d121      	bne.n	8004e64 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004e20:	4b7a      	ldr	r3, [pc, #488]	@ (800500c <xTaskIncrementTick+0x214>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <xTaskIncrementTick+0x4a>
        __asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	607b      	str	r3, [r7, #4]
    }
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	e7fd      	b.n	8004e3e <xTaskIncrementTick+0x46>
 8004e42:	4b72      	ldr	r3, [pc, #456]	@ (800500c <xTaskIncrementTick+0x214>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	4b71      	ldr	r3, [pc, #452]	@ (8005010 <xTaskIncrementTick+0x218>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a6f      	ldr	r2, [pc, #444]	@ (800500c <xTaskIncrementTick+0x214>)
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4a6f      	ldr	r2, [pc, #444]	@ (8005010 <xTaskIncrementTick+0x218>)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	4b6f      	ldr	r3, [pc, #444]	@ (8005014 <xTaskIncrementTick+0x21c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	4a6d      	ldr	r2, [pc, #436]	@ (8005014 <xTaskIncrementTick+0x21c>)
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	f000 f9e6 	bl	8005230 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004e64:	4b6c      	ldr	r3, [pc, #432]	@ (8005018 <xTaskIncrementTick+0x220>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6a3a      	ldr	r2, [r7, #32]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f0c0 80aa 	bcc.w	8004fc4 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e70:	4b66      	ldr	r3, [pc, #408]	@ (800500c <xTaskIncrementTick+0x214>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d104      	bne.n	8004e84 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7a:	4b67      	ldr	r3, [pc, #412]	@ (8005018 <xTaskIncrementTick+0x220>)
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	601a      	str	r2, [r3, #0]
                    break;
 8004e82:	e09f      	b.n	8004fc4 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e84:	4b61      	ldr	r3, [pc, #388]	@ (800500c <xTaskIncrementTick+0x214>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d203      	bcs.n	8004ea4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8005018 <xTaskIncrementTick+0x220>)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004ea2:	e08f      	b.n	8004fc4 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	68d2      	ldr	r2, [r2, #12]
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	6892      	ldr	r2, [r2, #8]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d103      	bne.n	8004ed2 <xTaskIncrementTick+0xda>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	615a      	str	r2, [r3, #20]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	1e5a      	subs	r2, r3, #1
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01e      	beq.n	8004f28 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	6a12      	ldr	r2, [r2, #32]
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	69d2      	ldr	r2, [r2, #28]
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d103      	bne.n	8004f18 <xTaskIncrementTick+0x120>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	605a      	str	r2, [r3, #4]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	1e5a      	subs	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f002 fac0 	bl	80074b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	2201      	movs	r2, #1
 8004f36:	409a      	lsls	r2, r3
 8004f38:	4b38      	ldr	r3, [pc, #224]	@ (800501c <xTaskIncrementTick+0x224>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	4a37      	ldr	r2, [pc, #220]	@ (800501c <xTaskIncrementTick+0x224>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f46:	4936      	ldr	r1, [pc, #216]	@ (8005020 <xTaskIncrementTick+0x228>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	3304      	adds	r3, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	3204      	adds	r2, #4
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1d1a      	adds	r2, r3, #4
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4a26      	ldr	r2, [pc, #152]	@ (8005020 <xTaskIncrementTick+0x228>)
 8004f86:	441a      	add	r2, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	615a      	str	r2, [r3, #20]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	4923      	ldr	r1, [pc, #140]	@ (8005020 <xTaskIncrementTick+0x228>)
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	1c59      	adds	r1, r3, #1
 8004fa0:	481f      	ldr	r0, [pc, #124]	@ (8005020 <xTaskIncrementTick+0x228>)
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4403      	add	r3, r0
 8004fac:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8005024 <xTaskIncrementTick+0x22c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	f67f af59 	bls.w	8004e70 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc2:	e755      	b.n	8004e70 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fc4:	4b17      	ldr	r3, [pc, #92]	@ (8005024 <xTaskIncrementTick+0x22c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fca:	4915      	ldr	r1, [pc, #84]	@ (8005020 <xTaskIncrementTick+0x228>)
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d901      	bls.n	8004fe0 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004fe0:	4b11      	ldr	r3, [pc, #68]	@ (8005028 <xTaskIncrementTick+0x230>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fec:	e004      	b.n	8004ff8 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004fee:	4b0f      	ldr	r3, [pc, #60]	@ (800502c <xTaskIncrementTick+0x234>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800502c <xTaskIncrementTick+0x234>)
 8004ff6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3728      	adds	r7, #40	@ 0x28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000264 	.word	0x20000264
 8005008:	20000240 	.word	0x20000240
 800500c:	200001f4 	.word	0x200001f4
 8005010:	200001f8 	.word	0x200001f8
 8005014:	20000254 	.word	0x20000254
 8005018:	2000025c 	.word	0x2000025c
 800501c:	20000244 	.word	0x20000244
 8005020:	20000168 	.word	0x20000168
 8005024:	20000164 	.word	0x20000164
 8005028:	20000250 	.word	0x20000250
 800502c:	2000024c 	.word	0x2000024c

08005030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005036:	4b2d      	ldr	r3, [pc, #180]	@ (80050ec <vTaskSwitchContext+0xbc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800503e:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <vTaskSwitchContext+0xc0>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005044:	e04e      	b.n	80050e4 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8005046:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <vTaskSwitchContext+0xc0>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800504c:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <vTaskSwitchContext+0xc4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	fab3 f383 	clz	r3, r3
 8005058:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800505a:	7afb      	ldrb	r3, [r7, #11]
 800505c:	f1c3 031f 	rsb	r3, r3, #31
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	4925      	ldr	r1, [pc, #148]	@ (80050f8 <vTaskSwitchContext+0xc8>)
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <vTaskSwitchContext+0x5e>
        __asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	607b      	str	r3, [r7, #4]
    }
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <vTaskSwitchContext+0x5a>
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <vTaskSwitchContext+0xc8>)
 800509a:	4413      	add	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	3308      	adds	r3, #8
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d104      	bne.n	80050be <vTaskSwitchContext+0x8e>
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4a0d      	ldr	r2, [pc, #52]	@ (80050fc <vTaskSwitchContext+0xcc>)
 80050c6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80050c8:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <vTaskSwitchContext+0xcc>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <vTaskSwitchContext+0xd0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d102      	bne.n	80050da <vTaskSwitchContext+0xaa>
 80050d4:	f002 f94c 	bl	8007370 <SEGGER_SYSVIEW_OnIdle>
}
 80050d8:	e004      	b.n	80050e4 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <vTaskSwitchContext+0xcc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f002 f9a4 	bl	800742c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80050e4:	bf00      	nop
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000264 	.word	0x20000264
 80050f0:	20000250 	.word	0x20000250
 80050f4:	20000244 	.word	0x20000244
 80050f8:	20000168 	.word	0x20000168
 80050fc:	20000164 	.word	0x20000164
 8005100:	20000260 	.word	0x20000260

08005104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800510c:	f000 f852 	bl	80051b4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005110:	4b06      	ldr	r3, [pc, #24]	@ (800512c <prvIdleTask+0x28>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d9f9      	bls.n	800510c <prvIdleTask+0x8>
            {
                taskYIELD();
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <prvIdleTask+0x2c>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005128:	e7f0      	b.n	800510c <prvIdleTask+0x8>
 800512a:	bf00      	nop
 800512c:	20000168 	.word	0x20000168
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	e00c      	b.n	800515a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <prvInitialiseTaskLists+0x60>)
 800514c:	4413      	add	r3, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fa86 	bl	8004660 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3301      	adds	r3, #1
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d9ef      	bls.n	8005140 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005160:	480d      	ldr	r0, [pc, #52]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005162:	f7ff fa7d 	bl	8004660 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005166:	480d      	ldr	r0, [pc, #52]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005168:	f7ff fa7a 	bl	8004660 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800516c:	480c      	ldr	r0, [pc, #48]	@ (80051a0 <prvInitialiseTaskLists+0x6c>)
 800516e:	f7ff fa77 	bl	8004660 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005172:	480c      	ldr	r0, [pc, #48]	@ (80051a4 <prvInitialiseTaskLists+0x70>)
 8005174:	f7ff fa74 	bl	8004660 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005178:	480b      	ldr	r0, [pc, #44]	@ (80051a8 <prvInitialiseTaskLists+0x74>)
 800517a:	f7ff fa71 	bl	8004660 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <prvInitialiseTaskLists+0x78>)
 8005180:	4a05      	ldr	r2, [pc, #20]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <prvInitialiseTaskLists+0x7c>)
 8005186:	4a05      	ldr	r2, [pc, #20]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000168 	.word	0x20000168
 8005198:	200001cc 	.word	0x200001cc
 800519c:	200001e0 	.word	0x200001e0
 80051a0:	200001fc 	.word	0x200001fc
 80051a4:	20000210 	.word	0x20000210
 80051a8:	20000228 	.word	0x20000228
 80051ac:	200001f4 	.word	0x200001f4
 80051b0:	200001f8 	.word	0x200001f8

080051b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ba:	e019      	b.n	80051f0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80051bc:	f000 fb7e 	bl	80058bc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <prvCheckTasksWaitingTermination+0x50>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff faad 	bl	800472c <uxListRemove>
                --uxCurrentNumberOfTasks;
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051da:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051e4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80051e6:	f000 fb9b 	bl	8005920 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f810 	bl	8005210 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e1      	bne.n	80051bc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000210 	.word	0x20000210
 8005208:	2000023c 	.word	0x2000023c
 800520c:	20000224 	.word	0x20000224

08005210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fd33 	bl	8005c88 <vPortFree>
            vPortFree( pxTCB );
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fd30 	bl	8005c88 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005234:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <prvResetNextTaskUnblockTime+0x30>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d104      	bne.n	8005248 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800523e:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <prvResetNextTaskUnblockTime+0x34>)
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005246:	e005      	b.n	8005254 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005248:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <prvResetNextTaskUnblockTime+0x30>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <prvResetNextTaskUnblockTime+0x34>)
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200001f4 	.word	0x200001f4
 8005264:	2000025c 	.word	0x2000025c

08005268 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <ulTaskGenericNotifyTake+0x2a>
        __asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	613b      	str	r3, [r7, #16]
    }
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8005292:	f000 fb13 	bl	80058bc <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8005296:	4b26      	ldr	r3, [pc, #152]	@ (8005330 <ulTaskGenericNotifyTake+0xc8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	3214      	adds	r2, #20
 800529e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d115      	bne.n	80052d2 <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80052a6:	4b22      	ldr	r3, [pc, #136]	@ (8005330 <ulTaskGenericNotifyTake+0xc8>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	3354      	adds	r3, #84	@ 0x54
 80052b0:	2201      	movs	r2, #1
 80052b2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052ba:	2101      	movs	r1, #1
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f947 	bl	8005550 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80052c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005334 <ulTaskGenericNotifyTake+0xcc>)
 80052c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052d2:	f000 fb25 	bl	8005920 <vPortExitCritical>

        taskENTER_CRITICAL();
 80052d6:	f000 faf1 	bl	80058bc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80052da:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <ulTaskGenericNotifyTake+0xc8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	3214      	adds	r2, #20
 80052e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e6:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d012      	beq.n	8005314 <ulTaskGenericNotifyTake+0xac>
            {
                if( xClearCountOnExit != pdFALSE )
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <ulTaskGenericNotifyTake+0x9c>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80052f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005330 <ulTaskGenericNotifyTake+0xc8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	3214      	adds	r2, #20
 80052fc:	2100      	movs	r1, #0
 80052fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005302:	e007      	b.n	8005314 <ulTaskGenericNotifyTake+0xac>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8005304:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <ulTaskGenericNotifyTake+0xc8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	1e51      	subs	r1, r2, #1
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	3214      	adds	r2, #20
 8005310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005314:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <ulTaskGenericNotifyTake+0xc8>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	3354      	adds	r3, #84	@ 0x54
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005322:	f000 fafd 	bl	8005920 <vPortExitCritical>

        return ulReturn;
 8005326:	697b      	ldr	r3, [r7, #20]
    }
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000164 	.word	0x20000164
 8005334:	e000ed04 	.word	0xe000ed04

08005338 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005338:	b580      	push	{r7, lr}
 800533a:	b090      	sub	sp, #64	@ 0x40
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <vTaskGenericNotifyGiveFromISR+0x2a>
        __asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <vTaskGenericNotifyGiveFromISR+0x48>
        __asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	623b      	str	r3, [r7, #32]
    }
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <vTaskGenericNotifyGiveFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005380:	f000 fb84 	bl	8005a8c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	63fb      	str	r3, [r7, #60]	@ 0x3c

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005388:	f3ef 8211 	mrs	r2, BASEPRI
 800538c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61fa      	str	r2, [r7, #28]
 800539e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80053a0:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80053a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4413      	add	r3, r2
 80053aa:	3354      	adds	r3, #84	@ 0x54
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80053b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4413      	add	r3, r2
 80053b8:	3354      	adds	r3, #84	@ 0x54
 80053ba:	2202      	movs	r2, #2
 80053bc:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80053be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	3214      	adds	r2, #20
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	1c59      	adds	r1, r3, #1
 80053ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	3214      	adds	r2, #20
 80053d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80053d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f040 80a3 	bne.w	8005524 <vTaskGenericNotifyGiveFromISR+0x1ec>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80053de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <vTaskGenericNotifyGiveFromISR+0xc6>
        __asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	617b      	str	r3, [r7, #20]
    }
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <vTaskGenericNotifyGiveFromISR+0xc2>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005538 <vTaskGenericNotifyGiveFromISR+0x200>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d162      	bne.n	80054cc <vTaskGenericNotifyGiveFromISR+0x194>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800540c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005412:	68d2      	ldr	r2, [r2, #12]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800541c:	6892      	ldr	r2, [r2, #8]
 800541e:	605a      	str	r2, [r3, #4]
 8005420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005426:	3304      	adds	r3, #4
 8005428:	429a      	cmp	r2, r3
 800542a:	d103      	bne.n	8005434 <vTaskGenericNotifyGiveFromISR+0xfc>
 800542c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005432:	605a      	str	r2, [r3, #4]
 8005434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005436:	2200      	movs	r2, #0
 8005438:	615a      	str	r2, [r3, #20]
 800543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1e5a      	subs	r2, r3, #1
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005442:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005446:	4618      	mov	r0, r3
 8005448:	f002 f832 	bl	80074b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800544c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	2201      	movs	r2, #1
 8005452:	409a      	lsls	r2, r3
 8005454:	4b39      	ldr	r3, [pc, #228]	@ (800553c <vTaskGenericNotifyGiveFromISR+0x204>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4313      	orrs	r3, r2
 800545a:	4a38      	ldr	r2, [pc, #224]	@ (800553c <vTaskGenericNotifyGiveFromISR+0x204>)
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005462:	4937      	ldr	r1, [pc, #220]	@ (8005540 <vTaskGenericNotifyGiveFromISR+0x208>)
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005478:	609a      	str	r2, [r3, #8]
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005488:	3204      	adds	r2, #4
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4a27      	ldr	r2, [pc, #156]	@ (8005540 <vTaskGenericNotifyGiveFromISR+0x208>)
 80054a2:	441a      	add	r2, r3
 80054a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a6:	615a      	str	r2, [r3, #20]
 80054a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ac:	4924      	ldr	r1, [pc, #144]	@ (8005540 <vTaskGenericNotifyGiveFromISR+0x208>)
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1c59      	adds	r1, r3, #1
 80054bc:	4820      	ldr	r0, [pc, #128]	@ (8005540 <vTaskGenericNotifyGiveFromISR+0x208>)
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4403      	add	r3, r0
 80054c8:	6019      	str	r1, [r3, #0]
 80054ca:	e01b      	b.n	8005504 <vTaskGenericNotifyGiveFromISR+0x1cc>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80054cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005544 <vTaskGenericNotifyGiveFromISR+0x20c>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d6:	61da      	str	r2, [r3, #28]
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054de:	621a      	str	r2, [r3, #32]
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054e6:	3218      	adds	r2, #24
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ec:	f103 0218 	add.w	r2, r3, #24
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f6:	4a13      	ldr	r2, [pc, #76]	@ (8005544 <vTaskGenericNotifyGiveFromISR+0x20c>)
 80054f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80054fa:	4b12      	ldr	r3, [pc, #72]	@ (8005544 <vTaskGenericNotifyGiveFromISR+0x20c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	4a10      	ldr	r2, [pc, #64]	@ (8005544 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8005502:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <vTaskGenericNotifyGiveFromISR+0x210>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	429a      	cmp	r2, r3
 8005510:	d908      	bls.n	8005524 <vTaskGenericNotifyGiveFromISR+0x1ec>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <vTaskGenericNotifyGiveFromISR+0x1e6>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <vTaskGenericNotifyGiveFromISR+0x214>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005526:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800552e:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8005530:	bf00      	nop
 8005532:	3740      	adds	r7, #64	@ 0x40
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20000264 	.word	0x20000264
 800553c:	20000244 	.word	0x20000244
 8005540:	20000168 	.word	0x20000168
 8005544:	200001fc 	.word	0x200001fc
 8005548:	20000164 	.word	0x20000164
 800554c:	20000250 	.word	0x20000250

08005550 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800555a:	4b36      	ldr	r3, [pc, #216]	@ (8005634 <prvAddCurrentTaskToDelayedList+0xe4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005560:	4b35      	ldr	r3, [pc, #212]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f8e0 	bl	800472c <uxListRemove>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005572:	4b31      	ldr	r3, [pc, #196]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	2201      	movs	r2, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43da      	mvns	r2, r3
 8005580:	4b2e      	ldr	r3, [pc, #184]	@ (800563c <prvAddCurrentTaskToDelayedList+0xec>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4013      	ands	r3, r2
 8005586:	4a2d      	ldr	r2, [pc, #180]	@ (800563c <prvAddCurrentTaskToDelayedList+0xec>)
 8005588:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d124      	bne.n	80055dc <prvAddCurrentTaskToDelayedList+0x8c>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d021      	beq.n	80055dc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005598:	4b29      	ldr	r3, [pc, #164]	@ (8005640 <prvAddCurrentTaskToDelayedList+0xf0>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	4b26      	ldr	r3, [pc, #152]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	609a      	str	r2, [r3, #8]
 80055a6:	4b24      	ldr	r3, [pc, #144]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	6892      	ldr	r2, [r2, #8]
 80055ae:	60da      	str	r2, [r3, #12]
 80055b0:	4b21      	ldr	r3, [pc, #132]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	3204      	adds	r2, #4
 80055ba:	605a      	str	r2, [r3, #4]
 80055bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1d1a      	adds	r2, r3, #4
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <prvAddCurrentTaskToDelayedList+0xf0>)
 80055cc:	615a      	str	r2, [r3, #20]
 80055ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005640 <prvAddCurrentTaskToDelayedList+0xf0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <prvAddCurrentTaskToDelayedList+0xf0>)
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80055da:	e026      	b.n	800562a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4413      	add	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055e4:	4b14      	ldr	r3, [pc, #80]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d209      	bcs.n	8005608 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f4:	4b13      	ldr	r3, [pc, #76]	@ (8005644 <prvAddCurrentTaskToDelayedList+0xf4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7ff f85a 	bl	80046ba <vListInsert>
}
 8005606:	e010      	b.n	800562a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005608:	4b0f      	ldr	r3, [pc, #60]	@ (8005648 <prvAddCurrentTaskToDelayedList+0xf8>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <prvAddCurrentTaskToDelayedList+0xe8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f7ff f850 	bl	80046ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800561a:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <prvAddCurrentTaskToDelayedList+0xfc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	429a      	cmp	r2, r3
 8005622:	d202      	bcs.n	800562a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005624:	4a09      	ldr	r2, [pc, #36]	@ (800564c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6013      	str	r3, [r2, #0]
}
 800562a:	bf00      	nop
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000240 	.word	0x20000240
 8005638:	20000164 	.word	0x20000164
 800563c:	20000244 	.word	0x20000244
 8005640:	20000228 	.word	0x20000228
 8005644:	200001f8 	.word	0x200001f8
 8005648:	200001f4 	.word	0x200001f4
 800564c:	2000025c 	.word	0x2000025c

08005650 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b04      	subs	r3, #4
 8005660:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005668:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b04      	subs	r3, #4
 800566e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3b04      	subs	r3, #4
 800567e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005680:	4a0c      	ldr	r2, [pc, #48]	@ (80056b4 <pxPortInitialiseStack+0x64>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b14      	subs	r3, #20
 800568a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b04      	subs	r3, #4
 8005696:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f06f 0202 	mvn.w	r2, #2
 800569e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3b20      	subs	r3, #32
 80056a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80056a6:	68fb      	ldr	r3, [r7, #12]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	080056b9 	.word	0x080056b9

080056b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80056c2:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <prvTaskExitError+0x58>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d00b      	beq.n	80056e4 <prvTaskExitError+0x2c>
        __asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60fb      	str	r3, [r7, #12]
    }
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	e7fd      	b.n	80056e0 <prvTaskExitError+0x28>
        __asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60bb      	str	r3, [r7, #8]
    }
 80056f6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80056f8:	bf00      	nop
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0fc      	beq.n	80056fa <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000010 	.word	0x20000010
	...

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	20000164 	.word	0x20000164
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005748:	4808      	ldr	r0, [pc, #32]	@ (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
 800576a:	0000      	.short	0x0000
 800576c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop

08005774 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <xPortStartScheduler+0x124>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a47      	ldr	r2, [pc, #284]	@ (800589c <xPortStartScheduler+0x128>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10b      	bne.n	800579c <xPortStartScheduler+0x28>
        __asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	613b      	str	r3, [r7, #16]
    }
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800579c:	4b3e      	ldr	r3, [pc, #248]	@ (8005898 <xPortStartScheduler+0x124>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a3f      	ldr	r2, [pc, #252]	@ (80058a0 <xPortStartScheduler+0x12c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10b      	bne.n	80057be <xPortStartScheduler+0x4a>
        __asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60fb      	str	r3, [r7, #12]
    }
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057be:	4b39      	ldr	r3, [pc, #228]	@ (80058a4 <xPortStartScheduler+0x130>)
 80057c0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	22ff      	movs	r2, #255	@ 0xff
 80057ce:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <xPortStartScheduler+0x134>)
 80057e4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057e6:	4b31      	ldr	r3, [pc, #196]	@ (80058ac <xPortStartScheduler+0x138>)
 80057e8:	2207      	movs	r2, #7
 80057ea:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ec:	e009      	b.n	8005802 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80057ee:	4b2f      	ldr	r3, [pc, #188]	@ (80058ac <xPortStartScheduler+0x138>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	4a2d      	ldr	r2, [pc, #180]	@ (80058ac <xPortStartScheduler+0x138>)
 80057f6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b80      	cmp	r3, #128	@ 0x80
 800580c:	d0ef      	beq.n	80057ee <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800580e:	4b27      	ldr	r3, [pc, #156]	@ (80058ac <xPortStartScheduler+0x138>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1c3 0307 	rsb	r3, r3, #7
 8005816:	2b04      	cmp	r3, #4
 8005818:	d00b      	beq.n	8005832 <xPortStartScheduler+0xbe>
        __asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	60bb      	str	r3, [r7, #8]
    }
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005832:	4b1e      	ldr	r3, [pc, #120]	@ (80058ac <xPortStartScheduler+0x138>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	4a1c      	ldr	r2, [pc, #112]	@ (80058ac <xPortStartScheduler+0x138>)
 800583a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800583c:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <xPortStartScheduler+0x138>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005844:	4a19      	ldr	r2, [pc, #100]	@ (80058ac <xPortStartScheduler+0x138>)
 8005846:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	b2da      	uxtb	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005850:	4b17      	ldr	r3, [pc, #92]	@ (80058b0 <xPortStartScheduler+0x13c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a16      	ldr	r2, [pc, #88]	@ (80058b0 <xPortStartScheduler+0x13c>)
 8005856:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800585a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800585c:	4b14      	ldr	r3, [pc, #80]	@ (80058b0 <xPortStartScheduler+0x13c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <xPortStartScheduler+0x13c>)
 8005862:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005866:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005868:	f000 f8e0 	bl	8005a2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800586c:	4b11      	ldr	r3, [pc, #68]	@ (80058b4 <xPortStartScheduler+0x140>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005872:	f000 f8ff 	bl	8005a74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005876:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <xPortStartScheduler+0x144>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a0f      	ldr	r2, [pc, #60]	@ (80058b8 <xPortStartScheduler+0x144>)
 800587c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005880:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005882:	f7ff ff61 	bl	8005748 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005886:	f7ff fbd3 	bl	8005030 <vTaskSwitchContext>
    prvTaskExitError();
 800588a:	f7ff ff15 	bl	80056b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed00 	.word	0xe000ed00
 800589c:	410fc271 	.word	0x410fc271
 80058a0:	410fc270 	.word	0x410fc270
 80058a4:	e000e400 	.word	0xe000e400
 80058a8:	20000268 	.word	0x20000268
 80058ac:	2000026c 	.word	0x2000026c
 80058b0:	e000ed20 	.word	0xe000ed20
 80058b4:	20000010 	.word	0x20000010
 80058b8:	e000ef34 	.word	0xe000ef34

080058bc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
        __asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	607b      	str	r3, [r7, #4]
    }
 80058d4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80058d6:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <vPortEnterCritical+0x5c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005918 <vPortEnterCritical+0x5c>)
 80058de:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80058e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <vPortEnterCritical+0x5c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d110      	bne.n	800590a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058e8:	4b0c      	ldr	r3, [pc, #48]	@ (800591c <vPortEnterCritical+0x60>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <vPortEnterCritical+0x4e>
        __asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	603b      	str	r3, [r7, #0]
    }
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <vPortEnterCritical+0x4a>
    }
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000010 	.word	0x20000010
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005926:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <vPortExitCritical+0x50>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <vPortExitCritical+0x26>
        __asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
    }
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <vPortExitCritical+0x50>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3b01      	subs	r3, #1
 800594c:	4a08      	ldr	r2, [pc, #32]	@ (8005970 <vPortExitCritical+0x50>)
 800594e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005950:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <vPortExitCritical+0x50>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d105      	bne.n	8005964 <vPortExitCritical+0x44>
 8005958:	2300      	movs	r3, #0
 800595a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f383 8811 	msr	BASEPRI, r3
    }
 8005962:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000010 	.word	0x20000010
	...

08005980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005980:	f3ef 8009 	mrs	r0, PSP
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	4b15      	ldr	r3, [pc, #84]	@ (80059e0 <pxCurrentTCBConst>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	f01e 0f10 	tst.w	lr, #16
 8005990:	bf08      	it	eq
 8005992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	6010      	str	r0, [r2, #0]
 800599c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059a4:	f380 8811 	msr	BASEPRI, r0
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f7ff fb3e 	bl	8005030 <vTaskSwitchContext>
 80059b4:	f04f 0000 	mov.w	r0, #0
 80059b8:	f380 8811 	msr	BASEPRI, r0
 80059bc:	bc09      	pop	{r0, r3}
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	6808      	ldr	r0, [r1, #0]
 80059c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	f01e 0f10 	tst.w	lr, #16
 80059ca:	bf08      	it	eq
 80059cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059d0:	f380 8809 	msr	PSP, r0
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	f3af 8000 	nop.w

080059e0 <pxCurrentTCBConst>:
 80059e0:	20000164 	.word	0x20000164
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop

080059e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
        __asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
    }
 8005a00:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005a02:	f7ff f9f9 	bl	8004df8 <xTaskIncrementTick>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a0c:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <SysTick_Handler+0x40>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f383 8811 	msr	BASEPRI, r3
    }
 8005a1e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <vPortSetupTimerInterrupt+0x34>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a36:	4b0b      	ldr	r3, [pc, #44]	@ (8005a64 <vPortSetupTimerInterrupt+0x38>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <vPortSetupTimerInterrupt+0x3c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a0a      	ldr	r2, [pc, #40]	@ (8005a6c <vPortSetupTimerInterrupt+0x40>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	099b      	lsrs	r3, r3, #6
 8005a48:	4a09      	ldr	r2, [pc, #36]	@ (8005a70 <vPortSetupTimerInterrupt+0x44>)
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a4e:	4b04      	ldr	r3, [pc, #16]	@ (8005a60 <vPortSetupTimerInterrupt+0x34>)
 8005a50:	2207      	movs	r2, #7
 8005a52:	601a      	str	r2, [r3, #0]
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	e000e010 	.word	0xe000e010
 8005a64:	e000e018 	.word	0xe000e018
 8005a68:	20000000 	.word	0x20000000
 8005a6c:	10624dd3 	.word	0x10624dd3
 8005a70:	e000e014 	.word	0xe000e014

08005a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005a74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a84 <vPortEnableVFP+0x10>
 8005a78:	6801      	ldr	r1, [r0, #0]
 8005a7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a7e:	6001      	str	r1, [r0, #0]
 8005a80:	4770      	bx	lr
 8005a82:	0000      	.short	0x0000
 8005a84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop

08005a8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005a92:	f3ef 8305 	mrs	r3, IPSR
 8005a96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b0f      	cmp	r3, #15
 8005a9c:	d915      	bls.n	8005aca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a9e:	4a18      	ldr	r2, [pc, #96]	@ (8005b00 <vPortValidateInterruptPriority+0x74>)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005aa8:	4b16      	ldr	r3, [pc, #88]	@ (8005b04 <vPortValidateInterruptPriority+0x78>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	7afa      	ldrb	r2, [r7, #11]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d20b      	bcs.n	8005aca <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	607b      	str	r3, [r7, #4]
    }
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005aca:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <vPortValidateInterruptPriority+0x7c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8005b0c <vPortValidateInterruptPriority+0x80>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d90b      	bls.n	8005af2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	603b      	str	r3, [r7, #0]
    }
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	e7fd      	b.n	8005aee <vPortValidateInterruptPriority+0x62>
    }
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	e000e3f0 	.word	0xe000e3f0
 8005b04:	20000268 	.word	0x20000268
 8005b08:	e000ed0c 	.word	0xe000ed0c
 8005b0c:	2000026c 	.word	0x2000026c

08005b10 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	@ 0x28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005b1c:	f7ff f84c 	bl	8004bb8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005b20:	4b54      	ldr	r3, [pc, #336]	@ (8005c74 <pvPortMalloc+0x164>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005b28:	f000 f90c 	bl	8005d44 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d012      	beq.n	8005b58 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005b32:	2208      	movs	r2, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	43db      	mvns	r3, r3
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d804      	bhi.n	8005b54 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	4413      	add	r3, r2
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	e001      	b.n	8005b58 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	db71      	blt.n	8005c42 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d06e      	beq.n	8005c42 <pvPortMalloc+0x132>
 8005b64:	4b44      	ldr	r3, [pc, #272]	@ (8005c78 <pvPortMalloc+0x168>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d869      	bhi.n	8005c42 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005b6e:	4b43      	ldr	r3, [pc, #268]	@ (8005c7c <pvPortMalloc+0x16c>)
 8005b70:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005b72:	4b42      	ldr	r3, [pc, #264]	@ (8005c7c <pvPortMalloc+0x16c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b78:	e004      	b.n	8005b84 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d903      	bls.n	8005b96 <pvPortMalloc+0x86>
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f1      	bne.n	8005b7a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005b96:	4b37      	ldr	r3, [pc, #220]	@ (8005c74 <pvPortMalloc+0x164>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d050      	beq.n	8005c42 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	4413      	add	r3, r2
 8005ba8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	1ad2      	subs	r2, r2, r3
 8005bba:	2308      	movs	r3, #8
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d920      	bls.n	8005c04 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <pvPortMalloc+0xdc>
        __asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	613b      	str	r3, [r7, #16]
    }
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	e7fd      	b.n	8005be8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bfe:	6978      	ldr	r0, [r7, #20]
 8005c00:	f000 f8fc 	bl	8005dfc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c04:	4b1c      	ldr	r3, [pc, #112]	@ (8005c78 <pvPortMalloc+0x168>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005c78 <pvPortMalloc+0x168>)
 8005c10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c12:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <pvPortMalloc+0x168>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b1a      	ldr	r3, [pc, #104]	@ (8005c80 <pvPortMalloc+0x170>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d203      	bcs.n	8005c26 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c1e:	4b16      	ldr	r3, [pc, #88]	@ (8005c78 <pvPortMalloc+0x168>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a17      	ldr	r2, [pc, #92]	@ (8005c80 <pvPortMalloc+0x170>)
 8005c24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005c38:	4b12      	ldr	r3, [pc, #72]	@ (8005c84 <pvPortMalloc+0x174>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a11      	ldr	r2, [pc, #68]	@ (8005c84 <pvPortMalloc+0x174>)
 8005c40:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005c42:	f7fe ffc7 	bl	8004bd4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <pvPortMalloc+0x158>
        __asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60fb      	str	r3, [r7, #12]
    }
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <pvPortMalloc+0x154>
    return pvReturn;
 8005c68:	69fb      	ldr	r3, [r7, #28]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3728      	adds	r7, #40	@ 0x28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20012e78 	.word	0x20012e78
 8005c78:	20012e7c 	.word	0x20012e7c
 8005c7c:	20012e70 	.word	0x20012e70
 8005c80:	20012e80 	.word	0x20012e80
 8005c84:	20012e84 	.word	0x20012e84

08005c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d04b      	beq.n	8005d32 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	425b      	negs	r3, r3
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	db0b      	blt.n	8005cc8 <vPortFree+0x40>
        __asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
    }
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <vPortFree+0x60>
        __asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60bb      	str	r3, [r7, #8]
    }
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	0fdb      	lsrs	r3, r3, #31
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01c      	beq.n	8005d32 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d118      	bne.n	8005d32 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005d0c:	f7fe ff54 	bl	8004bb8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	4b09      	ldr	r3, [pc, #36]	@ (8005d3c <vPortFree+0xb4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4413      	add	r3, r2
 8005d1a:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <vPortFree+0xb4>)
 8005d1c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d1e:	6938      	ldr	r0, [r7, #16]
 8005d20:	f000 f86c 	bl	8005dfc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005d24:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <vPortFree+0xb8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	4a05      	ldr	r2, [pc, #20]	@ (8005d40 <vPortFree+0xb8>)
 8005d2c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005d2e:	f7fe ff51 	bl	8004bd4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005d32:	bf00      	nop
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20012e7c 	.word	0x20012e7c
 8005d40:	20012e88 	.word	0x20012e88

08005d44 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d4a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005d4e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005d50:	4b25      	ldr	r3, [pc, #148]	@ (8005de8 <prvHeapInit+0xa4>)
 8005d52:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00c      	beq.n	8005d78 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3307      	adds	r3, #7
 8005d62:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0307 	bic.w	r3, r3, #7
 8005d6a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	4a1d      	ldr	r2, [pc, #116]	@ (8005de8 <prvHeapInit+0xa4>)
 8005d74:	4413      	add	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dec <prvHeapInit+0xa8>)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <prvHeapInit+0xa8>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005d90:	2208      	movs	r2, #8
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0307 	bic.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <prvHeapInit+0xac>)
 8005da4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005da6:	4b12      	ldr	r3, [pc, #72]	@ (8005df0 <prvHeapInit+0xac>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005dae:	4b10      	ldr	r3, [pc, #64]	@ (8005df0 <prvHeapInit+0xac>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <prvHeapInit+0xac>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4a08      	ldr	r2, [pc, #32]	@ (8005df4 <prvHeapInit+0xb0>)
 8005dd2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4a07      	ldr	r2, [pc, #28]	@ (8005df8 <prvHeapInit+0xb4>)
 8005dda:	6013      	str	r3, [r2, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	20000270 	.word	0x20000270
 8005dec:	20012e70 	.word	0x20012e70
 8005df0:	20012e78 	.word	0x20012e78
 8005df4:	20012e80 	.word	0x20012e80
 8005df8:	20012e7c 	.word	0x20012e7c

08005dfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e04:	4b28      	ldr	r3, [pc, #160]	@ (8005ea8 <prvInsertBlockIntoFreeList+0xac>)
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e002      	b.n	8005e10 <prvInsertBlockIntoFreeList+0x14>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d8f7      	bhi.n	8005e0a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4413      	add	r3, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d108      	bne.n	8005e3e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	441a      	add	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d118      	bne.n	8005e84 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b15      	ldr	r3, [pc, #84]	@ (8005eac <prvInsertBlockIntoFreeList+0xb0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d00d      	beq.n	8005e7a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e008      	b.n	8005e8c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005eac <prvInsertBlockIntoFreeList+0xb0>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e003      	b.n	8005e8c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d002      	beq.n	8005e9a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20012e70 	.word	0x20012e70
 8005eac:	20012e78 	.word	0x20012e78

08005eb0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005eb4:	4803      	ldr	r0, [pc, #12]	@ (8005ec4 <_cbSendSystemDesc+0x14>)
 8005eb6:	f001 f9a7 	bl	8007208 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005eba:	4803      	ldr	r0, [pc, #12]	@ (8005ec8 <_cbSendSystemDesc+0x18>)
 8005ebc:	f001 f9a4 	bl	8007208 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005ec0:	bf00      	nop
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	08008440 	.word	0x08008440
 8005ec8:	08008474 	.word	0x08008474

08005ecc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005ed0:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <SEGGER_SYSVIEW_Conf+0x20>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	4b05      	ldr	r3, [pc, #20]	@ (8005eec <SEGGER_SYSVIEW_Conf+0x20>)
 8005ed6:	6819      	ldr	r1, [r3, #0]
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <SEGGER_SYSVIEW_Conf+0x24>)
 8005eda:	4a06      	ldr	r2, [pc, #24]	@ (8005ef4 <SEGGER_SYSVIEW_Conf+0x28>)
 8005edc:	f000 fe1a 	bl	8006b14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005ee0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005ee4:	f000 fe5a 	bl	8006b9c <SEGGER_SYSVIEW_SetRAMBase>
}
 8005ee8:	bf00      	nop
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000000 	.word	0x20000000
 8005ef0:	08005eb1 	.word	0x08005eb1
 8005ef4:	08008510 	.word	0x08008510

08005ef8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	e033      	b.n	8005f6c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005f04:	491e      	ldr	r1, [pc, #120]	@ (8005f80 <_cbSendTaskList+0x88>)
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	491a      	ldr	r1, [pc, #104]	@ (8005f80 <_cbSendTaskList+0x88>)
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3304      	adds	r3, #4
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	4c16      	ldr	r4, [pc, #88]	@ (8005f80 <_cbSendTaskList+0x88>)
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4423      	add	r3, r4
 8005f34:	3308      	adds	r3, #8
 8005f36:	681c      	ldr	r4, [r3, #0]
 8005f38:	4d11      	ldr	r5, [pc, #68]	@ (8005f80 <_cbSendTaskList+0x88>)
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	442b      	add	r3, r5
 8005f46:	330c      	adds	r3, #12
 8005f48:	681d      	ldr	r5, [r3, #0]
 8005f4a:	4e0d      	ldr	r6, [pc, #52]	@ (8005f80 <_cbSendTaskList+0x88>)
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4433      	add	r3, r6
 8005f58:	3310      	adds	r3, #16
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	462b      	mov	r3, r5
 8005f60:	4622      	mov	r2, r4
 8005f62:	f000 f8bd 	bl	80060e0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	607b      	str	r3, [r7, #4]
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <_cbSendTaskList+0x8c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3c6      	bcc.n	8005f04 <_cbSendTaskList+0xc>
  }
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f80:	20012e8c 	.word	0x20012e8c
 8005f84:	20012f2c 	.word	0x20012f2c

08005f88 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005f90:	f7fe ff20 	bl	8004dd4 <xTaskGetTickCountFromISR>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2200      	movs	r2, #0
 8005f98:	469a      	mov	sl, r3
 8005f9a:	4693      	mov	fp, r2
 8005f9c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	f04f 0a00 	mov.w	sl, #0
 8005fac:	f04f 0b00 	mov.w	fp, #0
 8005fb0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005fb4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005fb8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	465b      	mov	r3, fp
 8005fc0:	1a14      	subs	r4, r2, r0
 8005fc2:	eb63 0501 	sbc.w	r5, r3, r1
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	00ab      	lsls	r3, r5, #2
 8005fd0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005fd4:	00a2      	lsls	r2, r4, #2
 8005fd6:	4614      	mov	r4, r2
 8005fd8:	461d      	mov	r5, r3
 8005fda:	eb14 0800 	adds.w	r8, r4, r0
 8005fde:	eb45 0901 	adc.w	r9, r5, r1
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ff6:	4690      	mov	r8, r2
 8005ff8:	4699      	mov	r9, r3
 8005ffa:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006002:	4610      	mov	r0, r2
 8006004:	4619      	mov	r1, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006010 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800601e:	2205      	movs	r2, #5
 8006020:	492b      	ldr	r1, [pc, #172]	@ (80060d0 <SYSVIEW_AddTask+0xc0>)
 8006022:	68b8      	ldr	r0, [r7, #8]
 8006024:	f001 fbfc 	bl	8007820 <memcmp>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d04b      	beq.n	80060c6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800602e:	4b29      	ldr	r3, [pc, #164]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b07      	cmp	r3, #7
 8006034:	d903      	bls.n	800603e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006036:	4828      	ldr	r0, [pc, #160]	@ (80060d8 <SYSVIEW_AddTask+0xc8>)
 8006038:	f001 fb76 	bl	8007728 <SEGGER_SYSVIEW_Warn>
    return;
 800603c:	e044      	b.n	80060c8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800603e:	4b25      	ldr	r3, [pc, #148]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4926      	ldr	r1, [pc, #152]	@ (80060dc <SYSVIEW_AddTask+0xcc>)
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006052:	4b20      	ldr	r3, [pc, #128]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4921      	ldr	r1, [pc, #132]	@ (80060dc <SYSVIEW_AddTask+0xcc>)
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3304      	adds	r3, #4
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006068:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	491b      	ldr	r1, [pc, #108]	@ (80060dc <SYSVIEW_AddTask+0xcc>)
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	3308      	adds	r3, #8
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800607e:	4b15      	ldr	r3, [pc, #84]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	4916      	ldr	r1, [pc, #88]	@ (80060dc <SYSVIEW_AddTask+0xcc>)
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	330c      	adds	r3, #12
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006094:	4b0f      	ldr	r3, [pc, #60]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4910      	ldr	r1, [pc, #64]	@ (80060dc <SYSVIEW_AddTask+0xcc>)
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	3310      	adds	r3, #16
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80060aa:	4b0a      	ldr	r3, [pc, #40]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	4a08      	ldr	r2, [pc, #32]	@ (80060d4 <SYSVIEW_AddTask+0xc4>)
 80060b2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f80e 	bl	80060e0 <SYSVIEW_SendTaskInfo>
 80060c4:	e000      	b.n	80060c8 <SYSVIEW_AddTask+0xb8>
    return;
 80060c6:	bf00      	nop

}
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	08008484 	.word	0x08008484
 80060d4:	20012f2c 	.word	0x20012f2c
 80060d8:	0800848c 	.word	0x0800848c
 80060dc:	20012e8c 	.word	0x20012e8c

080060e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	@ 0x28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80060ee:	f107 0314 	add.w	r3, r7, #20
 80060f2:	2214      	movs	r2, #20
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 fba2 	bl	8007840 <memset>
  TaskInfo.TaskID     = TaskID;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ff7f 	bl	8007018 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800611a:	bf00      	nop
 800611c:	3728      	adds	r7, #40	@ 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800612a:	4b26      	ldr	r3, [pc, #152]	@ (80061c4 <_DoInit+0xa0>)
 800612c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800612e:	22a8      	movs	r2, #168	@ 0xa8
 8006130:	2100      	movs	r1, #0
 8006132:	6838      	ldr	r0, [r7, #0]
 8006134:	f001 fb84 	bl	8007840 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2203      	movs	r2, #3
 800613c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2203      	movs	r2, #3
 8006142:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4a20      	ldr	r2, [pc, #128]	@ (80061c8 <_DoInit+0xa4>)
 8006148:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <_DoInit+0xa8>)
 800614e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006156:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2200      	movs	r2, #0
 8006162:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2200      	movs	r2, #0
 8006168:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	4a16      	ldr	r2, [pc, #88]	@ (80061c8 <_DoInit+0xa4>)
 800616e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <_DoInit+0xac>)
 8006174:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2210      	movs	r2, #16
 800617a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2200      	movs	r2, #0
 8006186:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800618e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006192:	2300      	movs	r3, #0
 8006194:	607b      	str	r3, [r7, #4]
 8006196:	e00c      	b.n	80061b2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1c3 030f 	rsb	r3, r3, #15
 800619e:	4a0d      	ldr	r2, [pc, #52]	@ (80061d4 <_DoInit+0xb0>)
 80061a0:	5cd1      	ldrb	r1, [r2, r3]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4413      	add	r3, r2
 80061a8:	460a      	mov	r2, r1
 80061aa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3301      	adds	r3, #1
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b0f      	cmp	r3, #15
 80061b6:	d9ef      	bls.n	8006198 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80061b8:	f3bf 8f5f 	dmb	sy
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20012f30 	.word	0x20012f30
 80061c8:	080084dc 	.word	0x080084dc
 80061cc:	20012fd8 	.word	0x20012fd8
 80061d0:	200133d8 	.word	0x200133d8
 80061d4:	08008518 	.word	0x08008518

080061d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	@ 0x30
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80061e4:	4b3e      	ldr	r3, [pc, #248]	@ (80062e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80061e6:	623b      	str	r3, [r7, #32]
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b53      	cmp	r3, #83	@ 0x53
 80061f0:	d001      	beq.n	80061f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80061f2:	f7ff ff97 	bl	8006124 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	3360      	adds	r3, #96	@ 0x60
 8006202:	4a37      	ldr	r2, [pc, #220]	@ (80062e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8006204:	4413      	add	r3, r2
 8006206:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006218:	2300      	movs	r3, #0
 800621a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800621c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	429a      	cmp	r2, r3
 8006222:	d92b      	bls.n	800627c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4293      	cmp	r3, r2
 8006234:	bf28      	it	cs
 8006236:	4613      	movcs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006240:	4413      	add	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	6939      	ldr	r1, [r7, #16]
 8006248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800624a:	f001 fb27 	bl	800789c <memcpy>
    NumBytesRead += NumBytesRem;
 800624e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8006256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4413      	add	r3, r2
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006274:	429a      	cmp	r2, r3
 8006276:	d101      	bne.n	800627c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006278:	2300      	movs	r3, #0
 800627a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4293      	cmp	r3, r2
 800628a:	bf28      	it	cs
 800628c:	4613      	movcs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d019      	beq.n	80062ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	4413      	add	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	6939      	ldr	r1, [r7, #16]
 80062a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062a6:	f001 faf9 	bl	800789c <memcpy>
    NumBytesRead += NumBytesRem;
 80062aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4413      	add	r3, r2
 80062b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80062b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4413      	add	r3, r2
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80062c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	4413      	add	r3, r2
 80062c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80062d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3730      	adds	r7, #48	@ 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20012f30 	.word	0x20012f30

080062e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80062f2:	4b3d      	ldr	r3, [pc, #244]	@ (80063e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b53      	cmp	r3, #83	@ 0x53
 80062fe:	d001      	beq.n	8006304 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006300:	f7ff ff10 	bl	8006124 <_DoInit>
  SEGGER_RTT_LOCK();
 8006304:	f3ef 8311 	mrs	r3, BASEPRI
 8006308:	f04f 0120 	mov.w	r1, #32
 800630c:	f381 8811 	msr	BASEPRI, r1
 8006310:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006312:	4b35      	ldr	r3, [pc, #212]	@ (80063e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006314:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800631a:	6939      	ldr	r1, [r7, #16]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	440b      	add	r3, r1
 800632a:	3304      	adds	r3, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3301      	adds	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	429a      	cmp	r2, r3
 8006340:	dbeb      	blt.n	800631a <SEGGER_RTT_AllocUpBuffer+0x36>
 8006342:	e000      	b.n	8006346 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006344:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	429a      	cmp	r2, r3
 800634e:	da3f      	bge.n	80063d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006350:	6939      	ldr	r1, [r7, #16]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	4613      	mov	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	440b      	add	r3, r1
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006364:	6939      	ldr	r1, [r7, #16]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	4613      	mov	r3, r2
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	440b      	add	r3, r1
 8006374:	3304      	adds	r3, #4
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800637a:	6939      	ldr	r1, [r7, #16]
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	4613      	mov	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	4413      	add	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	440b      	add	r3, r1
 8006388:	3320      	adds	r3, #32
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800638e:	6939      	ldr	r1, [r7, #16]
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	4613      	mov	r3, r2
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	4413      	add	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	440b      	add	r3, r1
 800639c:	3328      	adds	r3, #40	@ 0x28
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80063a2:	6939      	ldr	r1, [r7, #16]
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	4613      	mov	r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	4413      	add	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	440b      	add	r3, r1
 80063b0:	3324      	adds	r3, #36	@ 0x24
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80063b6:	6939      	ldr	r1, [r7, #16]
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	4613      	mov	r3, r2
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4413      	add	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	440b      	add	r3, r1
 80063c4:	332c      	adds	r3, #44	@ 0x2c
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80063ca:	f3bf 8f5f 	dmb	sy
 80063ce:	e002      	b.n	80063d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80063dc:	69fb      	ldr	r3, [r7, #28]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20012f30 	.word	0x20012f30

080063ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	@ 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80063fa:	4b21      	ldr	r3, [pc, #132]	@ (8006480 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b53      	cmp	r3, #83	@ 0x53
 8006406:	d001      	beq.n	800640c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006408:	f7ff fe8c 	bl	8006124 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800640c:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800640e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d82c      	bhi.n	8006470 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006416:	f3ef 8311 	mrs	r3, BASEPRI
 800641a:	f04f 0120 	mov.w	r1, #32
 800641e:	f381 8811 	msr	BASEPRI, r1
 8006422:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4613      	mov	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	4413      	add	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	3360      	adds	r3, #96	@ 0x60
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00e      	beq.n	800645a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800645e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006460:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
 800646e:	e002      	b.n	8006476 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006478:	4618      	mov	r0, r3
 800647a:	3728      	adds	r7, #40	@ 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20012f30 	.word	0x20012f30

08006484 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	60fa      	str	r2, [r7, #12]
 800649a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b80      	cmp	r3, #128	@ 0x80
 80064a0:	d90a      	bls.n	80064b8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80064a2:	2380      	movs	r3, #128	@ 0x80
 80064a4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80064a6:	e007      	b.n	80064b8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	1c53      	adds	r3, r2, #1
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1c59      	adds	r1, r3, #1
 80064b2:	60f9      	str	r1, [r7, #12]
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	1e5a      	subs	r2, r3, #1
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <_EncodeStr+0x46>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1ee      	bne.n	80064a8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3307      	adds	r3, #7
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006502:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <_HandleIncomingPacket+0xd8>)
 8006504:	7e1b      	ldrb	r3, [r3, #24]
 8006506:	4618      	mov	r0, r3
 8006508:	1cfb      	adds	r3, r7, #3
 800650a:	2201      	movs	r2, #1
 800650c:	4619      	mov	r1, r3
 800650e:	f7ff fe63 	bl	80061d8 <SEGGER_RTT_ReadNoLock>
 8006512:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d057      	beq.n	80065ca <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	2b80      	cmp	r3, #128	@ 0x80
 800651e:	d031      	beq.n	8006584 <_HandleIncomingPacket+0x88>
 8006520:	2b80      	cmp	r3, #128	@ 0x80
 8006522:	dc40      	bgt.n	80065a6 <_HandleIncomingPacket+0xaa>
 8006524:	2b07      	cmp	r3, #7
 8006526:	dc15      	bgt.n	8006554 <_HandleIncomingPacket+0x58>
 8006528:	2b00      	cmp	r3, #0
 800652a:	dd3c      	ble.n	80065a6 <_HandleIncomingPacket+0xaa>
 800652c:	3b01      	subs	r3, #1
 800652e:	2b06      	cmp	r3, #6
 8006530:	d839      	bhi.n	80065a6 <_HandleIncomingPacket+0xaa>
 8006532:	a201      	add	r2, pc, #4	@ (adr r2, 8006538 <_HandleIncomingPacket+0x3c>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	0800655b 	.word	0x0800655b
 800653c:	08006561 	.word	0x08006561
 8006540:	08006567 	.word	0x08006567
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006573 	.word	0x08006573
 800654c:	08006579 	.word	0x08006579
 8006550:	0800657f 	.word	0x0800657f
 8006554:	2b7f      	cmp	r3, #127	@ 0x7f
 8006556:	d033      	beq.n	80065c0 <_HandleIncomingPacket+0xc4>
 8006558:	e025      	b.n	80065a6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800655a:	f000 fbe3 	bl	8006d24 <SEGGER_SYSVIEW_Start>
      break;
 800655e:	e034      	b.n	80065ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006560:	f000 fc9a 	bl	8006e98 <SEGGER_SYSVIEW_Stop>
      break;
 8006564:	e031      	b.n	80065ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006566:	f000 fe73 	bl	8007250 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800656a:	e02e      	b.n	80065ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800656c:	f000 fe38 	bl	80071e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006570:	e02b      	b.n	80065ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006572:	f000 fcb7 	bl	8006ee4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006576:	e028      	b.n	80065ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006578:	f001 f884 	bl	8007684 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800657c:	e025      	b.n	80065ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800657e:	f001 f863 	bl	8007648 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006582:	e022      	b.n	80065ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006584:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <_HandleIncomingPacket+0xd8>)
 8006586:	7e1b      	ldrb	r3, [r3, #24]
 8006588:	4618      	mov	r0, r3
 800658a:	1cfb      	adds	r3, r7, #3
 800658c:	2201      	movs	r2, #1
 800658e:	4619      	mov	r1, r3
 8006590:	f7ff fe22 	bl	80061d8 <SEGGER_RTT_ReadNoLock>
 8006594:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d013      	beq.n	80065c4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ffc8 	bl	8007534 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80065a4:	e00e      	b.n	80065c4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	da0c      	bge.n	80065c8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80065ae:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <_HandleIncomingPacket+0xd8>)
 80065b0:	7e1b      	ldrb	r3, [r3, #24]
 80065b2:	4618      	mov	r0, r3
 80065b4:	1cfb      	adds	r3, r7, #3
 80065b6:	2201      	movs	r2, #1
 80065b8:	4619      	mov	r1, r3
 80065ba:	f7ff fe0d 	bl	80061d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80065be:	e003      	b.n	80065c8 <_HandleIncomingPacket+0xcc>
      break;
 80065c0:	bf00      	nop
 80065c2:	e002      	b.n	80065ca <_HandleIncomingPacket+0xce>
      break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <_HandleIncomingPacket+0xce>
      break;
 80065c8:	bf00      	nop
    }
  }
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200137f0 	.word	0x200137f0

080065d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	@ 0x30
 80065dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80065de:	2301      	movs	r3, #1
 80065e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	3301      	adds	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ec:	4b31      	ldr	r3, [pc, #196]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f2:	e00b      	b.n	800660c <_TrySendOverflowPacket+0x34>
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80065fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	09db      	lsrs	r3, r3, #7
 800660a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006610:	d8f0      	bhi.n	80065f4 <_TrySendOverflowPacket+0x1c>
 8006612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006620:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006622:	4b25      	ldr	r3, [pc, #148]	@ (80066b8 <_TrySendOverflowPacket+0xe0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006628:	4b22      	ldr	r3, [pc, #136]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	623b      	str	r3, [r7, #32]
 800663a:	e00b      	b.n	8006654 <_TrySendOverflowPacket+0x7c>
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	6279      	str	r1, [r7, #36]	@ 0x24
 8006646:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	09db      	lsrs	r3, r3, #7
 8006652:	623b      	str	r3, [r7, #32]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	2b7f      	cmp	r3, #127	@ 0x7f
 8006658:	d8f0      	bhi.n	800663c <_TrySendOverflowPacket+0x64>
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800666a:	4b12      	ldr	r3, [pc, #72]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	4618      	mov	r0, r3
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	461a      	mov	r2, r3
 8006678:	1d3b      	adds	r3, r7, #4
 800667a:	4619      	mov	r1, r3
 800667c:	f7f9 fda8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006680:	4603      	mov	r3, r0
 8006682:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800668a:	4a0a      	ldr	r2, [pc, #40]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006690:	4b08      	ldr	r3, [pc, #32]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	3b01      	subs	r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e004      	b.n	80066a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800669e:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	3301      	adds	r3, #1
 80066a4:	4a03      	ldr	r2, [pc, #12]	@ (80066b4 <_TrySendOverflowPacket+0xdc>)
 80066a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80066a8:	693b      	ldr	r3, [r7, #16]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3730      	adds	r7, #48	@ 0x30
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200137f0 	.word	0x200137f0
 80066b8:	e0001004 	.word	0xe0001004

080066bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	@ 0x28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80066c8:	4b98      	ldr	r3, [pc, #608]	@ (800692c <_SendPacket+0x270>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d010      	beq.n	80066f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80066d0:	4b96      	ldr	r3, [pc, #600]	@ (800692c <_SendPacket+0x270>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 812d 	beq.w	8006934 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80066da:	4b94      	ldr	r3, [pc, #592]	@ (800692c <_SendPacket+0x270>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d109      	bne.n	80066f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80066e2:	f7ff ff79 	bl	80065d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80066e6:	4b91      	ldr	r3, [pc, #580]	@ (800692c <_SendPacket+0x270>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	f040 8124 	bne.w	8006938 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80066f0:	e001      	b.n	80066f6 <_SendPacket+0x3a>
    goto Send;
 80066f2:	bf00      	nop
 80066f4:	e000      	b.n	80066f8 <_SendPacket+0x3c>
Send:
 80066f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b1f      	cmp	r3, #31
 80066fc:	d809      	bhi.n	8006712 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80066fe:	4b8b      	ldr	r3, [pc, #556]	@ (800692c <_SendPacket+0x270>)
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 8115 	bne.w	800693c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b17      	cmp	r3, #23
 8006716:	d807      	bhi.n	8006728 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3b01      	subs	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e0c4      	b.n	80068b2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b7f      	cmp	r3, #127	@ 0x7f
 8006734:	d912      	bls.n	800675c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	09da      	lsrs	r2, r3, #7
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3b01      	subs	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	3a01      	subs	r2, #1
 800674e:	60fa      	str	r2, [r7, #12]
 8006750:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e006      	b.n	800676a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	b2da      	uxtb	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b7e      	cmp	r3, #126	@ 0x7e
 800676e:	d807      	bhi.n	8006780 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3b01      	subs	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e098      	b.n	80068b2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006786:	d212      	bcs.n	80067ae <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	09da      	lsrs	r2, r3, #7
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3b01      	subs	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	3a01      	subs	r2, #1
 80067a0:	60fa      	str	r2, [r7, #12]
 80067a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e081      	b.n	80068b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b4:	d21d      	bcs.n	80067f2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0b9a      	lsrs	r2, r3, #14
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3b01      	subs	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	09db      	lsrs	r3, r3, #7
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	3a01      	subs	r2, #1
 80067d0:	60fa      	str	r2, [r7, #12]
 80067d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	3a01      	subs	r2, #1
 80067e4:	60fa      	str	r2, [r7, #12]
 80067e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e05f      	b.n	80068b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067f8:	d228      	bcs.n	800684c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0d5a      	lsrs	r2, r3, #21
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3b01      	subs	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0b9b      	lsrs	r3, r3, #14
 800680e:	b2db      	uxtb	r3, r3
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	3a01      	subs	r2, #1
 8006814:	60fa      	str	r2, [r7, #12]
 8006816:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800681a:	b2da      	uxtb	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	09db      	lsrs	r3, r3, #7
 8006824:	b2db      	uxtb	r3, r3
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	3a01      	subs	r2, #1
 800682a:	60fa      	str	r2, [r7, #12]
 800682c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006830:	b2da      	uxtb	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	3a01      	subs	r2, #1
 800683e:	60fa      	str	r2, [r7, #12]
 8006840:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006844:	b2da      	uxtb	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e032      	b.n	80068b2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	0f1a      	lsrs	r2, r3, #28
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3b01      	subs	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	0d5b      	lsrs	r3, r3, #21
 8006860:	b2db      	uxtb	r3, r3
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	3a01      	subs	r2, #1
 8006866:	60fa      	str	r2, [r7, #12]
 8006868:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	0b9b      	lsrs	r3, r3, #14
 8006876:	b2db      	uxtb	r3, r3
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	3a01      	subs	r2, #1
 800687c:	60fa      	str	r2, [r7, #12]
 800687e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	09db      	lsrs	r3, r3, #7
 800688c:	b2db      	uxtb	r3, r3
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	3a01      	subs	r2, #1
 8006892:	60fa      	str	r2, [r7, #12]
 8006894:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006898:	b2da      	uxtb	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	3a01      	subs	r2, #1
 80068a6:	60fa      	str	r2, [r7, #12]
 80068a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80068b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006930 <_SendPacket+0x274>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80068b8:	4b1c      	ldr	r3, [pc, #112]	@ (800692c <_SendPacket+0x270>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	623b      	str	r3, [r7, #32]
 80068ca:	e00b      	b.n	80068e4 <_SendPacket+0x228>
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	1c59      	adds	r1, r3, #1
 80068d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80068d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	09db      	lsrs	r3, r3, #7
 80068e2:	623b      	str	r3, [r7, #32]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068e8:	d8f0      	bhi.n	80068cc <_SendPacket+0x210>
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80068fa:	4b0c      	ldr	r3, [pc, #48]	@ (800692c <_SendPacket+0x270>)
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	4618      	mov	r0, r3
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	461a      	mov	r2, r3
 8006908:	68f9      	ldr	r1, [r7, #12]
 800690a:	f7f9 fc61 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800690e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006916:	4a05      	ldr	r2, [pc, #20]	@ (800692c <_SendPacket+0x270>)
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	60d3      	str	r3, [r2, #12]
 800691c:	e00f      	b.n	800693e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800691e:	4b03      	ldr	r3, [pc, #12]	@ (800692c <_SendPacket+0x270>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	b2da      	uxtb	r2, r3
 8006926:	4b01      	ldr	r3, [pc, #4]	@ (800692c <_SendPacket+0x270>)
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	e008      	b.n	800693e <_SendPacket+0x282>
 800692c:	200137f0 	.word	0x200137f0
 8006930:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006934:	bf00      	nop
 8006936:	e002      	b.n	800693e <_SendPacket+0x282>
      goto SendDone;
 8006938:	bf00      	nop
 800693a:	e000      	b.n	800693e <_SendPacket+0x282>
      goto SendDone;
 800693c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800693e:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <_SendPacket+0x2d4>)
 8006940:	7e1b      	ldrb	r3, [r3, #24]
 8006942:	4619      	mov	r1, r3
 8006944:	4a13      	ldr	r2, [pc, #76]	@ (8006994 <_SendPacket+0x2d8>)
 8006946:	460b      	mov	r3, r1
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	440b      	add	r3, r1
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	4413      	add	r3, r2
 8006950:	336c      	adds	r3, #108	@ 0x6c
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b0e      	ldr	r3, [pc, #56]	@ (8006990 <_SendPacket+0x2d4>)
 8006956:	7e1b      	ldrb	r3, [r3, #24]
 8006958:	4618      	mov	r0, r3
 800695a:	490e      	ldr	r1, [pc, #56]	@ (8006994 <_SendPacket+0x2d8>)
 800695c:	4603      	mov	r3, r0
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4403      	add	r3, r0
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	440b      	add	r3, r1
 8006966:	3370      	adds	r3, #112	@ 0x70
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d00b      	beq.n	8006986 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800696e:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <_SendPacket+0x2d4>)
 8006970:	789b      	ldrb	r3, [r3, #2]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d107      	bne.n	8006986 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006976:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <_SendPacket+0x2d4>)
 8006978:	2201      	movs	r2, #1
 800697a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800697c:	f7ff fdbe 	bl	80064fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006980:	4b03      	ldr	r3, [pc, #12]	@ (8006990 <_SendPacket+0x2d4>)
 8006982:	2200      	movs	r2, #0
 8006984:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006986:	bf00      	nop
 8006988:	3728      	adds	r7, #40	@ 0x28
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	200137f0 	.word	0x200137f0
 8006994:	20012f30 	.word	0x20012f30

08006998 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b0a2      	sub	sp, #136	@ 0x88
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 80069ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 80069ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01d      	beq.n	80069fe <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 80069c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069c6:	2b25      	cmp	r3, #37	@ 0x25
 80069c8:	d1f1      	bne.n	80069ae <_VPrintHost+0x16>
      c = *p;
 80069ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	1d19      	adds	r1, r3, #4
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6011      	str	r1, [r2, #0]
 80069dc:	6819      	ldr	r1, [r3, #0]
 80069de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069e8:	460a      	mov	r2, r1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	3388      	adds	r3, #136	@ 0x88
 80069ee:	443b      	add	r3, r7
 80069f0:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 80069f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d002      	beq.n	8006a02 <_VPrintHost+0x6a>
    c = *p++;
 80069fc:	e7d7      	b.n	80069ae <_VPrintHost+0x16>
      break;
 80069fe:	bf00      	nop
 8006a00:	e000      	b.n	8006a04 <_VPrintHost+0x6c>
        break;
 8006a02:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8006a04:	f3ef 8311 	mrs	r3, BASEPRI
 8006a08:	f04f 0120 	mov.w	r1, #32
 8006a0c:	f381 8811 	msr	BASEPRI, r1
 8006a10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a12:	483f      	ldr	r0, [pc, #252]	@ (8006b10 <_VPrintHost+0x178>)
 8006a14:	f7ff fd66 	bl	80064e4 <_PreparePacket>
 8006a18:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a1a:	2280      	movs	r2, #128	@ 0x80
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006a20:	f7ff fd30 	bl	8006484 <_EncodeStr>
 8006a24:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 8006a26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a28:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a2e:	e00b      	b.n	8006a48 <_VPrintHost+0xb0>
 8006a30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a36:	1c59      	adds	r1, r3, #1
 8006a38:	6779      	str	r1, [r7, #116]	@ 0x74
 8006a3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a44:	09db      	lsrs	r3, r3, #7
 8006a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4c:	d8f0      	bhi.n	8006a30 <_VPrintHost+0x98>
 8006a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a54:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 8006a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a68:	e00b      	b.n	8006a82 <_VPrintHost+0xea>
 8006a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a70:	1c59      	adds	r1, r3, #1
 8006a72:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8006a74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a7e:	09db      	lsrs	r3, r3, #7
 8006a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a84:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a86:	d8f0      	bhi.n	8006a6a <_VPrintHost+0xd2>
 8006a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a96:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8006aa0:	e022      	b.n	8006ae8 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8006aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aae:	e00b      	b.n	8006ac8 <_VPrintHost+0x130>
 8006ab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ab6:	1c59      	adds	r1, r3, #1
 8006ab8:	6679      	str	r1, [r7, #100]	@ 0x64
 8006aba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ac4:	09db      	lsrs	r3, r3, #7
 8006ac6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006acc:	d8f0      	bhi.n	8006ab0 <_VPrintHost+0x118>
 8006ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ad4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006adc:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 8006ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8006ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006aec:	1e5a      	subs	r2, r3, #1
 8006aee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1d5      	bne.n	8006aa2 <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006af6:	221a      	movs	r2, #26
 8006af8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006afa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006afc:	f7ff fdde 	bl	80066bc <_SendPacket>
    RECORD_END();
 8006b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b02:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3788      	adds	r7, #136	@ 0x88
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20013820 	.word	0x20013820

08006b14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b22:	2300      	movs	r3, #0
 8006b24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b28:	4917      	ldr	r1, [pc, #92]	@ (8006b88 <SEGGER_SYSVIEW_Init+0x74>)
 8006b2a:	4818      	ldr	r0, [pc, #96]	@ (8006b8c <SEGGER_SYSVIEW_Init+0x78>)
 8006b2c:	f7ff fbda 	bl	80062e4 <SEGGER_RTT_AllocUpBuffer>
 8006b30:	4603      	mov	r3, r0
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006b38:	4b15      	ldr	r3, [pc, #84]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b3a:	785a      	ldrb	r2, [r3, #1]
 8006b3c:	4b14      	ldr	r3, [pc, #80]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b40:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b42:	7e1b      	ldrb	r3, [r3, #24]
 8006b44:	4618      	mov	r0, r3
 8006b46:	2300      	movs	r3, #0
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2308      	movs	r3, #8
 8006b4c:	4a11      	ldr	r2, [pc, #68]	@ (8006b94 <SEGGER_SYSVIEW_Init+0x80>)
 8006b4e:	490f      	ldr	r1, [pc, #60]	@ (8006b8c <SEGGER_SYSVIEW_Init+0x78>)
 8006b50:	f7ff fc4c 	bl	80063ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006b54:	4b0e      	ldr	r3, [pc, #56]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b98 <SEGGER_SYSVIEW_Init+0x84>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006b62:	4a0b      	ldr	r2, [pc, #44]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006b68:	4a09      	ldr	r2, [pc, #36]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006b6e:	4a08      	ldr	r2, [pc, #32]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006b74:	4a06      	ldr	r2, [pc, #24]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006b7a:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	200133e8 	.word	0x200133e8
 8006b8c:	080084f0 	.word	0x080084f0
 8006b90:	200137f0 	.word	0x200137f0
 8006b94:	200137e8 	.word	0x200137e8
 8006b98:	e0001004 	.word	0xe0001004

08006b9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006ba4:	4a04      	ldr	r2, [pc, #16]	@ (8006bb8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6113      	str	r3, [r2, #16]
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	200137f0 	.word	0x200137f0

08006bbc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc8:	f04f 0120 	mov.w	r1, #32
 8006bcc:	f381 8811 	msr	BASEPRI, r1
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	4808      	ldr	r0, [pc, #32]	@ (8006bf4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006bd4:	f7ff fc86 	bl	80064e4 <_PreparePacket>
 8006bd8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	68b8      	ldr	r0, [r7, #8]
 8006be0:	f7ff fd6c 	bl	80066bc <_SendPacket>
  RECORD_END();
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f383 8811 	msr	BASEPRI, r3
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20013820 	.word	0x20013820

08006bf8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c02:	f3ef 8311 	mrs	r3, BASEPRI
 8006c06:	f04f 0120 	mov.w	r1, #32
 8006c0a:	f381 8811 	msr	BASEPRI, r1
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	4816      	ldr	r0, [pc, #88]	@ (8006c6c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006c12:	f7ff fc67 	bl	80064e4 <_PreparePacket>
 8006c16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	e00b      	b.n	8006c3e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	61f9      	str	r1, [r7, #28]
 8006c30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	09db      	lsrs	r3, r3, #7
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c42:	d8f0      	bhi.n	8006c26 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	61fa      	str	r2, [r7, #28]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	6938      	ldr	r0, [r7, #16]
 8006c5a:	f7ff fd2f 	bl	80066bc <_SendPacket>
  RECORD_END();
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f383 8811 	msr	BASEPRI, r3
}
 8006c64:	bf00      	nop
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20013820 	.word	0x20013820

08006c70 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08c      	sub	sp, #48	@ 0x30
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c80:	f04f 0120 	mov.w	r1, #32
 8006c84:	f381 8811 	msr	BASEPRI, r1
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	4825      	ldr	r0, [pc, #148]	@ (8006d20 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006c8c:	f7ff fc2a 	bl	80064e4 <_PreparePacket>
 8006c90:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9e:	e00b      	b.n	8006cb8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca6:	1c59      	adds	r1, r3, #1
 8006ca8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006caa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	09db      	lsrs	r3, r3, #7
 8006cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cba:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cbc:	d8f0      	bhi.n	8006ca0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ccc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	623b      	str	r3, [r7, #32]
 8006cd6:	e00b      	b.n	8006cf0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ce2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	09db      	lsrs	r3, r3, #7
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf4:	d8f0      	bhi.n	8006cd8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cfc:	6a3a      	ldr	r2, [r7, #32]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	6979      	ldr	r1, [r7, #20]
 8006d0a:	69b8      	ldr	r0, [r7, #24]
 8006d0c:	f7ff fcd6 	bl	80066bc <_SendPacket>
  RECORD_END();
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f383 8811 	msr	BASEPRI, r3
}
 8006d16:	bf00      	nop
 8006d18:	3730      	adds	r7, #48	@ 0x30
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20013820 	.word	0x20013820

08006d24 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08c      	sub	sp, #48	@ 0x30
 8006d28:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006d2a:	4b58      	ldr	r3, [pc, #352]	@ (8006e8c <SEGGER_SYSVIEW_Start+0x168>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006d30:	f3ef 8311 	mrs	r3, BASEPRI
 8006d34:	f04f 0120 	mov.w	r1, #32
 8006d38:	f381 8811 	msr	BASEPRI, r1
 8006d3c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006d3e:	4b53      	ldr	r3, [pc, #332]	@ (8006e8c <SEGGER_SYSVIEW_Start+0x168>)
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	220a      	movs	r2, #10
 8006d44:	4952      	ldr	r1, [pc, #328]	@ (8006e90 <SEGGER_SYSVIEW_Start+0x16c>)
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7f9 fa42 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006d52:	200a      	movs	r0, #10
 8006d54:	f7ff ff32 	bl	8006bbc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d58:	f3ef 8311 	mrs	r3, BASEPRI
 8006d5c:	f04f 0120 	mov.w	r1, #32
 8006d60:	f381 8811 	msr	BASEPRI, r1
 8006d64:	60bb      	str	r3, [r7, #8]
 8006d66:	484b      	ldr	r0, [pc, #300]	@ (8006e94 <SEGGER_SYSVIEW_Start+0x170>)
 8006d68:	f7ff fbbc 	bl	80064e4 <_PreparePacket>
 8006d6c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d76:	4b45      	ldr	r3, [pc, #276]	@ (8006e8c <SEGGER_SYSVIEW_Start+0x168>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d7c:	e00b      	b.n	8006d96 <SEGGER_SYSVIEW_Start+0x72>
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d92:	09db      	lsrs	r3, r3, #7
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d9a:	d8f0      	bhi.n	8006d7e <SEGGER_SYSVIEW_Start+0x5a>
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006daa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db0:	4b36      	ldr	r3, [pc, #216]	@ (8006e8c <SEGGER_SYSVIEW_Start+0x168>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	623b      	str	r3, [r7, #32]
 8006db6:	e00b      	b.n	8006dd0 <SEGGER_SYSVIEW_Start+0xac>
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbe:	1c59      	adds	r1, r3, #1
 8006dc0:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	09db      	lsrs	r3, r3, #7
 8006dce:	623b      	str	r3, [r7, #32]
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd4:	d8f0      	bhi.n	8006db8 <SEGGER_SYSVIEW_Start+0x94>
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	4b28      	ldr	r3, [pc, #160]	@ (8006e8c <SEGGER_SYSVIEW_Start+0x168>)
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	61bb      	str	r3, [r7, #24]
 8006df0:	e00b      	b.n	8006e0a <SEGGER_SYSVIEW_Start+0xe6>
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	1c59      	adds	r1, r3, #1
 8006dfa:	61f9      	str	r1, [r7, #28]
 8006dfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	09db      	lsrs	r3, r3, #7
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e0e:	d8f0      	bhi.n	8006df2 <SEGGER_SYSVIEW_Start+0xce>
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	61fa      	str	r2, [r7, #28]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	2300      	movs	r3, #0
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	e00b      	b.n	8006e42 <SEGGER_SYSVIEW_Start+0x11e>
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	1c59      	adds	r1, r3, #1
 8006e32:	6179      	str	r1, [r7, #20]
 8006e34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	09db      	lsrs	r3, r3, #7
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e46:	d8f0      	bhi.n	8006e2a <SEGGER_SYSVIEW_Start+0x106>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	617a      	str	r2, [r7, #20]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e58:	2218      	movs	r2, #24
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff fc2d 	bl	80066bc <_SendPacket>
      RECORD_END();
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e68:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <SEGGER_SYSVIEW_Start+0x168>)
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006e70:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <SEGGER_SYSVIEW_Start+0x168>)
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e74:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006e76:	f000 f9eb 	bl	8007250 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006e7a:	f000 f9b1 	bl	80071e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006e7e:	f000 fc01 	bl	8007684 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006e82:	bf00      	nop
 8006e84:	3730      	adds	r7, #48	@ 0x30
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200137f0 	.word	0x200137f0
 8006e90:	0800852c 	.word	0x0800852c
 8006e94:	20013820 	.word	0x20013820

08006e98 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea2:	f04f 0120 	mov.w	r1, #32
 8006ea6:	f381 8811 	msr	BASEPRI, r1
 8006eaa:	607b      	str	r3, [r7, #4]
 8006eac:	480b      	ldr	r0, [pc, #44]	@ (8006edc <SEGGER_SYSVIEW_Stop+0x44>)
 8006eae:	f7ff fb19 	bl	80064e4 <_PreparePacket>
 8006eb2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ebc:	220b      	movs	r2, #11
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6838      	ldr	r0, [r7, #0]
 8006ec2:	f7ff fbfb 	bl	80066bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006ec6:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f383 8811 	msr	BASEPRI, r3
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20013820 	.word	0x20013820
 8006ee0:	200137f0 	.word	0x200137f0

08006ee4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08c      	sub	sp, #48	@ 0x30
 8006ee8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006eea:	f3ef 8311 	mrs	r3, BASEPRI
 8006eee:	f04f 0120 	mov.w	r1, #32
 8006ef2:	f381 8811 	msr	BASEPRI, r1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	4845      	ldr	r0, [pc, #276]	@ (8007010 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006efa:	f7ff faf3 	bl	80064e4 <_PreparePacket>
 8006efe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f08:	4b42      	ldr	r3, [pc, #264]	@ (8007014 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f0e:	e00b      	b.n	8006f28 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f16:	1c59      	adds	r1, r3, #1
 8006f18:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	09db      	lsrs	r3, r3, #7
 8006f26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f2c:	d8f0      	bhi.n	8006f10 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f42:	4b34      	ldr	r3, [pc, #208]	@ (8007014 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	623b      	str	r3, [r7, #32]
 8006f48:	e00b      	b.n	8006f62 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	09db      	lsrs	r3, r3, #7
 8006f60:	623b      	str	r3, [r7, #32]
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f66:	d8f0      	bhi.n	8006f4a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	4b25      	ldr	r3, [pc, #148]	@ (8007014 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e00b      	b.n	8006f9c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	1c59      	adds	r1, r3, #1
 8006f8c:	61f9      	str	r1, [r7, #28]
 8006f8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	09db      	lsrs	r3, r3, #7
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fa0:	d8f0      	bhi.n	8006f84 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	61fa      	str	r2, [r7, #28]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	613b      	str	r3, [r7, #16]
 8006fba:	e00b      	b.n	8006fd4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	1c59      	adds	r1, r3, #1
 8006fc4:	6179      	str	r1, [r7, #20]
 8006fc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	09db      	lsrs	r3, r3, #7
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fd8:	d8f0      	bhi.n	8006fbc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	617a      	str	r2, [r7, #20]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006fea:	2218      	movs	r2, #24
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	68b8      	ldr	r0, [r7, #8]
 8006ff0:	f7ff fb64 	bl	80066bc <_SendPacket>
  RECORD_END();
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ffa:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007002:	4b04      	ldr	r3, [pc, #16]	@ (8007014 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	4798      	blx	r3
  }
}
 8007008:	bf00      	nop
 800700a:	3730      	adds	r7, #48	@ 0x30
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20013820 	.word	0x20013820
 8007014:	200137f0 	.word	0x200137f0

08007018 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b092      	sub	sp, #72	@ 0x48
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007020:	f3ef 8311 	mrs	r3, BASEPRI
 8007024:	f04f 0120 	mov.w	r1, #32
 8007028:	f381 8811 	msr	BASEPRI, r1
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	486a      	ldr	r0, [pc, #424]	@ (80071d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007030:	f7ff fa58 	bl	80064e4 <_PreparePacket>
 8007034:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	647b      	str	r3, [r7, #68]	@ 0x44
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b66      	ldr	r3, [pc, #408]	@ (80071dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	643b      	str	r3, [r7, #64]	@ 0x40
 800704a:	e00b      	b.n	8007064 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800704c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	6479      	str	r1, [r7, #68]	@ 0x44
 8007056:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007060:	09db      	lsrs	r3, r3, #7
 8007062:	643b      	str	r3, [r7, #64]	@ 0x40
 8007064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007066:	2b7f      	cmp	r3, #127	@ 0x7f
 8007068:	d8f0      	bhi.n	800704c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800706a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007078:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007084:	e00b      	b.n	800709e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	b2da      	uxtb	r2, r3
 800708a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708c:	1c59      	adds	r1, r3, #1
 800708e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007090:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	09db      	lsrs	r3, r3, #7
 800709c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800709e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80070a2:	d8f0      	bhi.n	8007086 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80070a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80070aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	4619      	mov	r1, r3
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f7ff f9e1 	bl	8006484 <_EncodeStr>
 80070c2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80070c4:	2209      	movs	r2, #9
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	6938      	ldr	r0, [r7, #16]
 80070ca:	f7ff faf7 	bl	80066bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4b40      	ldr	r3, [pc, #256]	@ (80071dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070e2:	e00b      	b.n	80070fc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ea:	1c59      	adds	r1, r3, #1
 80070ec:	6379      	str	r1, [r7, #52]	@ 0x34
 80070ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	09db      	lsrs	r3, r3, #7
 80070fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007100:	d8f0      	bhi.n	80070e4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	637a      	str	r2, [r7, #52]	@ 0x34
 8007108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007110:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800711c:	e00b      	b.n	8007136 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	b2da      	uxtb	r2, r3
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	1c59      	adds	r1, r3, #1
 8007126:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007128:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	09db      	lsrs	r3, r3, #7
 8007134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	2b7f      	cmp	r3, #127	@ 0x7f
 800713a:	d8f0      	bhi.n	800711e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800713c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	e00b      	b.n	8007170 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	6279      	str	r1, [r7, #36]	@ 0x24
 8007162:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	09db      	lsrs	r3, r3, #7
 800716e:	623b      	str	r3, [r7, #32]
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	2b7f      	cmp	r3, #127	@ 0x7f
 8007174:	d8f0      	bhi.n	8007158 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	627a      	str	r2, [r7, #36]	@ 0x24
 800717c:	6a3a      	ldr	r2, [r7, #32]
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	2300      	movs	r3, #0
 800718c:	61bb      	str	r3, [r7, #24]
 800718e:	e00b      	b.n	80071a8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	61f9      	str	r1, [r7, #28]
 800719a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	09db      	lsrs	r3, r3, #7
 80071a6:	61bb      	str	r3, [r7, #24]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ac:	d8f0      	bhi.n	8007190 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	61fa      	str	r2, [r7, #28]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80071be:	2215      	movs	r2, #21
 80071c0:	68f9      	ldr	r1, [r7, #12]
 80071c2:	6938      	ldr	r0, [r7, #16]
 80071c4:	f7ff fa7a 	bl	80066bc <_SendPacket>
  RECORD_END();
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f383 8811 	msr	BASEPRI, r3
}
 80071ce:	bf00      	nop
 80071d0:	3748      	adds	r7, #72	@ 0x48
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20013820 	.word	0x20013820
 80071dc:	200137f0 	.word	0x200137f0

080071e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80071e4:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d008      	beq.n	80071fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80071ec:	4b05      	ldr	r3, [pc, #20]	@ (8007204 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80071f6:	4b03      	ldr	r3, [pc, #12]	@ (8007204 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4798      	blx	r3
  }
}
 80071fe:	bf00      	nop
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	200137f0 	.word	0x200137f0

08007208 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007210:	f3ef 8311 	mrs	r3, BASEPRI
 8007214:	f04f 0120 	mov.w	r1, #32
 8007218:	f381 8811 	msr	BASEPRI, r1
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	480b      	ldr	r0, [pc, #44]	@ (800724c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007220:	f7ff f960 	bl	80064e4 <_PreparePacket>
 8007224:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007226:	2280      	movs	r2, #128	@ 0x80
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	6938      	ldr	r0, [r7, #16]
 800722c:	f7ff f92a 	bl	8006484 <_EncodeStr>
 8007230:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007232:	220e      	movs	r2, #14
 8007234:	68f9      	ldr	r1, [r7, #12]
 8007236:	6938      	ldr	r0, [r7, #16]
 8007238:	f7ff fa40 	bl	80066bc <_SendPacket>
  RECORD_END();
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f383 8811 	msr	BASEPRI, r3
}
 8007242:	bf00      	nop
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20013820 	.word	0x20013820

08007250 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007256:	4b15      	ldr	r3, [pc, #84]	@ (80072ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d01a      	beq.n	8007294 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800725e:	4b13      	ldr	r3, [pc, #76]	@ (80072ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007268:	4b10      	ldr	r3, [pc, #64]	@ (80072ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4798      	blx	r3
 8007270:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007274:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	000a      	movs	r2, r1
 8007284:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007286:	4613      	mov	r3, r2
 8007288:	461a      	mov	r2, r3
 800728a:	4621      	mov	r1, r4
 800728c:	200d      	movs	r0, #13
 800728e:	f7ff fcef 	bl	8006c70 <SEGGER_SYSVIEW_RecordU32x2>
 8007292:	e006      	b.n	80072a2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007294:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	200c      	movs	r0, #12
 800729c:	f7ff fcac 	bl	8006bf8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd90      	pop	{r4, r7, pc}
 80072aa:	bf00      	nop
 80072ac:	200137f0 	.word	0x200137f0
 80072b0:	e0001004 	.word	0xe0001004

080072b4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072ba:	f3ef 8311 	mrs	r3, BASEPRI
 80072be:	f04f 0120 	mov.w	r1, #32
 80072c2:	f381 8811 	msr	BASEPRI, r1
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	4819      	ldr	r0, [pc, #100]	@ (8007330 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80072ca:	f7ff f90b 	bl	80064e4 <_PreparePacket>
 80072ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80072d4:	4b17      	ldr	r3, [pc, #92]	@ (8007334 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072dc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	e00b      	b.n	8007300 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	1c59      	adds	r1, r3, #1
 80072f0:	6179      	str	r1, [r7, #20]
 80072f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	09db      	lsrs	r3, r3, #7
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2b7f      	cmp	r3, #127	@ 0x7f
 8007304:	d8f0      	bhi.n	80072e8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	617a      	str	r2, [r7, #20]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007316:	2202      	movs	r2, #2
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	68b8      	ldr	r0, [r7, #8]
 800731c:	f7ff f9ce 	bl	80066bc <_SendPacket>
  RECORD_END();
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f383 8811 	msr	BASEPRI, r3
}
 8007326:	bf00      	nop
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20013820 	.word	0x20013820
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800733e:	f3ef 8311 	mrs	r3, BASEPRI
 8007342:	f04f 0120 	mov.w	r1, #32
 8007346:	f381 8811 	msr	BASEPRI, r1
 800734a:	607b      	str	r3, [r7, #4]
 800734c:	4807      	ldr	r0, [pc, #28]	@ (800736c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800734e:	f7ff f8c9 	bl	80064e4 <_PreparePacket>
 8007352:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007354:	2203      	movs	r2, #3
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6838      	ldr	r0, [r7, #0]
 800735a:	f7ff f9af 	bl	80066bc <_SendPacket>
  RECORD_END();
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f383 8811 	msr	BASEPRI, r3
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20013820 	.word	0x20013820

08007370 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007376:	f3ef 8311 	mrs	r3, BASEPRI
 800737a:	f04f 0120 	mov.w	r1, #32
 800737e:	f381 8811 	msr	BASEPRI, r1
 8007382:	607b      	str	r3, [r7, #4]
 8007384:	4807      	ldr	r0, [pc, #28]	@ (80073a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007386:	f7ff f8ad 	bl	80064e4 <_PreparePacket>
 800738a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800738c:	2211      	movs	r2, #17
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6838      	ldr	r0, [r7, #0]
 8007392:	f7ff f993 	bl	80066bc <_SendPacket>
  RECORD_END();
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f383 8811 	msr	BASEPRI, r3
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20013820 	.word	0x20013820

080073a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073b0:	f3ef 8311 	mrs	r3, BASEPRI
 80073b4:	f04f 0120 	mov.w	r1, #32
 80073b8:	f381 8811 	msr	BASEPRI, r1
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	4819      	ldr	r0, [pc, #100]	@ (8007424 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80073c0:	f7ff f890 	bl	80064e4 <_PreparePacket>
 80073c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80073ca:	4b17      	ldr	r3, [pc, #92]	@ (8007428 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	e00b      	b.n	80073f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	1c59      	adds	r1, r3, #1
 80073e6:	61f9      	str	r1, [r7, #28]
 80073e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	09db      	lsrs	r3, r3, #7
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80073fa:	d8f0      	bhi.n	80073de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	61fa      	str	r2, [r7, #28]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800740c:	2208      	movs	r2, #8
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	6938      	ldr	r0, [r7, #16]
 8007412:	f7ff f953 	bl	80066bc <_SendPacket>
  RECORD_END();
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f383 8811 	msr	BASEPRI, r3
}
 800741c:	bf00      	nop
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20013820 	.word	0x20013820
 8007428:	200137f0 	.word	0x200137f0

0800742c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007434:	f3ef 8311 	mrs	r3, BASEPRI
 8007438:	f04f 0120 	mov.w	r1, #32
 800743c:	f381 8811 	msr	BASEPRI, r1
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	4819      	ldr	r0, [pc, #100]	@ (80074a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007444:	f7ff f84e 	bl	80064e4 <_PreparePacket>
 8007448:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800744e:	4b17      	ldr	r3, [pc, #92]	@ (80074ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	e00b      	b.n	800747a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	1c59      	adds	r1, r3, #1
 800746a:	61f9      	str	r1, [r7, #28]
 800746c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	09db      	lsrs	r3, r3, #7
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b7f      	cmp	r3, #127	@ 0x7f
 800747e:	d8f0      	bhi.n	8007462 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	61fa      	str	r2, [r7, #28]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007490:	2204      	movs	r2, #4
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	6938      	ldr	r0, [r7, #16]
 8007496:	f7ff f911 	bl	80066bc <_SendPacket>
  RECORD_END();
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f383 8811 	msr	BASEPRI, r3
}
 80074a0:	bf00      	nop
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20013820 	.word	0x20013820
 80074ac:	200137f0 	.word	0x200137f0

080074b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074b8:	f3ef 8311 	mrs	r3, BASEPRI
 80074bc:	f04f 0120 	mov.w	r1, #32
 80074c0:	f381 8811 	msr	BASEPRI, r1
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	4819      	ldr	r0, [pc, #100]	@ (800752c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80074c8:	f7ff f80c 	bl	80064e4 <_PreparePacket>
 80074cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80074d2:	4b17      	ldr	r3, [pc, #92]	@ (8007530 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	e00b      	b.n	80074fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	1c59      	adds	r1, r3, #1
 80074ee:	61f9      	str	r1, [r7, #28]
 80074f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	09db      	lsrs	r3, r3, #7
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b7f      	cmp	r3, #127	@ 0x7f
 8007502:	d8f0      	bhi.n	80074e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	61fa      	str	r2, [r7, #28]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007514:	2206      	movs	r2, #6
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	6938      	ldr	r0, [r7, #16]
 800751a:	f7ff f8cf 	bl	80066bc <_SendPacket>
  RECORD_END();
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f383 8811 	msr	BASEPRI, r3
}
 8007524:	bf00      	nop
 8007526:	3720      	adds	r7, #32
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20013820 	.word	0x20013820
 8007530:	200137f0 	.word	0x200137f0

08007534 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b08c      	sub	sp, #48	@ 0x30
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800753e:	4b40      	ldr	r3, [pc, #256]	@ (8007640 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d077      	beq.n	8007636 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007546:	4b3e      	ldr	r3, [pc, #248]	@ (8007640 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800754c:	2300      	movs	r3, #0
 800754e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007550:	e008      	b.n	8007564 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	3301      	adds	r3, #1
 8007562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007568:	429a      	cmp	r2, r3
 800756a:	d3f2      	bcc.n	8007552 <SEGGER_SYSVIEW_SendModule+0x1e>
 800756c:	e000      	b.n	8007570 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800756e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d055      	beq.n	8007622 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007576:	f3ef 8311 	mrs	r3, BASEPRI
 800757a:	f04f 0120 	mov.w	r1, #32
 800757e:	f381 8811 	msr	BASEPRI, r1
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	482f      	ldr	r0, [pc, #188]	@ (8007644 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007586:	f7fe ffad 	bl	80064e4 <_PreparePacket>
 800758a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	623b      	str	r3, [r7, #32]
 8007598:	e00b      	b.n	80075b2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	b2da      	uxtb	r2, r3
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	1c59      	adds	r1, r3, #1
 80075a2:	6279      	str	r1, [r7, #36]	@ 0x24
 80075a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	09db      	lsrs	r3, r3, #7
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80075b6:	d8f0      	bhi.n	800759a <SEGGER_SYSVIEW_SendModule+0x66>
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80075be:	6a3a      	ldr	r2, [r7, #32]
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	e00b      	b.n	80075ec <SEGGER_SYSVIEW_SendModule+0xb8>
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	1c59      	adds	r1, r3, #1
 80075dc:	61f9      	str	r1, [r7, #28]
 80075de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	09db      	lsrs	r3, r3, #7
 80075ea:	61bb      	str	r3, [r7, #24]
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80075f0:	d8f0      	bhi.n	80075d4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	61fa      	str	r2, [r7, #28]
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2280      	movs	r2, #128	@ 0x80
 8007608:	4619      	mov	r1, r3
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7fe ff3a 	bl	8006484 <_EncodeStr>
 8007610:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007612:	2216      	movs	r2, #22
 8007614:	68f9      	ldr	r1, [r7, #12]
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f7ff f850 	bl	80066bc <_SendPacket>
      RECORD_END();
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d006      	beq.n	8007636 <SEGGER_SYSVIEW_SendModule+0x102>
 8007628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4798      	blx	r3
    }
  }
}
 8007636:	bf00      	nop
 8007638:	3730      	adds	r7, #48	@ 0x30
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20013818 	.word	0x20013818
 8007644:	20013820 	.word	0x20013820

08007648 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800764e:	4b0c      	ldr	r3, [pc, #48]	@ (8007680 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00f      	beq.n	8007676 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007656:	4b0a      	ldr	r3, [pc, #40]	@ (8007680 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f2      	bne.n	800765c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007676:	bf00      	nop
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20013818 	.word	0x20013818

08007684 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800768a:	f3ef 8311 	mrs	r3, BASEPRI
 800768e:	f04f 0120 	mov.w	r1, #32
 8007692:	f381 8811 	msr	BASEPRI, r1
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	4817      	ldr	r0, [pc, #92]	@ (80076f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800769a:	f7fe ff23 	bl	80064e4 <_PreparePacket>
 800769e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	4b14      	ldr	r3, [pc, #80]	@ (80076fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	e00b      	b.n	80076c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	1c59      	adds	r1, r3, #1
 80076b8:	6179      	str	r1, [r7, #20]
 80076ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	09db      	lsrs	r3, r3, #7
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80076cc:	d8f0      	bhi.n	80076b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	617a      	str	r2, [r7, #20]
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80076de:	221b      	movs	r2, #27
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	68b8      	ldr	r0, [r7, #8]
 80076e4:	f7fe ffea 	bl	80066bc <_SendPacket>
  RECORD_END();
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20013820 	.word	0x20013820
 80076fc:	2001381c 	.word	0x2001381c

08007700 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8007700:	b40f      	push	{r0, r1, r2, r3}
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8007708:	f107 0314 	add.w	r3, r7, #20
 800770c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800770e:	1d3b      	adds	r3, r7, #4
 8007710:	461a      	mov	r2, r3
 8007712:	2100      	movs	r1, #0
 8007714:	6938      	ldr	r0, [r7, #16]
 8007716:	f7ff f93f 	bl	8006998 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007724:	b004      	add	sp, #16
 8007726:	4770      	bx	lr

08007728 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	@ 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007730:	f3ef 8311 	mrs	r3, BASEPRI
 8007734:	f04f 0120 	mov.w	r1, #32
 8007738:	f381 8811 	msr	BASEPRI, r1
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	4827      	ldr	r0, [pc, #156]	@ (80077dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007740:	f7fe fed0 	bl	80064e4 <_PreparePacket>
 8007744:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007746:	2280      	movs	r2, #128	@ 0x80
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	6938      	ldr	r0, [r7, #16]
 800774c:	f7fe fe9a 	bl	8006484 <_EncodeStr>
 8007750:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	627b      	str	r3, [r7, #36]	@ 0x24
 8007756:	2301      	movs	r3, #1
 8007758:	623b      	str	r3, [r7, #32]
 800775a:	e00b      	b.n	8007774 <SEGGER_SYSVIEW_Warn+0x4c>
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	b2da      	uxtb	r2, r3
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	1c59      	adds	r1, r3, #1
 8007764:	6279      	str	r1, [r7, #36]	@ 0x24
 8007766:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	09db      	lsrs	r3, r3, #7
 8007772:	623b      	str	r3, [r7, #32]
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	2b7f      	cmp	r3, #127	@ 0x7f
 8007778:	d8f0      	bhi.n	800775c <SEGGER_SYSVIEW_Warn+0x34>
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007780:	6a3a      	ldr	r2, [r7, #32]
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	2300      	movs	r3, #0
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	e00b      	b.n	80077ac <SEGGER_SYSVIEW_Warn+0x84>
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	b2da      	uxtb	r2, r3
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	1c59      	adds	r1, r3, #1
 800779c:	61f9      	str	r1, [r7, #28]
 800779e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	09db      	lsrs	r3, r3, #7
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80077b0:	d8f0      	bhi.n	8007794 <SEGGER_SYSVIEW_Warn+0x6c>
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	61fa      	str	r2, [r7, #28]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80077c2:	221a      	movs	r2, #26
 80077c4:	68f9      	ldr	r1, [r7, #12]
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f7fe ff78 	bl	80066bc <_SendPacket>
  RECORD_END();
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f383 8811 	msr	BASEPRI, r3
}
 80077d2:	bf00      	nop
 80077d4:	3728      	adds	r7, #40	@ 0x28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20013820 	.word	0x20013820

080077e0 <siprintf>:
 80077e0:	b40e      	push	{r1, r2, r3}
 80077e2:	b500      	push	{lr}
 80077e4:	b09c      	sub	sp, #112	@ 0x70
 80077e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80077e8:	9002      	str	r0, [sp, #8]
 80077ea:	9006      	str	r0, [sp, #24]
 80077ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077f0:	4809      	ldr	r0, [pc, #36]	@ (8007818 <siprintf+0x38>)
 80077f2:	9107      	str	r1, [sp, #28]
 80077f4:	9104      	str	r1, [sp, #16]
 80077f6:	4909      	ldr	r1, [pc, #36]	@ (800781c <siprintf+0x3c>)
 80077f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fc:	9105      	str	r1, [sp, #20]
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	a902      	add	r1, sp, #8
 8007804:	f000 f9ac 	bl	8007b60 <_svfiprintf_r>
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	b01c      	add	sp, #112	@ 0x70
 8007810:	f85d eb04 	ldr.w	lr, [sp], #4
 8007814:	b003      	add	sp, #12
 8007816:	4770      	bx	lr
 8007818:	20000014 	.word	0x20000014
 800781c:	ffff0208 	.word	0xffff0208

08007820 <memcmp>:
 8007820:	b510      	push	{r4, lr}
 8007822:	3901      	subs	r1, #1
 8007824:	4402      	add	r2, r0
 8007826:	4290      	cmp	r0, r2
 8007828:	d101      	bne.n	800782e <memcmp+0xe>
 800782a:	2000      	movs	r0, #0
 800782c:	e005      	b.n	800783a <memcmp+0x1a>
 800782e:	7803      	ldrb	r3, [r0, #0]
 8007830:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007834:	42a3      	cmp	r3, r4
 8007836:	d001      	beq.n	800783c <memcmp+0x1c>
 8007838:	1b18      	subs	r0, r3, r4
 800783a:	bd10      	pop	{r4, pc}
 800783c:	3001      	adds	r0, #1
 800783e:	e7f2      	b.n	8007826 <memcmp+0x6>

08007840 <memset>:
 8007840:	4402      	add	r2, r0
 8007842:	4603      	mov	r3, r0
 8007844:	4293      	cmp	r3, r2
 8007846:	d100      	bne.n	800784a <memset+0xa>
 8007848:	4770      	bx	lr
 800784a:	f803 1b01 	strb.w	r1, [r3], #1
 800784e:	e7f9      	b.n	8007844 <memset+0x4>

08007850 <__libc_init_array>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	4d0d      	ldr	r5, [pc, #52]	@ (8007888 <__libc_init_array+0x38>)
 8007854:	4c0d      	ldr	r4, [pc, #52]	@ (800788c <__libc_init_array+0x3c>)
 8007856:	1b64      	subs	r4, r4, r5
 8007858:	10a4      	asrs	r4, r4, #2
 800785a:	2600      	movs	r6, #0
 800785c:	42a6      	cmp	r6, r4
 800785e:	d109      	bne.n	8007874 <__libc_init_array+0x24>
 8007860:	4d0b      	ldr	r5, [pc, #44]	@ (8007890 <__libc_init_array+0x40>)
 8007862:	4c0c      	ldr	r4, [pc, #48]	@ (8007894 <__libc_init_array+0x44>)
 8007864:	f000 fcc8 	bl	80081f8 <_init>
 8007868:	1b64      	subs	r4, r4, r5
 800786a:	10a4      	asrs	r4, r4, #2
 800786c:	2600      	movs	r6, #0
 800786e:	42a6      	cmp	r6, r4
 8007870:	d105      	bne.n	800787e <__libc_init_array+0x2e>
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	f855 3b04 	ldr.w	r3, [r5], #4
 8007878:	4798      	blx	r3
 800787a:	3601      	adds	r6, #1
 800787c:	e7ee      	b.n	800785c <__libc_init_array+0xc>
 800787e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007882:	4798      	blx	r3
 8007884:	3601      	adds	r6, #1
 8007886:	e7f2      	b.n	800786e <__libc_init_array+0x1e>
 8007888:	08008574 	.word	0x08008574
 800788c:	08008574 	.word	0x08008574
 8007890:	08008574 	.word	0x08008574
 8007894:	08008578 	.word	0x08008578

08007898 <__retarget_lock_acquire_recursive>:
 8007898:	4770      	bx	lr

0800789a <__retarget_lock_release_recursive>:
 800789a:	4770      	bx	lr

0800789c <memcpy>:
 800789c:	440a      	add	r2, r1
 800789e:	4291      	cmp	r1, r2
 80078a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a4:	d100      	bne.n	80078a8 <memcpy+0xc>
 80078a6:	4770      	bx	lr
 80078a8:	b510      	push	{r4, lr}
 80078aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b2:	4291      	cmp	r1, r2
 80078b4:	d1f9      	bne.n	80078aa <memcpy+0xe>
 80078b6:	bd10      	pop	{r4, pc}

080078b8 <_free_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4605      	mov	r5, r0
 80078bc:	2900      	cmp	r1, #0
 80078be:	d041      	beq.n	8007944 <_free_r+0x8c>
 80078c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c4:	1f0c      	subs	r4, r1, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfb8      	it	lt
 80078ca:	18e4      	addlt	r4, r4, r3
 80078cc:	f000 f8e0 	bl	8007a90 <__malloc_lock>
 80078d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007948 <_free_r+0x90>)
 80078d2:	6813      	ldr	r3, [r2, #0]
 80078d4:	b933      	cbnz	r3, 80078e4 <_free_r+0x2c>
 80078d6:	6063      	str	r3, [r4, #4]
 80078d8:	6014      	str	r4, [r2, #0]
 80078da:	4628      	mov	r0, r5
 80078dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078e0:	f000 b8dc 	b.w	8007a9c <__malloc_unlock>
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	d908      	bls.n	80078fa <_free_r+0x42>
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	1821      	adds	r1, r4, r0
 80078ec:	428b      	cmp	r3, r1
 80078ee:	bf01      	itttt	eq
 80078f0:	6819      	ldreq	r1, [r3, #0]
 80078f2:	685b      	ldreq	r3, [r3, #4]
 80078f4:	1809      	addeq	r1, r1, r0
 80078f6:	6021      	streq	r1, [r4, #0]
 80078f8:	e7ed      	b.n	80078d6 <_free_r+0x1e>
 80078fa:	461a      	mov	r2, r3
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	b10b      	cbz	r3, 8007904 <_free_r+0x4c>
 8007900:	42a3      	cmp	r3, r4
 8007902:	d9fa      	bls.n	80078fa <_free_r+0x42>
 8007904:	6811      	ldr	r1, [r2, #0]
 8007906:	1850      	adds	r0, r2, r1
 8007908:	42a0      	cmp	r0, r4
 800790a:	d10b      	bne.n	8007924 <_free_r+0x6c>
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	4401      	add	r1, r0
 8007910:	1850      	adds	r0, r2, r1
 8007912:	4283      	cmp	r3, r0
 8007914:	6011      	str	r1, [r2, #0]
 8007916:	d1e0      	bne.n	80078da <_free_r+0x22>
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	6053      	str	r3, [r2, #4]
 800791e:	4408      	add	r0, r1
 8007920:	6010      	str	r0, [r2, #0]
 8007922:	e7da      	b.n	80078da <_free_r+0x22>
 8007924:	d902      	bls.n	800792c <_free_r+0x74>
 8007926:	230c      	movs	r3, #12
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	e7d6      	b.n	80078da <_free_r+0x22>
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	1821      	adds	r1, r4, r0
 8007930:	428b      	cmp	r3, r1
 8007932:	bf04      	itt	eq
 8007934:	6819      	ldreq	r1, [r3, #0]
 8007936:	685b      	ldreq	r3, [r3, #4]
 8007938:	6063      	str	r3, [r4, #4]
 800793a:	bf04      	itt	eq
 800793c:	1809      	addeq	r1, r1, r0
 800793e:	6021      	streq	r1, [r4, #0]
 8007940:	6054      	str	r4, [r2, #4]
 8007942:	e7ca      	b.n	80078da <_free_r+0x22>
 8007944:	bd38      	pop	{r3, r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	20013a48 	.word	0x20013a48

0800794c <sbrk_aligned>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	4e0f      	ldr	r6, [pc, #60]	@ (800798c <sbrk_aligned+0x40>)
 8007950:	460c      	mov	r4, r1
 8007952:	6831      	ldr	r1, [r6, #0]
 8007954:	4605      	mov	r5, r0
 8007956:	b911      	cbnz	r1, 800795e <sbrk_aligned+0x12>
 8007958:	f000 fba6 	bl	80080a8 <_sbrk_r>
 800795c:	6030      	str	r0, [r6, #0]
 800795e:	4621      	mov	r1, r4
 8007960:	4628      	mov	r0, r5
 8007962:	f000 fba1 	bl	80080a8 <_sbrk_r>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	d103      	bne.n	8007972 <sbrk_aligned+0x26>
 800796a:	f04f 34ff 	mov.w	r4, #4294967295
 800796e:	4620      	mov	r0, r4
 8007970:	bd70      	pop	{r4, r5, r6, pc}
 8007972:	1cc4      	adds	r4, r0, #3
 8007974:	f024 0403 	bic.w	r4, r4, #3
 8007978:	42a0      	cmp	r0, r4
 800797a:	d0f8      	beq.n	800796e <sbrk_aligned+0x22>
 800797c:	1a21      	subs	r1, r4, r0
 800797e:	4628      	mov	r0, r5
 8007980:	f000 fb92 	bl	80080a8 <_sbrk_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d1f2      	bne.n	800796e <sbrk_aligned+0x22>
 8007988:	e7ef      	b.n	800796a <sbrk_aligned+0x1e>
 800798a:	bf00      	nop
 800798c:	20013a44 	.word	0x20013a44

08007990 <_malloc_r>:
 8007990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007994:	1ccd      	adds	r5, r1, #3
 8007996:	f025 0503 	bic.w	r5, r5, #3
 800799a:	3508      	adds	r5, #8
 800799c:	2d0c      	cmp	r5, #12
 800799e:	bf38      	it	cc
 80079a0:	250c      	movcc	r5, #12
 80079a2:	2d00      	cmp	r5, #0
 80079a4:	4606      	mov	r6, r0
 80079a6:	db01      	blt.n	80079ac <_malloc_r+0x1c>
 80079a8:	42a9      	cmp	r1, r5
 80079aa:	d904      	bls.n	80079b6 <_malloc_r+0x26>
 80079ac:	230c      	movs	r3, #12
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	2000      	movs	r0, #0
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a8c <_malloc_r+0xfc>
 80079ba:	f000 f869 	bl	8007a90 <__malloc_lock>
 80079be:	f8d8 3000 	ldr.w	r3, [r8]
 80079c2:	461c      	mov	r4, r3
 80079c4:	bb44      	cbnz	r4, 8007a18 <_malloc_r+0x88>
 80079c6:	4629      	mov	r1, r5
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff ffbf 	bl	800794c <sbrk_aligned>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	4604      	mov	r4, r0
 80079d2:	d158      	bne.n	8007a86 <_malloc_r+0xf6>
 80079d4:	f8d8 4000 	ldr.w	r4, [r8]
 80079d8:	4627      	mov	r7, r4
 80079da:	2f00      	cmp	r7, #0
 80079dc:	d143      	bne.n	8007a66 <_malloc_r+0xd6>
 80079de:	2c00      	cmp	r4, #0
 80079e0:	d04b      	beq.n	8007a7a <_malloc_r+0xea>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	4639      	mov	r1, r7
 80079e6:	4630      	mov	r0, r6
 80079e8:	eb04 0903 	add.w	r9, r4, r3
 80079ec:	f000 fb5c 	bl	80080a8 <_sbrk_r>
 80079f0:	4581      	cmp	r9, r0
 80079f2:	d142      	bne.n	8007a7a <_malloc_r+0xea>
 80079f4:	6821      	ldr	r1, [r4, #0]
 80079f6:	1a6d      	subs	r5, r5, r1
 80079f8:	4629      	mov	r1, r5
 80079fa:	4630      	mov	r0, r6
 80079fc:	f7ff ffa6 	bl	800794c <sbrk_aligned>
 8007a00:	3001      	adds	r0, #1
 8007a02:	d03a      	beq.n	8007a7a <_malloc_r+0xea>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	442b      	add	r3, r5
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	bb62      	cbnz	r2, 8007a6c <_malloc_r+0xdc>
 8007a12:	f8c8 7000 	str.w	r7, [r8]
 8007a16:	e00f      	b.n	8007a38 <_malloc_r+0xa8>
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	1b52      	subs	r2, r2, r5
 8007a1c:	d420      	bmi.n	8007a60 <_malloc_r+0xd0>
 8007a1e:	2a0b      	cmp	r2, #11
 8007a20:	d917      	bls.n	8007a52 <_malloc_r+0xc2>
 8007a22:	1961      	adds	r1, r4, r5
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	6025      	str	r5, [r4, #0]
 8007a28:	bf18      	it	ne
 8007a2a:	6059      	strne	r1, [r3, #4]
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	bf08      	it	eq
 8007a30:	f8c8 1000 	streq.w	r1, [r8]
 8007a34:	5162      	str	r2, [r4, r5]
 8007a36:	604b      	str	r3, [r1, #4]
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f000 f82f 	bl	8007a9c <__malloc_unlock>
 8007a3e:	f104 000b 	add.w	r0, r4, #11
 8007a42:	1d23      	adds	r3, r4, #4
 8007a44:	f020 0007 	bic.w	r0, r0, #7
 8007a48:	1ac2      	subs	r2, r0, r3
 8007a4a:	bf1c      	itt	ne
 8007a4c:	1a1b      	subne	r3, r3, r0
 8007a4e:	50a3      	strne	r3, [r4, r2]
 8007a50:	e7af      	b.n	80079b2 <_malloc_r+0x22>
 8007a52:	6862      	ldr	r2, [r4, #4]
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	bf0c      	ite	eq
 8007a58:	f8c8 2000 	streq.w	r2, [r8]
 8007a5c:	605a      	strne	r2, [r3, #4]
 8007a5e:	e7eb      	b.n	8007a38 <_malloc_r+0xa8>
 8007a60:	4623      	mov	r3, r4
 8007a62:	6864      	ldr	r4, [r4, #4]
 8007a64:	e7ae      	b.n	80079c4 <_malloc_r+0x34>
 8007a66:	463c      	mov	r4, r7
 8007a68:	687f      	ldr	r7, [r7, #4]
 8007a6a:	e7b6      	b.n	80079da <_malloc_r+0x4a>
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	d1fb      	bne.n	8007a6c <_malloc_r+0xdc>
 8007a74:	2300      	movs	r3, #0
 8007a76:	6053      	str	r3, [r2, #4]
 8007a78:	e7de      	b.n	8007a38 <_malloc_r+0xa8>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f000 f80c 	bl	8007a9c <__malloc_unlock>
 8007a84:	e794      	b.n	80079b0 <_malloc_r+0x20>
 8007a86:	6005      	str	r5, [r0, #0]
 8007a88:	e7d6      	b.n	8007a38 <_malloc_r+0xa8>
 8007a8a:	bf00      	nop
 8007a8c:	20013a48 	.word	0x20013a48

08007a90 <__malloc_lock>:
 8007a90:	4801      	ldr	r0, [pc, #4]	@ (8007a98 <__malloc_lock+0x8>)
 8007a92:	f7ff bf01 	b.w	8007898 <__retarget_lock_acquire_recursive>
 8007a96:	bf00      	nop
 8007a98:	20013a40 	.word	0x20013a40

08007a9c <__malloc_unlock>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	@ (8007aa4 <__malloc_unlock+0x8>)
 8007a9e:	f7ff befc 	b.w	800789a <__retarget_lock_release_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	20013a40 	.word	0x20013a40

08007aa8 <__ssputs_r>:
 8007aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	688e      	ldr	r6, [r1, #8]
 8007aae:	461f      	mov	r7, r3
 8007ab0:	42be      	cmp	r6, r7
 8007ab2:	680b      	ldr	r3, [r1, #0]
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	4690      	mov	r8, r2
 8007aba:	d82d      	bhi.n	8007b18 <__ssputs_r+0x70>
 8007abc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ac0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ac4:	d026      	beq.n	8007b14 <__ssputs_r+0x6c>
 8007ac6:	6965      	ldr	r5, [r4, #20]
 8007ac8:	6909      	ldr	r1, [r1, #16]
 8007aca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ace:	eba3 0901 	sub.w	r9, r3, r1
 8007ad2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ad6:	1c7b      	adds	r3, r7, #1
 8007ad8:	444b      	add	r3, r9
 8007ada:	106d      	asrs	r5, r5, #1
 8007adc:	429d      	cmp	r5, r3
 8007ade:	bf38      	it	cc
 8007ae0:	461d      	movcc	r5, r3
 8007ae2:	0553      	lsls	r3, r2, #21
 8007ae4:	d527      	bpl.n	8007b36 <__ssputs_r+0x8e>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	f7ff ff52 	bl	8007990 <_malloc_r>
 8007aec:	4606      	mov	r6, r0
 8007aee:	b360      	cbz	r0, 8007b4a <__ssputs_r+0xa2>
 8007af0:	6921      	ldr	r1, [r4, #16]
 8007af2:	464a      	mov	r2, r9
 8007af4:	f7ff fed2 	bl	800789c <memcpy>
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	6126      	str	r6, [r4, #16]
 8007b06:	6165      	str	r5, [r4, #20]
 8007b08:	444e      	add	r6, r9
 8007b0a:	eba5 0509 	sub.w	r5, r5, r9
 8007b0e:	6026      	str	r6, [r4, #0]
 8007b10:	60a5      	str	r5, [r4, #8]
 8007b12:	463e      	mov	r6, r7
 8007b14:	42be      	cmp	r6, r7
 8007b16:	d900      	bls.n	8007b1a <__ssputs_r+0x72>
 8007b18:	463e      	mov	r6, r7
 8007b1a:	6820      	ldr	r0, [r4, #0]
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4641      	mov	r1, r8
 8007b20:	f000 faa8 	bl	8008074 <memmove>
 8007b24:	68a3      	ldr	r3, [r4, #8]
 8007b26:	1b9b      	subs	r3, r3, r6
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	4433      	add	r3, r6
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	2000      	movs	r0, #0
 8007b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b36:	462a      	mov	r2, r5
 8007b38:	f000 fac6 	bl	80080c8 <_realloc_r>
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d1e0      	bne.n	8007b04 <__ssputs_r+0x5c>
 8007b42:	6921      	ldr	r1, [r4, #16]
 8007b44:	4650      	mov	r0, sl
 8007b46:	f7ff feb7 	bl	80078b8 <_free_r>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	f8ca 3000 	str.w	r3, [sl]
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	e7e9      	b.n	8007b32 <__ssputs_r+0x8a>
	...

08007b60 <_svfiprintf_r>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	4698      	mov	r8, r3
 8007b66:	898b      	ldrh	r3, [r1, #12]
 8007b68:	061b      	lsls	r3, r3, #24
 8007b6a:	b09d      	sub	sp, #116	@ 0x74
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	4614      	mov	r4, r2
 8007b72:	d510      	bpl.n	8007b96 <_svfiprintf_r+0x36>
 8007b74:	690b      	ldr	r3, [r1, #16]
 8007b76:	b973      	cbnz	r3, 8007b96 <_svfiprintf_r+0x36>
 8007b78:	2140      	movs	r1, #64	@ 0x40
 8007b7a:	f7ff ff09 	bl	8007990 <_malloc_r>
 8007b7e:	6028      	str	r0, [r5, #0]
 8007b80:	6128      	str	r0, [r5, #16]
 8007b82:	b930      	cbnz	r0, 8007b92 <_svfiprintf_r+0x32>
 8007b84:	230c      	movs	r3, #12
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8c:	b01d      	add	sp, #116	@ 0x74
 8007b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b92:	2340      	movs	r3, #64	@ 0x40
 8007b94:	616b      	str	r3, [r5, #20]
 8007b96:	2300      	movs	r3, #0
 8007b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b9a:	2320      	movs	r3, #32
 8007b9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba4:	2330      	movs	r3, #48	@ 0x30
 8007ba6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d44 <_svfiprintf_r+0x1e4>
 8007baa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bae:	f04f 0901 	mov.w	r9, #1
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	469a      	mov	sl, r3
 8007bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bba:	b10a      	cbz	r2, 8007bc0 <_svfiprintf_r+0x60>
 8007bbc:	2a25      	cmp	r2, #37	@ 0x25
 8007bbe:	d1f9      	bne.n	8007bb4 <_svfiprintf_r+0x54>
 8007bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc4:	d00b      	beq.n	8007bde <_svfiprintf_r+0x7e>
 8007bc6:	465b      	mov	r3, fp
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f7ff ff6b 	bl	8007aa8 <__ssputs_r>
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f000 80a7 	beq.w	8007d26 <_svfiprintf_r+0x1c6>
 8007bd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bda:	445a      	add	r2, fp
 8007bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bde:	f89a 3000 	ldrb.w	r3, [sl]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 809f 	beq.w	8007d26 <_svfiprintf_r+0x1c6>
 8007be8:	2300      	movs	r3, #0
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bf2:	f10a 0a01 	add.w	sl, sl, #1
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	9307      	str	r3, [sp, #28]
 8007bfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c00:	4654      	mov	r4, sl
 8007c02:	2205      	movs	r2, #5
 8007c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c08:	484e      	ldr	r0, [pc, #312]	@ (8007d44 <_svfiprintf_r+0x1e4>)
 8007c0a:	f7f8 fb31 	bl	8000270 <memchr>
 8007c0e:	9a04      	ldr	r2, [sp, #16]
 8007c10:	b9d8      	cbnz	r0, 8007c4a <_svfiprintf_r+0xea>
 8007c12:	06d0      	lsls	r0, r2, #27
 8007c14:	bf44      	itt	mi
 8007c16:	2320      	movmi	r3, #32
 8007c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c1c:	0711      	lsls	r1, r2, #28
 8007c1e:	bf44      	itt	mi
 8007c20:	232b      	movmi	r3, #43	@ 0x2b
 8007c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c26:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c2c:	d015      	beq.n	8007c5a <_svfiprintf_r+0xfa>
 8007c2e:	9a07      	ldr	r2, [sp, #28]
 8007c30:	4654      	mov	r4, sl
 8007c32:	2000      	movs	r0, #0
 8007c34:	f04f 0c0a 	mov.w	ip, #10
 8007c38:	4621      	mov	r1, r4
 8007c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c3e:	3b30      	subs	r3, #48	@ 0x30
 8007c40:	2b09      	cmp	r3, #9
 8007c42:	d94b      	bls.n	8007cdc <_svfiprintf_r+0x17c>
 8007c44:	b1b0      	cbz	r0, 8007c74 <_svfiprintf_r+0x114>
 8007c46:	9207      	str	r2, [sp, #28]
 8007c48:	e014      	b.n	8007c74 <_svfiprintf_r+0x114>
 8007c4a:	eba0 0308 	sub.w	r3, r0, r8
 8007c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c52:	4313      	orrs	r3, r2
 8007c54:	9304      	str	r3, [sp, #16]
 8007c56:	46a2      	mov	sl, r4
 8007c58:	e7d2      	b.n	8007c00 <_svfiprintf_r+0xa0>
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	1d19      	adds	r1, r3, #4
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	9103      	str	r1, [sp, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bfbb      	ittet	lt
 8007c66:	425b      	neglt	r3, r3
 8007c68:	f042 0202 	orrlt.w	r2, r2, #2
 8007c6c:	9307      	strge	r3, [sp, #28]
 8007c6e:	9307      	strlt	r3, [sp, #28]
 8007c70:	bfb8      	it	lt
 8007c72:	9204      	strlt	r2, [sp, #16]
 8007c74:	7823      	ldrb	r3, [r4, #0]
 8007c76:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c78:	d10a      	bne.n	8007c90 <_svfiprintf_r+0x130>
 8007c7a:	7863      	ldrb	r3, [r4, #1]
 8007c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7e:	d132      	bne.n	8007ce6 <_svfiprintf_r+0x186>
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	9203      	str	r2, [sp, #12]
 8007c88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c8c:	3402      	adds	r4, #2
 8007c8e:	9305      	str	r3, [sp, #20]
 8007c90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d54 <_svfiprintf_r+0x1f4>
 8007c94:	7821      	ldrb	r1, [r4, #0]
 8007c96:	2203      	movs	r2, #3
 8007c98:	4650      	mov	r0, sl
 8007c9a:	f7f8 fae9 	bl	8000270 <memchr>
 8007c9e:	b138      	cbz	r0, 8007cb0 <_svfiprintf_r+0x150>
 8007ca0:	9b04      	ldr	r3, [sp, #16]
 8007ca2:	eba0 000a 	sub.w	r0, r0, sl
 8007ca6:	2240      	movs	r2, #64	@ 0x40
 8007ca8:	4082      	lsls	r2, r0
 8007caa:	4313      	orrs	r3, r2
 8007cac:	3401      	adds	r4, #1
 8007cae:	9304      	str	r3, [sp, #16]
 8007cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb4:	4824      	ldr	r0, [pc, #144]	@ (8007d48 <_svfiprintf_r+0x1e8>)
 8007cb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cba:	2206      	movs	r2, #6
 8007cbc:	f7f8 fad8 	bl	8000270 <memchr>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d036      	beq.n	8007d32 <_svfiprintf_r+0x1d2>
 8007cc4:	4b21      	ldr	r3, [pc, #132]	@ (8007d4c <_svfiprintf_r+0x1ec>)
 8007cc6:	bb1b      	cbnz	r3, 8007d10 <_svfiprintf_r+0x1b0>
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	3307      	adds	r3, #7
 8007ccc:	f023 0307 	bic.w	r3, r3, #7
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd6:	4433      	add	r3, r6
 8007cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cda:	e76a      	b.n	8007bb2 <_svfiprintf_r+0x52>
 8007cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	e7a8      	b.n	8007c38 <_svfiprintf_r+0xd8>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	3401      	adds	r4, #1
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	4619      	mov	r1, r3
 8007cee:	f04f 0c0a 	mov.w	ip, #10
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf8:	3a30      	subs	r2, #48	@ 0x30
 8007cfa:	2a09      	cmp	r2, #9
 8007cfc:	d903      	bls.n	8007d06 <_svfiprintf_r+0x1a6>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0c6      	beq.n	8007c90 <_svfiprintf_r+0x130>
 8007d02:	9105      	str	r1, [sp, #20]
 8007d04:	e7c4      	b.n	8007c90 <_svfiprintf_r+0x130>
 8007d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e7f0      	b.n	8007cf2 <_svfiprintf_r+0x192>
 8007d10:	ab03      	add	r3, sp, #12
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	462a      	mov	r2, r5
 8007d16:	4b0e      	ldr	r3, [pc, #56]	@ (8007d50 <_svfiprintf_r+0x1f0>)
 8007d18:	a904      	add	r1, sp, #16
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	f3af 8000 	nop.w
 8007d20:	1c42      	adds	r2, r0, #1
 8007d22:	4606      	mov	r6, r0
 8007d24:	d1d6      	bne.n	8007cd4 <_svfiprintf_r+0x174>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	065b      	lsls	r3, r3, #25
 8007d2a:	f53f af2d 	bmi.w	8007b88 <_svfiprintf_r+0x28>
 8007d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d30:	e72c      	b.n	8007b8c <_svfiprintf_r+0x2c>
 8007d32:	ab03      	add	r3, sp, #12
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	462a      	mov	r2, r5
 8007d38:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <_svfiprintf_r+0x1f0>)
 8007d3a:	a904      	add	r1, sp, #16
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f000 f879 	bl	8007e34 <_printf_i>
 8007d42:	e7ed      	b.n	8007d20 <_svfiprintf_r+0x1c0>
 8007d44:	08008536 	.word	0x08008536
 8007d48:	08008540 	.word	0x08008540
 8007d4c:	00000000 	.word	0x00000000
 8007d50:	08007aa9 	.word	0x08007aa9
 8007d54:	0800853c 	.word	0x0800853c

08007d58 <_printf_common>:
 8007d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	4698      	mov	r8, r3
 8007d60:	688a      	ldr	r2, [r1, #8]
 8007d62:	690b      	ldr	r3, [r1, #16]
 8007d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	bfb8      	it	lt
 8007d6c:	4613      	movlt	r3, r2
 8007d6e:	6033      	str	r3, [r6, #0]
 8007d70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d74:	4607      	mov	r7, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	b10a      	cbz	r2, 8007d7e <_printf_common+0x26>
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	6033      	str	r3, [r6, #0]
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	0699      	lsls	r1, r3, #26
 8007d82:	bf42      	ittt	mi
 8007d84:	6833      	ldrmi	r3, [r6, #0]
 8007d86:	3302      	addmi	r3, #2
 8007d88:	6033      	strmi	r3, [r6, #0]
 8007d8a:	6825      	ldr	r5, [r4, #0]
 8007d8c:	f015 0506 	ands.w	r5, r5, #6
 8007d90:	d106      	bne.n	8007da0 <_printf_common+0x48>
 8007d92:	f104 0a19 	add.w	sl, r4, #25
 8007d96:	68e3      	ldr	r3, [r4, #12]
 8007d98:	6832      	ldr	r2, [r6, #0]
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	42ab      	cmp	r3, r5
 8007d9e:	dc26      	bgt.n	8007dee <_printf_common+0x96>
 8007da0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007da4:	6822      	ldr	r2, [r4, #0]
 8007da6:	3b00      	subs	r3, #0
 8007da8:	bf18      	it	ne
 8007daa:	2301      	movne	r3, #1
 8007dac:	0692      	lsls	r2, r2, #26
 8007dae:	d42b      	bmi.n	8007e08 <_printf_common+0xb0>
 8007db0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007db4:	4641      	mov	r1, r8
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c8      	blx	r9
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d01e      	beq.n	8007dfc <_printf_common+0xa4>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	6922      	ldr	r2, [r4, #16]
 8007dc2:	f003 0306 	and.w	r3, r3, #6
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	bf02      	ittt	eq
 8007dca:	68e5      	ldreq	r5, [r4, #12]
 8007dcc:	6833      	ldreq	r3, [r6, #0]
 8007dce:	1aed      	subeq	r5, r5, r3
 8007dd0:	68a3      	ldr	r3, [r4, #8]
 8007dd2:	bf0c      	ite	eq
 8007dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dd8:	2500      	movne	r5, #0
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	bfc4      	itt	gt
 8007dde:	1a9b      	subgt	r3, r3, r2
 8007de0:	18ed      	addgt	r5, r5, r3
 8007de2:	2600      	movs	r6, #0
 8007de4:	341a      	adds	r4, #26
 8007de6:	42b5      	cmp	r5, r6
 8007de8:	d11a      	bne.n	8007e20 <_printf_common+0xc8>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e008      	b.n	8007e00 <_printf_common+0xa8>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4652      	mov	r2, sl
 8007df2:	4641      	mov	r1, r8
 8007df4:	4638      	mov	r0, r7
 8007df6:	47c8      	blx	r9
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d103      	bne.n	8007e04 <_printf_common+0xac>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e04:	3501      	adds	r5, #1
 8007e06:	e7c6      	b.n	8007d96 <_printf_common+0x3e>
 8007e08:	18e1      	adds	r1, r4, r3
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	2030      	movs	r0, #48	@ 0x30
 8007e0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e12:	4422      	add	r2, r4
 8007e14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	e7c7      	b.n	8007db0 <_printf_common+0x58>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4622      	mov	r2, r4
 8007e24:	4641      	mov	r1, r8
 8007e26:	4638      	mov	r0, r7
 8007e28:	47c8      	blx	r9
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d0e6      	beq.n	8007dfc <_printf_common+0xa4>
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7d9      	b.n	8007de6 <_printf_common+0x8e>
	...

08007e34 <_printf_i>:
 8007e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e38:	7e0f      	ldrb	r7, [r1, #24]
 8007e3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e3c:	2f78      	cmp	r7, #120	@ 0x78
 8007e3e:	4691      	mov	r9, r2
 8007e40:	4680      	mov	r8, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	469a      	mov	sl, r3
 8007e46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e4a:	d807      	bhi.n	8007e5c <_printf_i+0x28>
 8007e4c:	2f62      	cmp	r7, #98	@ 0x62
 8007e4e:	d80a      	bhi.n	8007e66 <_printf_i+0x32>
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	f000 80d2 	beq.w	8007ffa <_printf_i+0x1c6>
 8007e56:	2f58      	cmp	r7, #88	@ 0x58
 8007e58:	f000 80b9 	beq.w	8007fce <_printf_i+0x19a>
 8007e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e64:	e03a      	b.n	8007edc <_printf_i+0xa8>
 8007e66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e6a:	2b15      	cmp	r3, #21
 8007e6c:	d8f6      	bhi.n	8007e5c <_printf_i+0x28>
 8007e6e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e74 <_printf_i+0x40>)
 8007e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e74:	08007ecd 	.word	0x08007ecd
 8007e78:	08007ee1 	.word	0x08007ee1
 8007e7c:	08007e5d 	.word	0x08007e5d
 8007e80:	08007e5d 	.word	0x08007e5d
 8007e84:	08007e5d 	.word	0x08007e5d
 8007e88:	08007e5d 	.word	0x08007e5d
 8007e8c:	08007ee1 	.word	0x08007ee1
 8007e90:	08007e5d 	.word	0x08007e5d
 8007e94:	08007e5d 	.word	0x08007e5d
 8007e98:	08007e5d 	.word	0x08007e5d
 8007e9c:	08007e5d 	.word	0x08007e5d
 8007ea0:	08007fe1 	.word	0x08007fe1
 8007ea4:	08007f0b 	.word	0x08007f0b
 8007ea8:	08007f9b 	.word	0x08007f9b
 8007eac:	08007e5d 	.word	0x08007e5d
 8007eb0:	08007e5d 	.word	0x08007e5d
 8007eb4:	08008003 	.word	0x08008003
 8007eb8:	08007e5d 	.word	0x08007e5d
 8007ebc:	08007f0b 	.word	0x08007f0b
 8007ec0:	08007e5d 	.word	0x08007e5d
 8007ec4:	08007e5d 	.word	0x08007e5d
 8007ec8:	08007fa3 	.word	0x08007fa3
 8007ecc:	6833      	ldr	r3, [r6, #0]
 8007ece:	1d1a      	adds	r2, r3, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6032      	str	r2, [r6, #0]
 8007ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007edc:	2301      	movs	r3, #1
 8007ede:	e09d      	b.n	800801c <_printf_i+0x1e8>
 8007ee0:	6833      	ldr	r3, [r6, #0]
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	1d19      	adds	r1, r3, #4
 8007ee6:	6031      	str	r1, [r6, #0]
 8007ee8:	0606      	lsls	r6, r0, #24
 8007eea:	d501      	bpl.n	8007ef0 <_printf_i+0xbc>
 8007eec:	681d      	ldr	r5, [r3, #0]
 8007eee:	e003      	b.n	8007ef8 <_printf_i+0xc4>
 8007ef0:	0645      	lsls	r5, r0, #25
 8007ef2:	d5fb      	bpl.n	8007eec <_printf_i+0xb8>
 8007ef4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	da03      	bge.n	8007f04 <_printf_i+0xd0>
 8007efc:	232d      	movs	r3, #45	@ 0x2d
 8007efe:	426d      	negs	r5, r5
 8007f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f04:	4859      	ldr	r0, [pc, #356]	@ (800806c <_printf_i+0x238>)
 8007f06:	230a      	movs	r3, #10
 8007f08:	e011      	b.n	8007f2e <_printf_i+0xfa>
 8007f0a:	6821      	ldr	r1, [r4, #0]
 8007f0c:	6833      	ldr	r3, [r6, #0]
 8007f0e:	0608      	lsls	r0, r1, #24
 8007f10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f14:	d402      	bmi.n	8007f1c <_printf_i+0xe8>
 8007f16:	0649      	lsls	r1, r1, #25
 8007f18:	bf48      	it	mi
 8007f1a:	b2ad      	uxthmi	r5, r5
 8007f1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f1e:	4853      	ldr	r0, [pc, #332]	@ (800806c <_printf_i+0x238>)
 8007f20:	6033      	str	r3, [r6, #0]
 8007f22:	bf14      	ite	ne
 8007f24:	230a      	movne	r3, #10
 8007f26:	2308      	moveq	r3, #8
 8007f28:	2100      	movs	r1, #0
 8007f2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f2e:	6866      	ldr	r6, [r4, #4]
 8007f30:	60a6      	str	r6, [r4, #8]
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	bfa2      	ittt	ge
 8007f36:	6821      	ldrge	r1, [r4, #0]
 8007f38:	f021 0104 	bicge.w	r1, r1, #4
 8007f3c:	6021      	strge	r1, [r4, #0]
 8007f3e:	b90d      	cbnz	r5, 8007f44 <_printf_i+0x110>
 8007f40:	2e00      	cmp	r6, #0
 8007f42:	d04b      	beq.n	8007fdc <_printf_i+0x1a8>
 8007f44:	4616      	mov	r6, r2
 8007f46:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f4a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f4e:	5dc7      	ldrb	r7, [r0, r7]
 8007f50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f54:	462f      	mov	r7, r5
 8007f56:	42bb      	cmp	r3, r7
 8007f58:	460d      	mov	r5, r1
 8007f5a:	d9f4      	bls.n	8007f46 <_printf_i+0x112>
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d10b      	bne.n	8007f78 <_printf_i+0x144>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	07df      	lsls	r7, r3, #31
 8007f64:	d508      	bpl.n	8007f78 <_printf_i+0x144>
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	6861      	ldr	r1, [r4, #4]
 8007f6a:	4299      	cmp	r1, r3
 8007f6c:	bfde      	ittt	le
 8007f6e:	2330      	movle	r3, #48	@ 0x30
 8007f70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f78:	1b92      	subs	r2, r2, r6
 8007f7a:	6122      	str	r2, [r4, #16]
 8007f7c:	f8cd a000 	str.w	sl, [sp]
 8007f80:	464b      	mov	r3, r9
 8007f82:	aa03      	add	r2, sp, #12
 8007f84:	4621      	mov	r1, r4
 8007f86:	4640      	mov	r0, r8
 8007f88:	f7ff fee6 	bl	8007d58 <_printf_common>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d14a      	bne.n	8008026 <_printf_i+0x1f2>
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	b004      	add	sp, #16
 8007f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	f043 0320 	orr.w	r3, r3, #32
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	4833      	ldr	r0, [pc, #204]	@ (8008070 <_printf_i+0x23c>)
 8007fa4:	2778      	movs	r7, #120	@ 0x78
 8007fa6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	6831      	ldr	r1, [r6, #0]
 8007fae:	061f      	lsls	r7, r3, #24
 8007fb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fb4:	d402      	bmi.n	8007fbc <_printf_i+0x188>
 8007fb6:	065f      	lsls	r7, r3, #25
 8007fb8:	bf48      	it	mi
 8007fba:	b2ad      	uxthmi	r5, r5
 8007fbc:	6031      	str	r1, [r6, #0]
 8007fbe:	07d9      	lsls	r1, r3, #31
 8007fc0:	bf44      	itt	mi
 8007fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fc6:	6023      	strmi	r3, [r4, #0]
 8007fc8:	b11d      	cbz	r5, 8007fd2 <_printf_i+0x19e>
 8007fca:	2310      	movs	r3, #16
 8007fcc:	e7ac      	b.n	8007f28 <_printf_i+0xf4>
 8007fce:	4827      	ldr	r0, [pc, #156]	@ (800806c <_printf_i+0x238>)
 8007fd0:	e7e9      	b.n	8007fa6 <_printf_i+0x172>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f023 0320 	bic.w	r3, r3, #32
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	e7f6      	b.n	8007fca <_printf_i+0x196>
 8007fdc:	4616      	mov	r6, r2
 8007fde:	e7bd      	b.n	8007f5c <_printf_i+0x128>
 8007fe0:	6833      	ldr	r3, [r6, #0]
 8007fe2:	6825      	ldr	r5, [r4, #0]
 8007fe4:	6961      	ldr	r1, [r4, #20]
 8007fe6:	1d18      	adds	r0, r3, #4
 8007fe8:	6030      	str	r0, [r6, #0]
 8007fea:	062e      	lsls	r6, r5, #24
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	d501      	bpl.n	8007ff4 <_printf_i+0x1c0>
 8007ff0:	6019      	str	r1, [r3, #0]
 8007ff2:	e002      	b.n	8007ffa <_printf_i+0x1c6>
 8007ff4:	0668      	lsls	r0, r5, #25
 8007ff6:	d5fb      	bpl.n	8007ff0 <_printf_i+0x1bc>
 8007ff8:	8019      	strh	r1, [r3, #0]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	4616      	mov	r6, r2
 8008000:	e7bc      	b.n	8007f7c <_printf_i+0x148>
 8008002:	6833      	ldr	r3, [r6, #0]
 8008004:	1d1a      	adds	r2, r3, #4
 8008006:	6032      	str	r2, [r6, #0]
 8008008:	681e      	ldr	r6, [r3, #0]
 800800a:	6862      	ldr	r2, [r4, #4]
 800800c:	2100      	movs	r1, #0
 800800e:	4630      	mov	r0, r6
 8008010:	f7f8 f92e 	bl	8000270 <memchr>
 8008014:	b108      	cbz	r0, 800801a <_printf_i+0x1e6>
 8008016:	1b80      	subs	r0, r0, r6
 8008018:	6060      	str	r0, [r4, #4]
 800801a:	6863      	ldr	r3, [r4, #4]
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	2300      	movs	r3, #0
 8008020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008024:	e7aa      	b.n	8007f7c <_printf_i+0x148>
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	4632      	mov	r2, r6
 800802a:	4649      	mov	r1, r9
 800802c:	4640      	mov	r0, r8
 800802e:	47d0      	blx	sl
 8008030:	3001      	adds	r0, #1
 8008032:	d0ad      	beq.n	8007f90 <_printf_i+0x15c>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	079b      	lsls	r3, r3, #30
 8008038:	d413      	bmi.n	8008062 <_printf_i+0x22e>
 800803a:	68e0      	ldr	r0, [r4, #12]
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	4298      	cmp	r0, r3
 8008040:	bfb8      	it	lt
 8008042:	4618      	movlt	r0, r3
 8008044:	e7a6      	b.n	8007f94 <_printf_i+0x160>
 8008046:	2301      	movs	r3, #1
 8008048:	4632      	mov	r2, r6
 800804a:	4649      	mov	r1, r9
 800804c:	4640      	mov	r0, r8
 800804e:	47d0      	blx	sl
 8008050:	3001      	adds	r0, #1
 8008052:	d09d      	beq.n	8007f90 <_printf_i+0x15c>
 8008054:	3501      	adds	r5, #1
 8008056:	68e3      	ldr	r3, [r4, #12]
 8008058:	9903      	ldr	r1, [sp, #12]
 800805a:	1a5b      	subs	r3, r3, r1
 800805c:	42ab      	cmp	r3, r5
 800805e:	dcf2      	bgt.n	8008046 <_printf_i+0x212>
 8008060:	e7eb      	b.n	800803a <_printf_i+0x206>
 8008062:	2500      	movs	r5, #0
 8008064:	f104 0619 	add.w	r6, r4, #25
 8008068:	e7f5      	b.n	8008056 <_printf_i+0x222>
 800806a:	bf00      	nop
 800806c:	08008547 	.word	0x08008547
 8008070:	08008558 	.word	0x08008558

08008074 <memmove>:
 8008074:	4288      	cmp	r0, r1
 8008076:	b510      	push	{r4, lr}
 8008078:	eb01 0402 	add.w	r4, r1, r2
 800807c:	d902      	bls.n	8008084 <memmove+0x10>
 800807e:	4284      	cmp	r4, r0
 8008080:	4623      	mov	r3, r4
 8008082:	d807      	bhi.n	8008094 <memmove+0x20>
 8008084:	1e43      	subs	r3, r0, #1
 8008086:	42a1      	cmp	r1, r4
 8008088:	d008      	beq.n	800809c <memmove+0x28>
 800808a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800808e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008092:	e7f8      	b.n	8008086 <memmove+0x12>
 8008094:	4402      	add	r2, r0
 8008096:	4601      	mov	r1, r0
 8008098:	428a      	cmp	r2, r1
 800809a:	d100      	bne.n	800809e <memmove+0x2a>
 800809c:	bd10      	pop	{r4, pc}
 800809e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080a6:	e7f7      	b.n	8008098 <memmove+0x24>

080080a8 <_sbrk_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	@ (80080c4 <_sbrk_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f000 f892 	bl	80081dc <_sbrk>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_sbrk_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_sbrk_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20013a3c 	.word	0x20013a3c

080080c8 <_realloc_r>:
 80080c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080cc:	4680      	mov	r8, r0
 80080ce:	4615      	mov	r5, r2
 80080d0:	460c      	mov	r4, r1
 80080d2:	b921      	cbnz	r1, 80080de <_realloc_r+0x16>
 80080d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	4611      	mov	r1, r2
 80080da:	f7ff bc59 	b.w	8007990 <_malloc_r>
 80080de:	b92a      	cbnz	r2, 80080ec <_realloc_r+0x24>
 80080e0:	f7ff fbea 	bl	80078b8 <_free_r>
 80080e4:	2400      	movs	r4, #0
 80080e6:	4620      	mov	r0, r4
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	f000 f81a 	bl	8008124 <_malloc_usable_size_r>
 80080f0:	4285      	cmp	r5, r0
 80080f2:	4606      	mov	r6, r0
 80080f4:	d802      	bhi.n	80080fc <_realloc_r+0x34>
 80080f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080fa:	d8f4      	bhi.n	80080e6 <_realloc_r+0x1e>
 80080fc:	4629      	mov	r1, r5
 80080fe:	4640      	mov	r0, r8
 8008100:	f7ff fc46 	bl	8007990 <_malloc_r>
 8008104:	4607      	mov	r7, r0
 8008106:	2800      	cmp	r0, #0
 8008108:	d0ec      	beq.n	80080e4 <_realloc_r+0x1c>
 800810a:	42b5      	cmp	r5, r6
 800810c:	462a      	mov	r2, r5
 800810e:	4621      	mov	r1, r4
 8008110:	bf28      	it	cs
 8008112:	4632      	movcs	r2, r6
 8008114:	f7ff fbc2 	bl	800789c <memcpy>
 8008118:	4621      	mov	r1, r4
 800811a:	4640      	mov	r0, r8
 800811c:	f7ff fbcc 	bl	80078b8 <_free_r>
 8008120:	463c      	mov	r4, r7
 8008122:	e7e0      	b.n	80080e6 <_realloc_r+0x1e>

08008124 <_malloc_usable_size_r>:
 8008124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008128:	1f18      	subs	r0, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfbc      	itt	lt
 800812e:	580b      	ldrlt	r3, [r1, r0]
 8008130:	18c0      	addlt	r0, r0, r3
 8008132:	4770      	bx	lr

08008134 <fmin>:
 8008134:	b508      	push	{r3, lr}
 8008136:	ed2d 8b04 	vpush	{d8-d9}
 800813a:	eeb0 8a40 	vmov.f32	s16, s0
 800813e:	eef0 8a60 	vmov.f32	s17, s1
 8008142:	eeb0 9a41 	vmov.f32	s18, s2
 8008146:	eef0 9a61 	vmov.f32	s19, s3
 800814a:	f000 f81d 	bl	8008188 <__fpclassifyd>
 800814e:	b950      	cbnz	r0, 8008166 <fmin+0x32>
 8008150:	eeb0 8a49 	vmov.f32	s16, s18
 8008154:	eef0 8a69 	vmov.f32	s17, s19
 8008158:	eeb0 0a48 	vmov.f32	s0, s16
 800815c:	eef0 0a68 	vmov.f32	s1, s17
 8008160:	ecbd 8b04 	vpop	{d8-d9}
 8008164:	bd08      	pop	{r3, pc}
 8008166:	eeb0 0a49 	vmov.f32	s0, s18
 800816a:	eef0 0a69 	vmov.f32	s1, s19
 800816e:	f000 f80b 	bl	8008188 <__fpclassifyd>
 8008172:	2800      	cmp	r0, #0
 8008174:	d0f0      	beq.n	8008158 <fmin+0x24>
 8008176:	ec53 2b19 	vmov	r2, r3, d9
 800817a:	ec51 0b18 	vmov	r0, r1, d8
 800817e:	f7f8 fae3 	bl	8000748 <__aeabi_dcmplt>
 8008182:	2800      	cmp	r0, #0
 8008184:	d0e4      	beq.n	8008150 <fmin+0x1c>
 8008186:	e7e7      	b.n	8008158 <fmin+0x24>

08008188 <__fpclassifyd>:
 8008188:	ec51 0b10 	vmov	r0, r1, d0
 800818c:	b510      	push	{r4, lr}
 800818e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8008192:	460b      	mov	r3, r1
 8008194:	d019      	beq.n	80081ca <__fpclassifyd+0x42>
 8008196:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800819a:	490e      	ldr	r1, [pc, #56]	@ (80081d4 <__fpclassifyd+0x4c>)
 800819c:	428a      	cmp	r2, r1
 800819e:	d90e      	bls.n	80081be <__fpclassifyd+0x36>
 80081a0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80081a4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80081a8:	428a      	cmp	r2, r1
 80081aa:	d908      	bls.n	80081be <__fpclassifyd+0x36>
 80081ac:	4a0a      	ldr	r2, [pc, #40]	@ (80081d8 <__fpclassifyd+0x50>)
 80081ae:	4213      	tst	r3, r2
 80081b0:	d007      	beq.n	80081c2 <__fpclassifyd+0x3a>
 80081b2:	4294      	cmp	r4, r2
 80081b4:	d107      	bne.n	80081c6 <__fpclassifyd+0x3e>
 80081b6:	fab0 f080 	clz	r0, r0
 80081ba:	0940      	lsrs	r0, r0, #5
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	2004      	movs	r0, #4
 80081c0:	e7fc      	b.n	80081bc <__fpclassifyd+0x34>
 80081c2:	2003      	movs	r0, #3
 80081c4:	e7fa      	b.n	80081bc <__fpclassifyd+0x34>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7f8      	b.n	80081bc <__fpclassifyd+0x34>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d1ee      	bne.n	80081ac <__fpclassifyd+0x24>
 80081ce:	2002      	movs	r0, #2
 80081d0:	e7f4      	b.n	80081bc <__fpclassifyd+0x34>
 80081d2:	bf00      	nop
 80081d4:	7fdfffff 	.word	0x7fdfffff
 80081d8:	7ff00000 	.word	0x7ff00000

080081dc <_sbrk>:
 80081dc:	4a04      	ldr	r2, [pc, #16]	@ (80081f0 <_sbrk+0x14>)
 80081de:	6811      	ldr	r1, [r2, #0]
 80081e0:	4603      	mov	r3, r0
 80081e2:	b909      	cbnz	r1, 80081e8 <_sbrk+0xc>
 80081e4:	4903      	ldr	r1, [pc, #12]	@ (80081f4 <_sbrk+0x18>)
 80081e6:	6011      	str	r1, [r2, #0]
 80081e8:	6810      	ldr	r0, [r2, #0]
 80081ea:	4403      	add	r3, r0
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	4770      	bx	lr
 80081f0:	20013a4c 	.word	0x20013a4c
 80081f4:	20013a50 	.word	0x20013a50

080081f8 <_init>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr

08008204 <_fini>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr
