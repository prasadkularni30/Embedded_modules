
Q1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000467c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800480c  0800480c  0000580c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800490c  0800490c  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  0800490c  0800490c  0000590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004914  08004914  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004914  08004914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004918  08004918  00005918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800491c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          00013818  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001382c  2001382c  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001250e  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029a3  00000000  00000000  00018552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  0001aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de2  00000000  00000000  0001c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000053c3  00000000  00000000  0001ceda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137d1  00000000  00000000  0002229d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4111  00000000  00000000  00035a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119b7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b60  00000000  00000000  00119bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0011e724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047f4 	.word	0x080047f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080047f4 	.word	0x080047f4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e58 	.word	0x20012e58

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 f9ba 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f834 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RNG_Init();
 8000560:	f000 f89a 	bl	8000698 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	SEGGER_SYSVIEW_Conf();
 8000564:	f002 fda2 	bl	80030ac <SEGGER_SYSVIEW_Conf>
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 faa0 	bl	8000aae <HAL_NVIC_SetPriorityGrouping>
	assert_param(xTaskCreate(TaskB, "Task B", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
	assert_param(xTaskCreate(TaskC, "Task C", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
	assert_param(xTaskCreate(TaskD, "Task D", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);

	//creating Message Queue
	TaskAtoB = xQueueCreate(15, sizeof(char));
 800056e:	2200      	movs	r2, #0
 8000570:	2101      	movs	r1, #1
 8000572:	200f      	movs	r0, #15
 8000574:	f001 fad2 	bl	8001b1c <xQueueGenericCreate>
 8000578:	4603      	mov	r3, r0
 800057a:	4a0f      	ldr	r2, [pc, #60]	@ (80005b8 <main+0x64>)
 800057c:	6013      	str	r3, [r2, #0]
	assert_param(TaskAtoB != NULL);
	TaskBtoC = xQueueCreate(15, sizeof(char));
 800057e:	2200      	movs	r2, #0
 8000580:	2101      	movs	r1, #1
 8000582:	200f      	movs	r0, #15
 8000584:	f001 faca 	bl	8001b1c <xQueueGenericCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <main+0x68>)
 800058c:	6013      	str	r3, [r2, #0]
	assert_param(TaskBtoC != NULL);
	TaskCtoD = xQueueCreate(15, sizeof(char));
 800058e:	2200      	movs	r2, #0
 8000590:	2101      	movs	r1, #1
 8000592:	200f      	movs	r0, #15
 8000594:	f001 fac2 	bl	8001b1c <xQueueGenericCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <main+0x6c>)
 800059c:	6013      	str	r3, [r2, #0]
	assert_param(TaskCtoD != NULL);
	TaskDtoA = xQueueCreate(15, sizeof(char));
 800059e:	2200      	movs	r2, #0
 80005a0:	2101      	movs	r1, #1
 80005a2:	200f      	movs	r0, #15
 80005a4:	f001 faba 	bl	8001b1c <xQueueGenericCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a06      	ldr	r2, [pc, #24]	@ (80005c4 <main+0x70>)
 80005ac:	6013      	str	r3, [r2, #0]
	assert_param(TaskDtoA != NULL);


	//Starting Scheduler
	vTaskStartScheduler();
 80005ae:	f001 fcb1 	bl	8001f14 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x5e>
 80005b6:	bf00      	nop
 80005b8:	20000030 	.word	0x20000030
 80005bc:	20000034 	.word	0x20000034
 80005c0:	20000038 	.word	0x20000038
 80005c4:	2000003c 	.word	0x2000003c

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 f8d2 	bl	8004780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a26      	ldr	r2, [pc, #152]	@ (8000690 <SystemClock_Config+0xc8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <SystemClock_Config+0xc8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a20      	ldr	r2, [pc, #128]	@ (8000694 <SystemClock_Config+0xcc>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <SystemClock_Config+0xcc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800063c:	23c0      	movs	r3, #192	@ 0xc0
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fa63 	bl	8000b18 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f838 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fcc6 	bl	8001008 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000682:	f000 f823 	bl	80006cc <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
//  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d101      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ba:	f000 f92b 	bl	8000914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010000 	.word	0x40010000

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <Error_Handler+0x8>

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000724 <HAL_MspInit+0x4c>)
 80006e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	4a08      	ldr	r2, [pc, #32]	@ (8000724 <HAL_MspInit+0x4c>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000708:	6413      	str	r3, [r2, #64]	@ 0x40
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	@ 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b2e      	ldr	r3, [pc, #184]	@ (80007f8 <HAL_InitTick+0xd0>)
 800073e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000740:	4a2d      	ldr	r2, [pc, #180]	@ (80007f8 <HAL_InitTick+0xd0>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6453      	str	r3, [r2, #68]	@ 0x44
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <HAL_InitTick+0xd0>)
 800074a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000754:	f107 020c 	add.w	r2, r7, #12
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fe1e 	bl	80013a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000764:	f000 fe08 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 8000768:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800076c:	4a23      	ldr	r2, [pc, #140]	@ (80007fc <HAL_InitTick+0xd4>)
 800076e:	fba2 2303 	umull	r2, r3, r2, r3
 8000772:	0c9b      	lsrs	r3, r3, #18
 8000774:	3b01      	subs	r3, #1
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <HAL_InitTick+0xd8>)
 800077a:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <HAL_InitTick+0xdc>)
 800077c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <HAL_InitTick+0xd8>)
 8000780:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000786:	4a1e      	ldr	r2, [pc, #120]	@ (8000800 <HAL_InitTick+0xd8>)
 8000788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800078c:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <HAL_InitTick+0xd8>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <HAL_InitTick+0xd8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HAL_InitTick+0xd8>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800079e:	4818      	ldr	r0, [pc, #96]	@ (8000800 <HAL_InitTick+0xd8>)
 80007a0:	f000 fe30 	bl	8001404 <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80007aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11b      	bne.n	80007ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007b2:	4813      	ldr	r0, [pc, #76]	@ (8000800 <HAL_InitTick+0xd8>)
 80007b4:	f000 fe80 	bl	80014b8 <HAL_TIM_Base_Start_IT>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80007be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d111      	bne.n	80007ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007c6:	2019      	movs	r0, #25
 80007c8:	f000 f998 	bl	8000afc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d808      	bhi.n	80007e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80007d2:	2200      	movs	r2, #0
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	2019      	movs	r0, #25
 80007d8:	f000 f974 	bl	8000ac4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <HAL_InitTick+0xe0>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e002      	b.n	80007ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3730      	adds	r7, #48	@ 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	431bde83 	.word	0x431bde83
 8000800:	20000040 	.word	0x20000040
 8000804:	40010000 	.word	0x40010000
 8000808:	20000004 	.word	0x20000004

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <NMI_Handler+0x4>

08000814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <UsageFault_Handler+0x4>

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800084a:	f000 fea5 	bl	8001598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000040 	.word	0x20000040

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	@ (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	@ (80008bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	@ (80008c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f003 ff71 	bl	8004790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fe51 	bl	8000554 <main>
  bx  lr    
 80008b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008c0:	0800491c 	.word	0x0800491c
  ldr r2, =_sbss
 80008c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008c8:	2001382c 	.word	0x2001382c

080008cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <HAL_Init+0x40>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <HAL_Init+0x40>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_Init+0x40>)
 80008f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f8d8 	bl	8000aae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f7ff ff12 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fee8 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023c00 	.word	0x40023c00

08000914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	20000088 	.word	0x20000088

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000088 	.word	0x20000088

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4907      	ldr	r1, [pc, #28]	@ (80009f0 <__NVIC_EnableIRQ+0x38>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	@ (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	@ (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	@ 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	@ 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ff4c 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad6:	f7ff ff61 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000ada:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	6978      	ldr	r0, [r7, #20]
 8000ae2:	f7ff ffb1 	bl	8000a48 <NVIC_EncodePriority>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff80 	bl	80009f4 <__NVIC_SetPriority>
}
 8000af4:	bf00      	nop
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff54 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e267      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d075      	beq.n	8000c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b36:	4b88      	ldr	r3, [pc, #544]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d00c      	beq.n	8000b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b42:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d112      	bne.n	8000b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b4e:	4b82      	ldr	r3, [pc, #520]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b5a:	d10b      	bne.n	8000b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d05b      	beq.n	8000c20 <HAL_RCC_OscConfig+0x108>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d157      	bne.n	8000c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e242      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b7c:	d106      	bne.n	8000b8c <HAL_RCC_OscConfig+0x74>
 8000b7e:	4b76      	ldr	r3, [pc, #472]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a75      	ldr	r2, [pc, #468]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e01d      	b.n	8000bc8 <HAL_RCC_OscConfig+0xb0>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b94:	d10c      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x98>
 8000b96:	4b70      	ldr	r3, [pc, #448]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a6f      	ldr	r2, [pc, #444]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a6c      	ldr	r2, [pc, #432]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e00b      	b.n	8000bc8 <HAL_RCC_OscConfig+0xb0>
 8000bb0:	4b69      	ldr	r3, [pc, #420]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a68      	ldr	r2, [pc, #416]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b66      	ldr	r3, [pc, #408]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a65      	ldr	r2, [pc, #404]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d013      	beq.n	8000bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd0:	f7ff feb4 	bl	800093c <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd8:	f7ff feb0 	bl	800093c <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b64      	cmp	r3, #100	@ 0x64
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e207      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bea:	4b5b      	ldr	r3, [pc, #364]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f0      	beq.n	8000bd8 <HAL_RCC_OscConfig+0xc0>
 8000bf6:	e014      	b.n	8000c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fea0 	bl	800093c <HAL_GetTick>
 8000bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfe:	e008      	b.n	8000c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c00:	f7ff fe9c 	bl	800093c <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	2b64      	cmp	r3, #100	@ 0x64
 8000c0c:	d901      	bls.n	8000c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e1f3      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c12:	4b51      	ldr	r3, [pc, #324]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f0      	bne.n	8000c00 <HAL_RCC_OscConfig+0xe8>
 8000c1e:	e000      	b.n	8000c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d063      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00b      	beq.n	8000c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c3a:	4b47      	ldr	r3, [pc, #284]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d11c      	bne.n	8000c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c46:	4b44      	ldr	r3, [pc, #272]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d116      	bne.n	8000c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c52:	4b41      	ldr	r3, [pc, #260]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <HAL_RCC_OscConfig+0x152>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d001      	beq.n	8000c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e1c7      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	4937      	ldr	r1, [pc, #220]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c7e:	e03a      	b.n	8000cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d020      	beq.n	8000cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c88:	4b34      	ldr	r3, [pc, #208]	@ (8000d5c <HAL_RCC_OscConfig+0x244>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fe55 	bl	800093c <HAL_GetTick>
 8000c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c94:	e008      	b.n	8000ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c96:	f7ff fe51 	bl	800093c <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d901      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e1a8      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f0      	beq.n	8000c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	4925      	ldr	r1, [pc, #148]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	600b      	str	r3, [r1, #0]
 8000cc8:	e015      	b.n	8000cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cca:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <HAL_RCC_OscConfig+0x244>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fe34 	bl	800093c <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fe30 	bl	800093c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e187      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d036      	beq.n	8000d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d016      	beq.n	8000d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_RCC_OscConfig+0x248>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d10:	f7ff fe14 	bl	800093c <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d18:	f7ff fe10 	bl	800093c <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e167      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f0      	beq.n	8000d18 <HAL_RCC_OscConfig+0x200>
 8000d36:	e01b      	b.n	8000d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HAL_RCC_OscConfig+0x248>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fdfd 	bl	800093c <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d44:	e00e      	b.n	8000d64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d46:	f7ff fdf9 	bl	800093c <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d907      	bls.n	8000d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e150      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	42470000 	.word	0x42470000
 8000d60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	4b88      	ldr	r3, [pc, #544]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1ea      	bne.n	8000d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 8097 	beq.w	8000eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b81      	ldr	r3, [pc, #516]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10f      	bne.n	8000dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b7d      	ldr	r3, [pc, #500]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a7c      	ldr	r2, [pc, #496]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000daa:	2301      	movs	r3, #1
 8000dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	4b77      	ldr	r3, [pc, #476]	@ (8000f8c <HAL_RCC_OscConfig+0x474>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d118      	bne.n	8000dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dba:	4b74      	ldr	r3, [pc, #464]	@ (8000f8c <HAL_RCC_OscConfig+0x474>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a73      	ldr	r2, [pc, #460]	@ (8000f8c <HAL_RCC_OscConfig+0x474>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fdb9 	bl	800093c <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dce:	f7ff fdb5 	bl	800093c <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e10c      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	4b6a      	ldr	r3, [pc, #424]	@ (8000f8c <HAL_RCC_OscConfig+0x474>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x2ea>
 8000df4:	4b64      	ldr	r3, [pc, #400]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000df8:	4a63      	ldr	r2, [pc, #396]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e00:	e01c      	b.n	8000e3c <HAL_RCC_OscConfig+0x324>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x30c>
 8000e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e16:	4b5c      	ldr	r3, [pc, #368]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0x324>
 8000e24:	4b58      	ldr	r3, [pc, #352]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e28:	4a57      	ldr	r2, [pc, #348]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e2a:	f023 0301 	bic.w	r3, r3, #1
 8000e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e30:	4b55      	ldr	r3, [pc, #340]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e34:	4a54      	ldr	r2, [pc, #336]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e36:	f023 0304 	bic.w	r3, r3, #4
 8000e3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d015      	beq.n	8000e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e44:	f7ff fd7a 	bl	800093c <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4a:	e00a      	b.n	8000e62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fd76 	bl	800093c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e0cb      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e62:	4b49      	ldr	r3, [pc, #292]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0ee      	beq.n	8000e4c <HAL_RCC_OscConfig+0x334>
 8000e6e:	e014      	b.n	8000e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e70:	f7ff fd64 	bl	800093c <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e76:	e00a      	b.n	8000e8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e78:	f7ff fd60 	bl	800093c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e0b5      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1ee      	bne.n	8000e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea0:	4b39      	ldr	r3, [pc, #228]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	4a38      	ldr	r2, [pc, #224]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a1 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb6:	4b34      	ldr	r3, [pc, #208]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d05c      	beq.n	8000f7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d141      	bne.n	8000f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eca:	4b31      	ldr	r3, [pc, #196]	@ (8000f90 <HAL_RCC_OscConfig+0x478>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fd34 	bl	800093c <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed8:	f7ff fd30 	bl	800093c <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e087      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eea:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69da      	ldr	r2, [r3, #28]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	491b      	ldr	r1, [pc, #108]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_RCC_OscConfig+0x478>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fd09 	bl	800093c <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2e:	f7ff fd05 	bl	800093c <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e05c      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x416>
 8000f4c:	e054      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_RCC_OscConfig+0x478>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fcf2 	bl	800093c <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5c:	f7ff fcee 	bl	800093c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e045      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_RCC_OscConfig+0x470>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x444>
 8000f7a:	e03d      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d107      	bne.n	8000f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e038      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000
 8000f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_RCC_OscConfig+0x4ec>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d028      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d121      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d11a      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d111      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d107      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d001      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0cc      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4b68      	ldr	r3, [pc, #416]	@ (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d90c      	bls.n	8001044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b65      	ldr	r3, [pc, #404]	@ (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001032:	4b63      	ldr	r3, [pc, #396]	@ (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d001      	beq.n	8001044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0b8      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800105c:	4b59      	ldr	r3, [pc, #356]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a58      	ldr	r2, [pc, #352]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001074:	4b53      	ldr	r3, [pc, #332]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a52      	ldr	r2, [pc, #328]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800107e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001080:	4b50      	ldr	r3, [pc, #320]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	494d      	ldr	r1, [pc, #308]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	4313      	orrs	r3, r2
 8001090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d044      	beq.n	8001128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4b47      	ldr	r3, [pc, #284]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d119      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e07f      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d003      	beq.n	80010c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e06f      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b3b      	ldr	r3, [pc, #236]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e067      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f023 0203 	bic.w	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4934      	ldr	r1, [pc, #208]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f8:	f7ff fc20 	bl	800093c <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff fc1c 	bl	800093c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e04f      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 020c 	and.w	r2, r3, #12
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d1eb      	bne.n	8001100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d20c      	bcs.n	8001150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e032      	b.n	80011b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	4916      	ldr	r1, [pc, #88]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	4313      	orrs	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	490e      	ldr	r1, [pc, #56]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800118e:	f000 f821 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 8001192:	4602      	mov	r2, r0
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	490a      	ldr	r1, [pc, #40]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	5ccb      	ldrb	r3, [r1, r3]
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	4a09      	ldr	r2, [pc, #36]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <HAL_RCC_ClockConfig+0x1c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff faba 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	080048cc 	.word	0x080048cc
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011d8:	b090      	sub	sp, #64	@ 0x40
 80011da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	@ 0x34
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ec:	4b59      	ldr	r3, [pc, #356]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x180>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d00d      	beq.n	8001214 <HAL_RCC_GetSysClockFreq+0x40>
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	f200 80a1 	bhi.w	8001340 <HAL_RCC_GetSysClockFreq+0x16c>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <HAL_RCC_GetSysClockFreq+0x34>
 8001202:	2b04      	cmp	r3, #4
 8001204:	d003      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x3a>
 8001206:	e09b      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001208:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <HAL_RCC_GetSysClockFreq+0x184>)
 800120a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800120c:	e09b      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800120e:	4b53      	ldr	r3, [pc, #332]	@ (800135c <HAL_RCC_GetSysClockFreq+0x188>)
 8001210:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001212:	e098      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001214:	4b4f      	ldr	r3, [pc, #316]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x180>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800121e:	4b4d      	ldr	r3, [pc, #308]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x180>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d028      	beq.n	800127c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800122a:	4b4a      	ldr	r3, [pc, #296]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x180>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	099b      	lsrs	r3, r3, #6
 8001230:	2200      	movs	r2, #0
 8001232:	623b      	str	r3, [r7, #32]
 8001234:	627a      	str	r2, [r7, #36]	@ 0x24
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800123c:	2100      	movs	r1, #0
 800123e:	4b47      	ldr	r3, [pc, #284]	@ (800135c <HAL_RCC_GetSysClockFreq+0x188>)
 8001240:	fb03 f201 	mul.w	r2, r3, r1
 8001244:	2300      	movs	r3, #0
 8001246:	fb00 f303 	mul.w	r3, r0, r3
 800124a:	4413      	add	r3, r2
 800124c:	4a43      	ldr	r2, [pc, #268]	@ (800135c <HAL_RCC_GetSysClockFreq+0x188>)
 800124e:	fba0 1202 	umull	r1, r2, r0, r2
 8001252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001254:	460a      	mov	r2, r1
 8001256:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800125a:	4413      	add	r3, r2
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800125e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001260:	2200      	movs	r2, #0
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	61fa      	str	r2, [r7, #28]
 8001266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800126a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800126e:	f7fe fff9 	bl	8000264 <__aeabi_uldivmod>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4613      	mov	r3, r2
 8001278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800127a:	e053      	b.n	8001324 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800127c:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x180>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	2200      	movs	r2, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	617a      	str	r2, [r7, #20]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800128e:	f04f 0b00 	mov.w	fp, #0
 8001292:	4652      	mov	r2, sl
 8001294:	465b      	mov	r3, fp
 8001296:	f04f 0000 	mov.w	r0, #0
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	0159      	lsls	r1, r3, #5
 80012a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012a4:	0150      	lsls	r0, r2, #5
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	ebb2 080a 	subs.w	r8, r2, sl
 80012ae:	eb63 090b 	sbc.w	r9, r3, fp
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012c6:	ebb2 0408 	subs.w	r4, r2, r8
 80012ca:	eb63 0509 	sbc.w	r5, r3, r9
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	00eb      	lsls	r3, r5, #3
 80012d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012dc:	00e2      	lsls	r2, r4, #3
 80012de:	4614      	mov	r4, r2
 80012e0:	461d      	mov	r5, r3
 80012e2:	eb14 030a 	adds.w	r3, r4, sl
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	eb45 030b 	adc.w	r3, r5, fp
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012fa:	4629      	mov	r1, r5
 80012fc:	028b      	lsls	r3, r1, #10
 80012fe:	4621      	mov	r1, r4
 8001300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001304:	4621      	mov	r1, r4
 8001306:	028a      	lsls	r2, r1, #10
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130e:	2200      	movs	r2, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	60fa      	str	r2, [r7, #12]
 8001314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001318:	f7fe ffa4 	bl	8000264 <__aeabi_uldivmod>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4613      	mov	r3, r2
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x180>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001334:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001338:	fbb2 f3f3 	udiv	r3, r2, r3
 800133c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800133e:	e002      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_RCC_GetSysClockFreq+0x184>)
 8001342:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001348:	4618      	mov	r0, r3
 800134a:	3740      	adds	r7, #64	@ 0x40
 800134c:	46bd      	mov	sp, r7
 800134e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	00f42400 	.word	0x00f42400
 800135c:	017d7840 	.word	0x017d7840

08001360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <HAL_RCC_GetHCLKFreq+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000

08001378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800137c:	f7ff fff0 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0b5b      	lsrs	r3, r3, #13
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4903      	ldr	r1, [pc, #12]	@ (800139c <HAL_RCC_GetPCLK2Freq+0x24>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	080048dc 	.word	0x080048dc

080013a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	220f      	movs	r2, #15
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_RCC_GetClockConfig+0x60>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0207 	and.w	r2, r3, #7
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e041      	b.n	800149a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f839 	bl	80014a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3304      	adds	r3, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4610      	mov	r0, r2
 8001444:	f000 f9c0 	bl	80017c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d001      	beq.n	80014d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e04e      	b.n	800156e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a23      	ldr	r2, [pc, #140]	@ (800157c <HAL_TIM_Base_Start_IT+0xc4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d022      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x80>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014fa:	d01d      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x80>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1f      	ldr	r2, [pc, #124]	@ (8001580 <HAL_TIM_Base_Start_IT+0xc8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d018      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x80>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <HAL_TIM_Base_Start_IT+0xcc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d013      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x80>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <HAL_TIM_Base_Start_IT+0xd0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00e      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x80>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1b      	ldr	r2, [pc, #108]	@ (800158c <HAL_TIM_Base_Start_IT+0xd4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d009      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x80>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <HAL_TIM_Base_Start_IT+0xd8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d004      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x80>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a18      	ldr	r2, [pc, #96]	@ (8001594 <HAL_TIM_Base_Start_IT+0xdc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d111      	bne.n	800155c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d010      	beq.n	800156c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800155a:	e007      	b.n	800156c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40010000 	.word	0x40010000
 8001580:	40000400 	.word	0x40000400
 8001584:	40000800 	.word	0x40000800
 8001588:	40000c00 	.word	0x40000c00
 800158c:	40010400 	.word	0x40010400
 8001590:	40014000 	.word	0x40014000
 8001594:	40001800 	.word	0x40001800

08001598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d020      	beq.n	80015fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01b      	beq.n	80015fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f06f 0202 	mvn.w	r2, #2
 80015cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f8d2 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 80015e8:	e005      	b.n	80015f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8c4 	bl	8001778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f8d5 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d020      	beq.n	8001648 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0204 	mvn.w	r2, #4
 8001618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2202      	movs	r2, #2
 800161e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8ac 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 8001634:	e005      	b.n	8001642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f89e 	bl	8001778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f8af 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d020      	beq.n	8001694 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01b      	beq.n	8001694 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f06f 0208 	mvn.w	r2, #8
 8001664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2204      	movs	r2, #4
 800166a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f886 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 8001680:	e005      	b.n	800168e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f878 	bl	8001778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f889 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d020      	beq.n	80016e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0210 	mvn.w	r2, #16
 80016b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2208      	movs	r2, #8
 80016b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f860 	bl	800178c <HAL_TIM_IC_CaptureCallback>
 80016cc:	e005      	b.n	80016da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f852 	bl	8001778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f863 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00c      	beq.n	8001704 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0201 	mvn.w	r2, #1
 80016fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe ffd2 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f906 	bl	8001934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f834 	bl	80017b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0220 	mvn.w	r2, #32
 8001768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f8d8 	bl	8001920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a46      	ldr	r2, [pc, #280]	@ (80018f4 <TIM_Base_SetConfig+0x12c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d013      	beq.n	8001808 <TIM_Base_SetConfig+0x40>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e6:	d00f      	beq.n	8001808 <TIM_Base_SetConfig+0x40>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a43      	ldr	r2, [pc, #268]	@ (80018f8 <TIM_Base_SetConfig+0x130>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00b      	beq.n	8001808 <TIM_Base_SetConfig+0x40>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a42      	ldr	r2, [pc, #264]	@ (80018fc <TIM_Base_SetConfig+0x134>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <TIM_Base_SetConfig+0x40>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a41      	ldr	r2, [pc, #260]	@ (8001900 <TIM_Base_SetConfig+0x138>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d003      	beq.n	8001808 <TIM_Base_SetConfig+0x40>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a40      	ldr	r2, [pc, #256]	@ (8001904 <TIM_Base_SetConfig+0x13c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d108      	bne.n	800181a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800180e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a35      	ldr	r2, [pc, #212]	@ (80018f4 <TIM_Base_SetConfig+0x12c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d02b      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001828:	d027      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a32      	ldr	r2, [pc, #200]	@ (80018f8 <TIM_Base_SetConfig+0x130>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d023      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a31      	ldr	r2, [pc, #196]	@ (80018fc <TIM_Base_SetConfig+0x134>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01f      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a30      	ldr	r2, [pc, #192]	@ (8001900 <TIM_Base_SetConfig+0x138>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01b      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a2f      	ldr	r2, [pc, #188]	@ (8001904 <TIM_Base_SetConfig+0x13c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d017      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <TIM_Base_SetConfig+0x140>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a2d      	ldr	r2, [pc, #180]	@ (800190c <TIM_Base_SetConfig+0x144>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00f      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a2c      	ldr	r2, [pc, #176]	@ (8001910 <TIM_Base_SetConfig+0x148>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00b      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2b      	ldr	r2, [pc, #172]	@ (8001914 <TIM_Base_SetConfig+0x14c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a2a      	ldr	r2, [pc, #168]	@ (8001918 <TIM_Base_SetConfig+0x150>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d003      	beq.n	800187a <TIM_Base_SetConfig+0xb2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a29      	ldr	r2, [pc, #164]	@ (800191c <TIM_Base_SetConfig+0x154>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d108      	bne.n	800188c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <TIM_Base_SetConfig+0x12c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d003      	beq.n	80018c0 <TIM_Base_SetConfig+0xf8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <TIM_Base_SetConfig+0x13c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d103      	bne.n	80018c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f023 0201 	bic.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
  }
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40000800 	.word	0x40000800
 8001900:	40000c00 	.word	0x40000c00
 8001904:	40010400 	.word	0x40010400
 8001908:	40014000 	.word	0x40014000
 800190c:	40014400 	.word	0x40014400
 8001910:	40014800 	.word	0x40014800
 8001914:	40001800 	.word	0x40001800
 8001918:	40001c00 	.word	0x40001c00
 800191c:	40002000 	.word	0x40002000

08001920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f103 0208 	add.w	r2, r3, #8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f103 0208 	add.w	r2, r3, #8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f103 0208 	add.w	r2, r3, #8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6892      	ldr	r2, [r2, #8]
 80019b8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6852      	ldr	r2, [r2, #4]
 80019c2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d103      	bne.n	80019d6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10b      	bne.n	8001a28 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d05d      	beq.n	8001aea <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d059      	beq.n	8001aea <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3e:	2100      	movs	r1, #0
 8001a40:	fba3 2302 	umull	r2, r3, r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d000      	beq.n	8001a4a <xQueueGenericReset+0x52>
 8001a48:	2101      	movs	r1, #1
 8001a4a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d14c      	bne.n	8001aea <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8001a50:	f001 f824 	bl	8002a9c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	441a      	add	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a80:	3b01      	subs	r3, #1
 8001a82:	6939      	ldr	r1, [r7, #16]
 8001a84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	441a      	add	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	22ff      	movs	r2, #255	@ 0xff
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	22ff      	movs	r2, #255	@ 0xff
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d114      	bne.n	8001ad0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01a      	beq.n	8001ae4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3310      	adds	r3, #16
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fd30 	bl	8002518 <xTaskRemoveFromEventList>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d012      	beq.n	8001ae4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001abe:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <xQueueGenericReset+0x120>)
 8001ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	f3bf 8f6f 	isb	sy
 8001ace:	e009      	b.n	8001ae4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	3310      	adds	r3, #16
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff37 	bl	8001948 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	3324      	adds	r3, #36	@ 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff32 	bl	8001948 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001ae4:	f001 f80c 	bl	8002b00 <vPortExitCritical>
 8001ae8:	e001      	b.n	8001aee <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10b      	bne.n	8001b0c <xQueueGenericReset+0x114>
        __asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	60bb      	str	r3, [r7, #8]
    }
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b0c:	697b      	ldr	r3, [r7, #20]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000ed04 	.word	0xe000ed04

08001b1c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02e      	beq.n	8001b92 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b34:	2100      	movs	r1, #0
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d000      	beq.n	8001b44 <xQueueGenericCreate+0x28>
 8001b42:	2101      	movs	r1, #1
 8001b44:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d123      	bne.n	8001b92 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b52:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001b56:	d81c      	bhi.n	8001b92 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	3350      	adds	r3, #80	@ 0x50
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 f8c2 	bl	8002cf0 <pvPortMalloc>
 8001b6c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01d      	beq.n	8001bb0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3350      	adds	r3, #80	@ 0x50
 8001b7c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f815 	bl	8001bba <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001b90:	e00e      	b.n	8001bb0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <xQueueGenericCreate+0x94>
        __asm volatile
 8001b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b9c:	f383 8811 	msr	BASEPRI, r3
 8001ba0:	f3bf 8f6f 	isb	sy
 8001ba4:	f3bf 8f4f 	dsb	sy
 8001ba8:	613b      	str	r3, [r7, #16]
    }
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
    }
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e002      	b.n	8001bdc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001be8:	2101      	movs	r1, #1
 8001bea:	69b8      	ldr	r0, [r7, #24]
 8001bec:	f7ff ff04 	bl	80019f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af04      	add	r7, sp, #16
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 f86b 	bl	8002cf0 <pvPortMalloc>
 8001c1a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d013      	beq.n	8001c4a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c22:	2058      	movs	r0, #88	@ 0x58
 8001c24:	f001 f864 	bl	8002cf0 <pvPortMalloc>
 8001c28:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001c30:	2258      	movs	r2, #88	@ 0x58
 8001c32:	2100      	movs	r1, #0
 8001c34:	69f8      	ldr	r0, [r7, #28]
 8001c36:	f002 fda3 	bl	8004780 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c40:	e005      	b.n	8001c4e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f001 f910 	bl	8002e68 <vPortFree>
 8001c48:	e001      	b.n	8001c4e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	2300      	movs	r3, #0
 8001c58:	9303      	str	r3, [sp, #12]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f80e 	bl	8001c8c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001c70:	69f8      	ldr	r0, [r7, #28]
 8001c72:	f000 f89b 	bl	8001dac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	e002      	b.n	8001c82 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001c82:	69bb      	ldr	r3, [r7, #24]
    }
 8001c84:	4618      	mov	r0, r3
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	21a5      	movs	r1, #165	@ 0xa5
 8001ca6:	f002 fd6b 	bl	8004780 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f023 0307 	bic.w	r3, r3, #7
 8001cc2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8001cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd2:	f383 8811 	msr	BASEPRI, r3
 8001cd6:	f3bf 8f6f 	isb	sy
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	617b      	str	r3, [r7, #20]
    }
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	e7fd      	b.n	8001ce2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01e      	beq.n	8001d2a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	e012      	b.n	8001d18 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	7819      	ldrb	r1, [r3, #0]
 8001cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3334      	adds	r3, #52	@ 0x34
 8001d02:	460a      	mov	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b09      	cmp	r3, #9
 8001d1c:	d9e9      	bls.n	8001cf2 <prvInitialiseNewTask+0x66>
 8001d1e:	e000      	b.n	8001d22 <prvInitialiseNewTask+0x96>
            {
                break;
 8001d20:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d90b      	bls.n	8001d48 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	613b      	str	r3, [r7, #16]
    }
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d901      	bls.n	8001d52 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d56:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d5c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d60:	3304      	adds	r3, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fe10 	bl	8001988 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe0b 	bl	8001988 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d76:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7a:	f1c3 0205 	rsb	r2, r3, #5
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	68f9      	ldr	r1, [r7, #12]
 8001d8c:	69b8      	ldr	r0, [r7, #24]
 8001d8e:	f000 fd4f 	bl	8002830 <pxPortInitialiseStack>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d96:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001da2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001dac:	b5b0      	push	{r4, r5, r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001db4:	f000 fe72 	bl	8002a9c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001db8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <prvAddNewTaskToReadyList+0x14c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef8 <prvAddNewTaskToReadyList+0x14c>)
 8001dc0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001efc <prvAddNewTaskToReadyList+0x150>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001dca:	4a4c      	ldr	r2, [pc, #304]	@ (8001efc <prvAddNewTaskToReadyList+0x150>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001dd0:	4b49      	ldr	r3, [pc, #292]	@ (8001ef8 <prvAddNewTaskToReadyList+0x14c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d110      	bne.n	8001dfa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001dd8:	f000 fc90 	bl	80026fc <prvInitialiseTaskLists>
 8001ddc:	e00d      	b.n	8001dfa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001dde:	4b48      	ldr	r3, [pc, #288]	@ (8001f00 <prvAddNewTaskToReadyList+0x154>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001de6:	4b45      	ldr	r3, [pc, #276]	@ (8001efc <prvAddNewTaskToReadyList+0x150>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d802      	bhi.n	8001dfa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001df4:	4a41      	ldr	r2, [pc, #260]	@ (8001efc <prvAddNewTaskToReadyList+0x150>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001dfa:	4b42      	ldr	r3, [pc, #264]	@ (8001f04 <prvAddNewTaskToReadyList+0x158>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a40      	ldr	r2, [pc, #256]	@ (8001f04 <prvAddNewTaskToReadyList+0x158>)
 8001e02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e04:	4b3f      	ldr	r3, [pc, #252]	@ (8001f04 <prvAddNewTaskToReadyList+0x158>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <prvAddNewTaskToReadyList+0x94>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 fa9b 	bl	8004350 <SEGGER_SYSVIEW_OnTaskCreate>
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	461c      	mov	r4, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	1ae3      	subs	r3, r4, r3
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	f001 f9d8 	bl	80031f0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fb08 	bl	8004458 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <prvAddNewTaskToReadyList+0x15c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	4a2c      	ldr	r2, [pc, #176]	@ (8001f08 <prvAddNewTaskToReadyList+0x15c>)
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e5e:	492b      	ldr	r1, [pc, #172]	@ (8001f0c <prvAddNewTaskToReadyList+0x160>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	3204      	adds	r2, #4
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	1d1a      	adds	r2, r3, #4
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <prvAddNewTaskToReadyList+0x160>)
 8001e9e:	441a      	add	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea8:	4918      	ldr	r1, [pc, #96]	@ (8001f0c <prvAddNewTaskToReadyList+0x160>)
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1c59      	adds	r1, r3, #1
 8001eb8:	4814      	ldr	r0, [pc, #80]	@ (8001f0c <prvAddNewTaskToReadyList+0x160>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4403      	add	r3, r0
 8001ec4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ec6:	f000 fe1b 	bl	8002b00 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001eca:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <prvAddNewTaskToReadyList+0x154>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00e      	beq.n	8001ef0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <prvAddNewTaskToReadyList+0x150>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <prvAddNewTaskToReadyList+0x164>)
 8001ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef8:	20000164 	.word	0x20000164
 8001efc:	2000008c 	.word	0x2000008c
 8001f00:	20000170 	.word	0x20000170
 8001f04:	20000180 	.word	0x20000180
 8001f08:	2000016c 	.word	0x2000016c
 8001f0c:	20000090 	.word	0x20000090
 8001f10:	e000ed04 	.word	0xe000ed04

08001f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001f1a:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <vTaskStartScheduler+0x98>)
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2282      	movs	r2, #130	@ 0x82
 8001f26:	4922      	ldr	r1, [pc, #136]	@ (8001fb0 <vTaskStartScheduler+0x9c>)
 8001f28:	4822      	ldr	r0, [pc, #136]	@ (8001fb4 <vTaskStartScheduler+0xa0>)
 8001f2a:	f7ff fe69 	bl	8001c00 <xTaskCreate>
 8001f2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d124      	bne.n	8001f80 <vTaskStartScheduler+0x6c>
        __asm volatile
 8001f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	60bb      	str	r3, [r7, #8]
    }
 8001f48:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <vTaskStartScheduler+0xa4>)
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <vTaskStartScheduler+0xa8>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <vTaskStartScheduler+0xac>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001f5e:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <vTaskStartScheduler+0xb0>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <vTaskStartScheduler+0x98>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d102      	bne.n	8001f70 <vTaskStartScheduler+0x5c>
 8001f6a:	f002 f9d5 	bl	8004318 <SEGGER_SYSVIEW_OnIdle>
 8001f6e:	e004      	b.n	8001f7a <vTaskStartScheduler+0x66>
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <vTaskStartScheduler+0xb0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fa2d 	bl	80043d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001f7a:	f000 fceb 	bl	8002954 <xPortStartScheduler>
 8001f7e:	e00f      	b.n	8001fa0 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d10b      	bne.n	8001fa0 <vTaskStartScheduler+0x8c>
        __asm volatile
 8001f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f8c:	f383 8811 	msr	BASEPRI, r3
 8001f90:	f3bf 8f6f 	isb	sy
 8001f94:	f3bf 8f4f 	dsb	sy
 8001f98:	607b      	str	r3, [r7, #4]
    }
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <vTaskStartScheduler+0xb4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000188 	.word	0x20000188
 8001fb0:	0800480c 	.word	0x0800480c
 8001fb4:	080026cd 	.word	0x080026cd
 8001fb8:	20000184 	.word	0x20000184
 8001fbc:	20000170 	.word	0x20000170
 8001fc0:	20000168 	.word	0x20000168
 8001fc4:	2000008c 	.word	0x2000008c
 8001fc8:	2000000c 	.word	0x2000000c

08001fcc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <vTaskSuspendAll+0x18>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a03      	ldr	r2, [pc, #12]	@ (8001fe4 <vTaskSuspendAll+0x18>)
 8001fd8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	2000018c 	.word	0x2000018c

08001fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001ff6:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <xTaskResumeAll+0x1dc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10b      	bne.n	8002016 <xTaskResumeAll+0x2e>
        __asm volatile
 8001ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	607b      	str	r3, [r7, #4]
    }
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	e7fd      	b.n	8002012 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002016:	f000 fd41 	bl	8002a9c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800201a:	4b6a      	ldr	r3, [pc, #424]	@ (80021c4 <xTaskResumeAll+0x1dc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	4a68      	ldr	r2, [pc, #416]	@ (80021c4 <xTaskResumeAll+0x1dc>)
 8002022:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002024:	4b67      	ldr	r3, [pc, #412]	@ (80021c4 <xTaskResumeAll+0x1dc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 80c4 	bne.w	80021b6 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800202e:	4b66      	ldr	r3, [pc, #408]	@ (80021c8 <xTaskResumeAll+0x1e0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80bf 	beq.w	80021b6 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002038:	e08e      	b.n	8002158 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800203a:	4b64      	ldr	r3, [pc, #400]	@ (80021cc <xTaskResumeAll+0x1e4>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	6a12      	ldr	r2, [r2, #32]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	69d2      	ldr	r2, [r2, #28]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3318      	adds	r3, #24
 8002064:	429a      	cmp	r2, r3
 8002066:	d103      	bne.n	8002070 <xTaskResumeAll+0x88>
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2200      	movs	r2, #0
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1e5a      	subs	r2, r3, #1
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	68d2      	ldr	r2, [r2, #12]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	6892      	ldr	r2, [r2, #8]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d103      	bne.n	80020ae <xTaskResumeAll+0xc6>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 f9c9 	bl	8004458 <SEGGER_SYSVIEW_OnTaskStartReady>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	2201      	movs	r2, #1
 80020cc:	409a      	lsls	r2, r3
 80020ce:	4b40      	ldr	r3, [pc, #256]	@ (80021d0 <xTaskResumeAll+0x1e8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	4a3e      	ldr	r2, [pc, #248]	@ (80021d0 <xTaskResumeAll+0x1e8>)
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020dc:	493d      	ldr	r1, [pc, #244]	@ (80021d4 <xTaskResumeAll+0x1ec>)
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	3204      	adds	r2, #4
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	1d1a      	adds	r2, r3, #4
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4a2e      	ldr	r2, [pc, #184]	@ (80021d4 <xTaskResumeAll+0x1ec>)
 800211c:	441a      	add	r2, r3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002126:	492b      	ldr	r1, [pc, #172]	@ (80021d4 <xTaskResumeAll+0x1ec>)
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c59      	adds	r1, r3, #1
 8002136:	4827      	ldr	r0, [pc, #156]	@ (80021d4 <xTaskResumeAll+0x1ec>)
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4403      	add	r3, r0
 8002142:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002148:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <xTaskResumeAll+0x1f0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214e:	429a      	cmp	r2, r3
 8002150:	d302      	bcc.n	8002158 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002152:	4b22      	ldr	r3, [pc, #136]	@ (80021dc <xTaskResumeAll+0x1f4>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002158:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <xTaskResumeAll+0x1e4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f47f af6c 	bne.w	800203a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002168:	f000 fb46 	bl	80027f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800216c:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <xTaskResumeAll+0x1f8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002178:	f000 f848 	bl	800220c <xTaskIncrementTick>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <xTaskResumeAll+0x1f4>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3b01      	subs	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f1      	bne.n	8002178 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <xTaskResumeAll+0x1f8>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <xTaskResumeAll+0x1f4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80021a6:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <xTaskResumeAll+0x1fc>)
 80021a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80021b6:	f000 fca3 	bl	8002b00 <vPortExitCritical>

    return xAlreadyYielded;
 80021ba:	69bb      	ldr	r3, [r7, #24]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000018c 	.word	0x2000018c
 80021c8:	20000164 	.word	0x20000164
 80021cc:	20000124 	.word	0x20000124
 80021d0:	2000016c 	.word	0x2000016c
 80021d4:	20000090 	.word	0x20000090
 80021d8:	2000008c 	.word	0x2000008c
 80021dc:	20000178 	.word	0x20000178
 80021e0:	20000174 	.word	0x20000174
 80021e4:	e000ed04 	.word	0xe000ed04

080021e8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021ee:	f000 fd3d 	bl	8002c6c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <xTaskGetTickCountFromISR+0x20>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80021fc:	683b      	ldr	r3, [r7, #0]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000168 	.word	0x20000168

0800220c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002216:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <xTaskIncrementTick+0x20c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 80f1 	bne.w	8002402 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002220:	4b7e      	ldr	r3, [pc, #504]	@ (800241c <xTaskIncrementTick+0x210>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002228:	4a7c      	ldr	r2, [pc, #496]	@ (800241c <xTaskIncrementTick+0x210>)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d121      	bne.n	8002278 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002234:	4b7a      	ldr	r3, [pc, #488]	@ (8002420 <xTaskIncrementTick+0x214>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <xTaskIncrementTick+0x4a>
        __asm volatile
 800223e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	607b      	str	r3, [r7, #4]
    }
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	e7fd      	b.n	8002252 <xTaskIncrementTick+0x46>
 8002256:	4b72      	ldr	r3, [pc, #456]	@ (8002420 <xTaskIncrementTick+0x214>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	4b71      	ldr	r3, [pc, #452]	@ (8002424 <xTaskIncrementTick+0x218>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6f      	ldr	r2, [pc, #444]	@ (8002420 <xTaskIncrementTick+0x214>)
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4a6f      	ldr	r2, [pc, #444]	@ (8002424 <xTaskIncrementTick+0x218>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	@ (8002428 <xTaskIncrementTick+0x21c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	4a6d      	ldr	r2, [pc, #436]	@ (8002428 <xTaskIncrementTick+0x21c>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	f000 fac0 	bl	80027f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002278:	4b6c      	ldr	r3, [pc, #432]	@ (800242c <xTaskIncrementTick+0x220>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6a3a      	ldr	r2, [r7, #32]
 800227e:	429a      	cmp	r2, r3
 8002280:	f0c0 80aa 	bcc.w	80023d8 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002284:	4b66      	ldr	r3, [pc, #408]	@ (8002420 <xTaskIncrementTick+0x214>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228e:	4b67      	ldr	r3, [pc, #412]	@ (800242c <xTaskIncrementTick+0x220>)
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	601a      	str	r2, [r3, #0]
                    break;
 8002296:	e09f      	b.n	80023d8 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002298:	4b61      	ldr	r3, [pc, #388]	@ (8002420 <xTaskIncrementTick+0x214>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d203      	bcs.n	80022b8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80022b0:	4a5e      	ldr	r2, [pc, #376]	@ (800242c <xTaskIncrementTick+0x220>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80022b6:	e08f      	b.n	80023d8 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	68d2      	ldr	r2, [r2, #12]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	6892      	ldr	r2, [r2, #8]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3304      	adds	r3, #4
 80022da:	429a      	cmp	r2, r3
 80022dc:	d103      	bne.n	80022e6 <xTaskIncrementTick+0xda>
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2200      	movs	r2, #0
 80022ea:	615a      	str	r2, [r3, #20]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01e      	beq.n	800233c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	6a12      	ldr	r2, [r2, #32]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	69d2      	ldr	r2, [r2, #28]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	3318      	adds	r3, #24
 8002320:	429a      	cmp	r2, r3
 8002322:	d103      	bne.n	800232c <xTaskIncrementTick+0x120>
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 f88a 	bl	8004458 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	2201      	movs	r2, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	4b38      	ldr	r3, [pc, #224]	@ (8002430 <xTaskIncrementTick+0x224>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <xTaskIncrementTick+0x224>)
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235a:	4936      	ldr	r1, [pc, #216]	@ (8002434 <xTaskIncrementTick+0x228>)
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3304      	adds	r3, #4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	3204      	adds	r2, #4
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1d1a      	adds	r2, r3, #4
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <xTaskIncrementTick+0x228>)
 800239a:	441a      	add	r2, r3
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	615a      	str	r2, [r3, #20]
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a4:	4923      	ldr	r1, [pc, #140]	@ (8002434 <xTaskIncrementTick+0x228>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1c59      	adds	r1, r3, #1
 80023b4:	481f      	ldr	r0, [pc, #124]	@ (8002434 <xTaskIncrementTick+0x228>)
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4403      	add	r3, r0
 80023c0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <xTaskIncrementTick+0x22c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f67f af59 	bls.w	8002284 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023d6:	e755      	b.n	8002284 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023d8:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <xTaskIncrementTick+0x22c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023de:	4915      	ldr	r1, [pc, #84]	@ (8002434 <xTaskIncrementTick+0x228>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d901      	bls.n	80023f4 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <xTaskIncrementTick+0x230>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002400:	e004      	b.n	800240c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <xTaskIncrementTick+0x234>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <xTaskIncrementTick+0x234>)
 800240a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800240e:	4618      	mov	r0, r3
 8002410:	3728      	adds	r7, #40	@ 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000018c 	.word	0x2000018c
 800241c:	20000168 	.word	0x20000168
 8002420:	2000011c 	.word	0x2000011c
 8002424:	20000120 	.word	0x20000120
 8002428:	2000017c 	.word	0x2000017c
 800242c:	20000184 	.word	0x20000184
 8002430:	2000016c 	.word	0x2000016c
 8002434:	20000090 	.word	0x20000090
 8002438:	2000008c 	.word	0x2000008c
 800243c:	20000178 	.word	0x20000178
 8002440:	20000174 	.word	0x20000174

08002444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800244a:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <vTaskSwitchContext+0xbc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002452:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <vTaskSwitchContext+0xc0>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002458:	e04e      	b.n	80024f8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800245a:	4b2a      	ldr	r3, [pc, #168]	@ (8002504 <vTaskSwitchContext+0xc0>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002460:	4b29      	ldr	r3, [pc, #164]	@ (8002508 <vTaskSwitchContext+0xc4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	f1c3 031f 	rsb	r3, r3, #31
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	4925      	ldr	r1, [pc, #148]	@ (800250c <vTaskSwitchContext+0xc8>)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10b      	bne.n	80024a2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800248a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	607b      	str	r3, [r7, #4]
    }
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	e7fd      	b.n	800249e <vTaskSwitchContext+0x5a>
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <vTaskSwitchContext+0xc8>)
 80024ae:	4413      	add	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	3308      	adds	r3, #8
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d104      	bne.n	80024d2 <vTaskSwitchContext+0x8e>
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <vTaskSwitchContext+0xcc>)
 80024da:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <vTaskSwitchContext+0xcc>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <vTaskSwitchContext+0xd0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d102      	bne.n	80024ee <vTaskSwitchContext+0xaa>
 80024e8:	f001 ff16 	bl	8004318 <SEGGER_SYSVIEW_OnIdle>
}
 80024ec:	e004      	b.n	80024f8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <vTaskSwitchContext+0xcc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 ff6e 	bl	80043d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80024f8:	bf00      	nop
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000018c 	.word	0x2000018c
 8002504:	20000178 	.word	0x20000178
 8002508:	2000016c 	.word	0x2000016c
 800250c:	20000090 	.word	0x20000090
 8002510:	2000008c 	.word	0x2000008c
 8002514:	20000188 	.word	0x20000188

08002518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10b      	bne.n	8002546 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	60fb      	str	r3, [r7, #12]
    }
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	6a12      	ldr	r2, [r2, #32]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	69d2      	ldr	r2, [r2, #28]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	3318      	adds	r3, #24
 8002568:	429a      	cmp	r2, r3
 800256a:	d103      	bne.n	8002574 <xTaskRemoveFromEventList+0x5c>
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	6a1a      	ldr	r2, [r3, #32]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	2200      	movs	r2, #0
 8002578:	629a      	str	r2, [r3, #40]	@ 0x28
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002584:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <xTaskRemoveFromEventList+0x19c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d162      	bne.n	8002652 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	6892      	ldr	r2, [r2, #8]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	3304      	adds	r3, #4
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d103      	bne.n	80025ba <xTaskRemoveFromEventList+0xa2>
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 ff43 	bl	8004458 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	4b37      	ldr	r3, [pc, #220]	@ (80026b8 <xTaskRemoveFromEventList+0x1a0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	4a35      	ldr	r2, [pc, #212]	@ (80026b8 <xTaskRemoveFromEventList+0x1a0>)
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025e8:	4934      	ldr	r1, [pc, #208]	@ (80026bc <xTaskRemoveFromEventList+0x1a4>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	3204      	adds	r2, #4
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	1d1a      	adds	r2, r3, #4
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4a25      	ldr	r2, [pc, #148]	@ (80026bc <xTaskRemoveFromEventList+0x1a4>)
 8002628:	441a      	add	r2, r3
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	615a      	str	r2, [r3, #20]
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002632:	4922      	ldr	r1, [pc, #136]	@ (80026bc <xTaskRemoveFromEventList+0x1a4>)
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	1c59      	adds	r1, r3, #1
 8002642:	481e      	ldr	r0, [pc, #120]	@ (80026bc <xTaskRemoveFromEventList+0x1a4>)
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4403      	add	r3, r0
 800264e:	6019      	str	r1, [r3, #0]
 8002650:	e01b      	b.n	800268a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <xTaskRemoveFromEventList+0x1a8>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	61da      	str	r2, [r3, #28]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	621a      	str	r2, [r3, #32]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	3218      	adds	r2, #24
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f103 0218 	add.w	r2, r3, #24
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <xTaskRemoveFromEventList+0x1a8>)
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002680:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <xTaskRemoveFromEventList+0x1a8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <xTaskRemoveFromEventList+0x1a8>)
 8002688:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800268e:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <xTaskRemoveFromEventList+0x1ac>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002694:	429a      	cmp	r2, r3
 8002696:	d905      	bls.n	80026a4 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002698:	2301      	movs	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800269c:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <xTaskRemoveFromEventList+0x1b0>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e001      	b.n	80026a8 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3728      	adds	r7, #40	@ 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000018c 	.word	0x2000018c
 80026b8:	2000016c 	.word	0x2000016c
 80026bc:	20000090 	.word	0x20000090
 80026c0:	20000124 	.word	0x20000124
 80026c4:	2000008c 	.word	0x2000008c
 80026c8:	20000178 	.word	0x20000178

080026cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80026d4:	f000 f852 	bl	800277c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026d8:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <prvIdleTask+0x28>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d9f9      	bls.n	80026d4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <prvIdleTask+0x2c>)
 80026e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80026f0:	e7f0      	b.n	80026d4 <prvIdleTask+0x8>
 80026f2:	bf00      	nop
 80026f4:	20000090 	.word	0x20000090
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	e00c      	b.n	8002722 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <prvInitialiseTaskLists+0x60>)
 8002714:	4413      	add	r3, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f916 	bl	8001948 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d9ef      	bls.n	8002708 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002728:	480d      	ldr	r0, [pc, #52]	@ (8002760 <prvInitialiseTaskLists+0x64>)
 800272a:	f7ff f90d 	bl	8001948 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800272e:	480d      	ldr	r0, [pc, #52]	@ (8002764 <prvInitialiseTaskLists+0x68>)
 8002730:	f7ff f90a 	bl	8001948 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <prvInitialiseTaskLists+0x6c>)
 8002736:	f7ff f907 	bl	8001948 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800273a:	480c      	ldr	r0, [pc, #48]	@ (800276c <prvInitialiseTaskLists+0x70>)
 800273c:	f7ff f904 	bl	8001948 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002740:	480b      	ldr	r0, [pc, #44]	@ (8002770 <prvInitialiseTaskLists+0x74>)
 8002742:	f7ff f901 	bl	8001948 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <prvInitialiseTaskLists+0x78>)
 8002748:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <prvInitialiseTaskLists+0x64>)
 800274a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800274c:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <prvInitialiseTaskLists+0x7c>)
 800274e:	4a05      	ldr	r2, [pc, #20]	@ (8002764 <prvInitialiseTaskLists+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000090 	.word	0x20000090
 8002760:	200000f4 	.word	0x200000f4
 8002764:	20000108 	.word	0x20000108
 8002768:	20000124 	.word	0x20000124
 800276c:	20000138 	.word	0x20000138
 8002770:	20000150 	.word	0x20000150
 8002774:	2000011c 	.word	0x2000011c
 8002778:	20000120 	.word	0x20000120

0800277c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002782:	e019      	b.n	80027b8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002784:	f000 f98a 	bl	8002a9c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <prvCheckTasksWaitingTermination+0x50>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f904 	bl	80019a2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800279a:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <prvCheckTasksWaitingTermination+0x54>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3b01      	subs	r3, #1
 80027a0:	4a0b      	ldr	r2, [pc, #44]	@ (80027d0 <prvCheckTasksWaitingTermination+0x54>)
 80027a2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <prvCheckTasksWaitingTermination+0x58>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <prvCheckTasksWaitingTermination+0x58>)
 80027ac:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80027ae:	f000 f9a7 	bl	8002b00 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f810 	bl	80027d8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <prvCheckTasksWaitingTermination+0x58>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e1      	bne.n	8002784 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000138 	.word	0x20000138
 80027d0:	20000164 	.word	0x20000164
 80027d4:	2000014c 	.word	0x2000014c

080027d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fb3f 	bl	8002e68 <vPortFree>
            vPortFree( pxTCB );
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fb3c 	bl	8002e68 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <prvResetNextTaskUnblockTime+0x30>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002806:	4b09      	ldr	r3, [pc, #36]	@ (800282c <prvResetNextTaskUnblockTime+0x34>)
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800280e:	e005      	b.n	800281c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <prvResetNextTaskUnblockTime+0x30>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <prvResetNextTaskUnblockTime+0x34>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	2000011c 	.word	0x2000011c
 800282c:	20000184 	.word	0x20000184

08002830 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b04      	subs	r3, #4
 8002840:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002848:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3b04      	subs	r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 0201 	bic.w	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3b04      	subs	r3, #4
 800285e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002860:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <pxPortInitialiseStack+0x64>)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b14      	subs	r3, #20
 800286a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b04      	subs	r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f06f 0202 	mvn.w	r2, #2
 800287e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3b20      	subs	r3, #32
 8002884:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	08002899 	.word	0x08002899

08002898 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <prvTaskExitError+0x58>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d00b      	beq.n	80028c4 <prvTaskExitError+0x2c>
        __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60fb      	str	r3, [r7, #12]
    }
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <prvTaskExitError+0x28>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	60bb      	str	r3, [r7, #8]
    }
 80028d6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80028d8:	bf00      	nop
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0fc      	beq.n	80028da <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000010 	.word	0x20000010
	...

08002900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <pxCurrentTCBConst2>)
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	6808      	ldr	r0, [r1, #0]
 8002906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290a:	f380 8809 	msr	PSP, r0
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f380 8811 	msr	BASEPRI, r0
 800291a:	4770      	bx	lr
 800291c:	f3af 8000 	nop.w

08002920 <pxCurrentTCBConst2>:
 8002920:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop

08002928 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002928:	4808      	ldr	r0, [pc, #32]	@ (800294c <prvPortStartFirstTask+0x24>)
 800292a:	6800      	ldr	r0, [r0, #0]
 800292c:	6800      	ldr	r0, [r0, #0]
 800292e:	f380 8808 	msr	MSP, r0
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f380 8814 	msr	CONTROL, r0
 800293a:	b662      	cpsie	i
 800293c:	b661      	cpsie	f
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	df00      	svc	0
 8002948:	bf00      	nop
 800294a:	0000      	.short	0x0000
 800294c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop

08002954 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800295a:	4b47      	ldr	r3, [pc, #284]	@ (8002a78 <xPortStartScheduler+0x124>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <xPortStartScheduler+0x128>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10b      	bne.n	800297c <xPortStartScheduler+0x28>
        __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	613b      	str	r3, [r7, #16]
    }
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800297c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a78 <xPortStartScheduler+0x124>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a3f      	ldr	r2, [pc, #252]	@ (8002a80 <xPortStartScheduler+0x12c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10b      	bne.n	800299e <xPortStartScheduler+0x4a>
        __asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	60fb      	str	r3, [r7, #12]
    }
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	e7fd      	b.n	800299a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800299e:	4b39      	ldr	r3, [pc, #228]	@ (8002a84 <xPortStartScheduler+0x130>)
 80029a0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	22ff      	movs	r2, #255	@ 0xff
 80029ae:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <xPortStartScheduler+0x134>)
 80029c4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029c6:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <xPortStartScheduler+0x138>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029cc:	e009      	b.n	80029e2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80029ce:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <xPortStartScheduler+0x138>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a8c <xPortStartScheduler+0x138>)
 80029d6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ea:	2b80      	cmp	r3, #128	@ 0x80
 80029ec:	d0ef      	beq.n	80029ce <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029ee:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <xPortStartScheduler+0x138>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d00b      	beq.n	8002a12 <xPortStartScheduler+0xbe>
        __asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	60bb      	str	r3, [r7, #8]
    }
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a12:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <xPortStartScheduler+0x138>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	4a1c      	ldr	r2, [pc, #112]	@ (8002a8c <xPortStartScheduler+0x138>)
 8002a1a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <xPortStartScheduler+0x138>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a24:	4a19      	ldr	r2, [pc, #100]	@ (8002a8c <xPortStartScheduler+0x138>)
 8002a26:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002a30:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <xPortStartScheduler+0x13c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <xPortStartScheduler+0x13c>)
 8002a36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <xPortStartScheduler+0x13c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a13      	ldr	r2, [pc, #76]	@ (8002a90 <xPortStartScheduler+0x13c>)
 8002a42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002a46:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002a48:	f000 f8e0 	bl	8002c0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <xPortStartScheduler+0x140>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002a52:	f000 f8ff 	bl	8002c54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <xPortStartScheduler+0x144>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a98 <xPortStartScheduler+0x144>)
 8002a5c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002a60:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002a62:	f7ff ff61 	bl	8002928 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002a66:	f7ff fced 	bl	8002444 <vTaskSwitchContext>
    prvTaskExitError();
 8002a6a:	f7ff ff15 	bl	8002898 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	e000ed00 	.word	0xe000ed00
 8002a7c:	410fc271 	.word	0x410fc271
 8002a80:	410fc270 	.word	0x410fc270
 8002a84:	e000e400 	.word	0xe000e400
 8002a88:	20000190 	.word	0x20000190
 8002a8c:	20000194 	.word	0x20000194
 8002a90:	e000ed20 	.word	0xe000ed20
 8002a94:	20000010 	.word	0x20000010
 8002a98:	e000ef34 	.word	0xe000ef34

08002a9c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
        __asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	607b      	str	r3, [r7, #4]
    }
 8002ab4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <vPortEnterCritical+0x5c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	4a0e      	ldr	r2, [pc, #56]	@ (8002af8 <vPortEnterCritical+0x5c>)
 8002abe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <vPortEnterCritical+0x5c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d110      	bne.n	8002aea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <vPortEnterCritical+0x60>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <vPortEnterCritical+0x4e>
        __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	603b      	str	r3, [r7, #0]
    }
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <vPortEnterCritical+0x4a>
    }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b06:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <vPortExitCritical+0x50>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <vPortExitCritical+0x26>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	607b      	str	r3, [r7, #4]
    }
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002b26:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <vPortExitCritical+0x50>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <vPortExitCritical+0x50>)
 8002b2e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b30:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <vPortExitCritical+0x50>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <vPortExitCritical+0x44>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b42:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000010 	.word	0x20000010
	...

08002b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b60:	f3ef 8009 	mrs	r0, PSP
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <pxCurrentTCBConst>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f01e 0f10 	tst.w	lr, #16
 8002b70:	bf08      	it	eq
 8002b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7a:	6010      	str	r0, [r2, #0]
 8002b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b84:	f380 8811 	msr	BASEPRI, r0
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f7ff fc58 	bl	8002444 <vTaskSwitchContext>
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f380 8811 	msr	BASEPRI, r0
 8002b9c:	bc09      	pop	{r0, r3}
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	6808      	ldr	r0, [r1, #0]
 8002ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba6:	f01e 0f10 	tst.w	lr, #16
 8002baa:	bf08      	it	eq
 8002bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002bb0:	f380 8809 	msr	PSP, r0
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w

08002bc0 <pxCurrentTCBConst>:
 8002bc0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	607b      	str	r3, [r7, #4]
    }
 8002be0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002be2:	f7ff fb13 	bl	800220c <xTaskIncrementTick>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <SysTick_Handler+0x40>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f383 8811 	msr	BASEPRI, r3
    }
 8002bfe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	e000ed04 	.word	0xe000ed04

08002c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <vPortSetupTimerInterrupt+0x34>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <vPortSetupTimerInterrupt+0x38>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <vPortSetupTimerInterrupt+0x3c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <vPortSetupTimerInterrupt+0x40>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <vPortSetupTimerInterrupt+0x44>)
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c2e:	4b04      	ldr	r3, [pc, #16]	@ (8002c40 <vPortSetupTimerInterrupt+0x34>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010
 8002c44:	e000e018 	.word	0xe000e018
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	10624dd3 	.word	0x10624dd3
 8002c50:	e000e014 	.word	0xe000e014

08002c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002c64 <vPortEnableVFP+0x10>
 8002c58:	6801      	ldr	r1, [r0, #0]
 8002c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002c5e:	6001      	str	r1, [r0, #0]
 8002c60:	4770      	bx	lr
 8002c62:	0000      	.short	0x0000
 8002c64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop

08002c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002c72:	f3ef 8305 	mrs	r3, IPSR
 8002c76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	d915      	bls.n	8002caa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002c7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <vPortValidateInterruptPriority+0x74>)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c88:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <vPortValidateInterruptPriority+0x78>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	7afa      	ldrb	r2, [r7, #11]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20b      	bcs.n	8002caa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	607b      	str	r3, [r7, #4]
    }
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	e7fd      	b.n	8002ca6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002caa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <vPortValidateInterruptPriority+0x7c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cec <vPortValidateInterruptPriority+0x80>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90b      	bls.n	8002cd2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	603b      	str	r3, [r7, #0]
    }
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <vPortValidateInterruptPriority+0x62>
    }
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e3f0 	.word	0xe000e3f0
 8002ce4:	20000190 	.word	0x20000190
 8002ce8:	e000ed0c 	.word	0xe000ed0c
 8002cec:	20000194 	.word	0x20000194

08002cf0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002cfc:	f7ff f966 	bl	8001fcc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002d00:	4b54      	ldr	r3, [pc, #336]	@ (8002e54 <pvPortMalloc+0x164>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002d08:	f000 f90c 	bl	8002f24 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002d12:	2208      	movs	r2, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d804      	bhi.n	8002d34 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	e001      	b.n	8002d38 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db71      	blt.n	8002e22 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d06e      	beq.n	8002e22 <pvPortMalloc+0x132>
 8002d44:	4b44      	ldr	r3, [pc, #272]	@ (8002e58 <pvPortMalloc+0x168>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d869      	bhi.n	8002e22 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002d4e:	4b43      	ldr	r3, [pc, #268]	@ (8002e5c <pvPortMalloc+0x16c>)
 8002d50:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002d52:	4b42      	ldr	r3, [pc, #264]	@ (8002e5c <pvPortMalloc+0x16c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d58:	e004      	b.n	8002d64 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d903      	bls.n	8002d76 <pvPortMalloc+0x86>
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f1      	bne.n	8002d5a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d76:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <pvPortMalloc+0x164>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d050      	beq.n	8002e22 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4413      	add	r3, r2
 8002d88:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1ad2      	subs	r2, r2, r3
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d920      	bls.n	8002de4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <pvPortMalloc+0xdc>
        __asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	613b      	str	r3, [r7, #16]
    }
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f000 f8fc 	bl	8002fdc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <pvPortMalloc+0x168>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <pvPortMalloc+0x168>)
 8002df0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <pvPortMalloc+0x168>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e60 <pvPortMalloc+0x170>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dfe:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <pvPortMalloc+0x168>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a17      	ldr	r2, [pc, #92]	@ (8002e60 <pvPortMalloc+0x170>)
 8002e04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <pvPortMalloc+0x174>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a11      	ldr	r2, [pc, #68]	@ (8002e64 <pvPortMalloc+0x174>)
 8002e20:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e22:	f7ff f8e1 	bl	8001fe8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <pvPortMalloc+0x158>
        __asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	60fb      	str	r3, [r7, #12]
    }
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <pvPortMalloc+0x154>
    return pvReturn;
 8002e48:	69fb      	ldr	r3, [r7, #28]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	@ 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20012da0 	.word	0x20012da0
 8002e58:	20012da4 	.word	0x20012da4
 8002e5c:	20012d98 	.word	0x20012d98
 8002e60:	20012da8 	.word	0x20012da8
 8002e64:	20012dac 	.word	0x20012dac

08002e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04b      	beq.n	8002f12 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	425b      	negs	r3, r3
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0b      	blt.n	8002ea8 <vPortFree+0x40>
        __asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	60fb      	str	r3, [r7, #12]
    }
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <vPortFree+0x60>
        __asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	60bb      	str	r3, [r7, #8]
    }
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0fdb      	lsrs	r3, r3, #31
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01c      	beq.n	8002f12 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d118      	bne.n	8002f12 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002eec:	f7ff f86e 	bl	8001fcc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <vPortFree+0xb4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4413      	add	r3, r2
 8002efa:	4a08      	ldr	r2, [pc, #32]	@ (8002f1c <vPortFree+0xb4>)
 8002efc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002efe:	6938      	ldr	r0, [r7, #16]
 8002f00:	f000 f86c 	bl	8002fdc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <vPortFree+0xb8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <vPortFree+0xb8>)
 8002f0c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f0e:	f7ff f86b 	bl	8001fe8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20012da4 	.word	0x20012da4
 8002f20:	20012db0 	.word	0x20012db0

08002f24 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f2a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002f2e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <prvHeapInit+0xa4>)
 8002f32:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3307      	adds	r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0307 	bic.w	r3, r3, #7
 8002f4a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <prvHeapInit+0xa4>)
 8002f54:	4413      	add	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fcc <prvHeapInit+0xa8>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <prvHeapInit+0xa8>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002f70:	2208      	movs	r2, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0307 	bic.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <prvHeapInit+0xac>)
 8002f84:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002f86:	4b12      	ldr	r3, [pc, #72]	@ (8002fd0 <prvHeapInit+0xac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <prvHeapInit+0xac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <prvHeapInit+0xac>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <prvHeapInit+0xb0>)
 8002fb2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <prvHeapInit+0xb4>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	20000198 	.word	0x20000198
 8002fcc:	20012d98 	.word	0x20012d98
 8002fd0:	20012da0 	.word	0x20012da0
 8002fd4:	20012da8 	.word	0x20012da8
 8002fd8:	20012da4 	.word	0x20012da4

08002fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fe4:	4b28      	ldr	r3, [pc, #160]	@ (8003088 <prvInsertBlockIntoFreeList+0xac>)
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e002      	b.n	8002ff0 <prvInsertBlockIntoFreeList+0x14>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d8f7      	bhi.n	8002fea <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4413      	add	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	d108      	bne.n	800301e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	441a      	add	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	441a      	add	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d118      	bne.n	8003064 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b15      	ldr	r3, [pc, #84]	@ (800308c <prvInsertBlockIntoFreeList+0xb0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d00d      	beq.n	800305a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e008      	b.n	800306c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800305a:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <prvInsertBlockIntoFreeList+0xb0>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e003      	b.n	800306c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d002      	beq.n	800307a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20012d98 	.word	0x20012d98
 800308c:	20012da0 	.word	0x20012da0

08003090 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003094:	4803      	ldr	r0, [pc, #12]	@ (80030a4 <_cbSendSystemDesc+0x14>)
 8003096:	f001 f8e9 	bl	800426c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800309a:	4803      	ldr	r0, [pc, #12]	@ (80030a8 <_cbSendSystemDesc+0x18>)
 800309c:	f001 f8e6 	bl	800426c <SEGGER_SYSVIEW_SendSysDesc>
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	08004814 	.word	0x08004814
 80030a8:	08004848 	.word	0x08004848

080030ac <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <SEGGER_SYSVIEW_Conf+0x20>)
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <SEGGER_SYSVIEW_Conf+0x20>)
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <SEGGER_SYSVIEW_Conf+0x24>)
 80030ba:	4a06      	ldr	r2, [pc, #24]	@ (80030d4 <SEGGER_SYSVIEW_Conf+0x28>)
 80030bc:	f000 fd5c 	bl	8003b78 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80030c0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80030c4:	f000 fd9c 	bl	8003c00 <SEGGER_SYSVIEW_SetRAMBase>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000000 	.word	0x20000000
 80030d0:	08003091 	.word	0x08003091
 80030d4:	080048e4 	.word	0x080048e4

080030d8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b085      	sub	sp, #20
 80030dc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	e033      	b.n	800314c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80030e4:	491e      	ldr	r1, [pc, #120]	@ (8003160 <_cbSendTaskList+0x88>)
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	491a      	ldr	r1, [pc, #104]	@ (8003160 <_cbSendTaskList+0x88>)
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3304      	adds	r3, #4
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	4c16      	ldr	r4, [pc, #88]	@ (8003160 <_cbSendTaskList+0x88>)
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4423      	add	r3, r4
 8003114:	3308      	adds	r3, #8
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	4d11      	ldr	r5, [pc, #68]	@ (8003160 <_cbSendTaskList+0x88>)
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	442b      	add	r3, r5
 8003126:	330c      	adds	r3, #12
 8003128:	681d      	ldr	r5, [r3, #0]
 800312a:	4e0d      	ldr	r6, [pc, #52]	@ (8003160 <_cbSendTaskList+0x88>)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4433      	add	r3, r6
 8003138:	3310      	adds	r3, #16
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462b      	mov	r3, r5
 8003140:	4622      	mov	r2, r4
 8003142:	f000 f8bd 	bl	80032c0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3301      	adds	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <_cbSendTaskList+0x8c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3c6      	bcc.n	80030e4 <_cbSendTaskList+0xc>
  }
}
 8003156:	bf00      	nop
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003160:	20012db4 	.word	0x20012db4
 8003164:	20012e54 	.word	0x20012e54

08003168 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003170:	f7ff f83a 	bl	80021e8 <xTaskGetTickCountFromISR>
 8003174:	4603      	mov	r3, r0
 8003176:	2200      	movs	r2, #0
 8003178:	469a      	mov	sl, r3
 800317a:	4693      	mov	fp, r2
 800317c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003180:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	f04f 0a00 	mov.w	sl, #0
 800318c:	f04f 0b00 	mov.w	fp, #0
 8003190:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003194:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003198:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800319c:	4652      	mov	r2, sl
 800319e:	465b      	mov	r3, fp
 80031a0:	1a14      	subs	r4, r2, r0
 80031a2:	eb63 0501 	sbc.w	r5, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	00ab      	lsls	r3, r5, #2
 80031b0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80031b4:	00a2      	lsls	r2, r4, #2
 80031b6:	4614      	mov	r4, r2
 80031b8:	461d      	mov	r5, r3
 80031ba:	eb14 0800 	adds.w	r8, r4, r0
 80031be:	eb45 0901 	adc.w	r9, r5, r1
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031d6:	4690      	mov	r8, r2
 80031d8:	4699      	mov	r9, r3
 80031da:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80031de:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080031f0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80031fe:	2205      	movs	r2, #5
 8003200:	492b      	ldr	r1, [pc, #172]	@ (80032b0 <SYSVIEW_AddTask+0xc0>)
 8003202:	68b8      	ldr	r0, [r7, #8]
 8003204:	f001 faac 	bl	8004760 <memcmp>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04b      	beq.n	80032a6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800320e:	4b29      	ldr	r3, [pc, #164]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b07      	cmp	r3, #7
 8003214:	d903      	bls.n	800321e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003216:	4828      	ldr	r0, [pc, #160]	@ (80032b8 <SYSVIEW_AddTask+0xc8>)
 8003218:	f001 fa46 	bl	80046a8 <SEGGER_SYSVIEW_Warn>
    return;
 800321c:	e044      	b.n	80032a8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800321e:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4926      	ldr	r1, [pc, #152]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003232:	4b20      	ldr	r3, [pc, #128]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4921      	ldr	r1, [pc, #132]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3304      	adds	r3, #4
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003248:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	491b      	ldr	r1, [pc, #108]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3308      	adds	r3, #8
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4916      	ldr	r1, [pc, #88]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	330c      	adds	r3, #12
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003274:	4b0f      	ldr	r3, [pc, #60]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4910      	ldr	r1, [pc, #64]	@ (80032bc <SYSVIEW_AddTask+0xcc>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	3310      	adds	r3, #16
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	4a08      	ldr	r2, [pc, #32]	@ (80032b4 <SYSVIEW_AddTask+0xc4>)
 8003292:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f80e 	bl	80032c0 <SYSVIEW_SendTaskInfo>
 80032a4:	e000      	b.n	80032a8 <SYSVIEW_AddTask+0xb8>
    return;
 80032a6:	bf00      	nop

}
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	08004858 	.word	0x08004858
 80032b4:	20012e54 	.word	0x20012e54
 80032b8:	08004860 	.word	0x08004860
 80032bc:	20012db4 	.word	0x20012db4

080032c0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	@ 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	2214      	movs	r2, #20
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fa52 	bl	8004780 <memset>
  TaskInfo.TaskID     = TaskID;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fec1 	bl	800407c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80032fa:	bf00      	nop
 80032fc:	3728      	adds	r7, #40	@ 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <_DoInit+0xa0>)
 800330c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800330e:	22a8      	movs	r2, #168	@ 0xa8
 8003310:	2100      	movs	r1, #0
 8003312:	6838      	ldr	r0, [r7, #0]
 8003314:	f001 fa34 	bl	8004780 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2203      	movs	r2, #3
 800331c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2203      	movs	r2, #3
 8003322:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4a20      	ldr	r2, [pc, #128]	@ (80033a8 <_DoInit+0xa4>)
 8003328:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <_DoInit+0xa8>)
 800332e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003336:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4a16      	ldr	r2, [pc, #88]	@ (80033a8 <_DoInit+0xa4>)
 800334e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <_DoInit+0xac>)
 8003354:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2210      	movs	r2, #16
 800335a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2200      	movs	r2, #0
 8003366:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800336e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	e00c      	b.n	8003392 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1c3 030f 	rsb	r3, r3, #15
 800337e:	4a0d      	ldr	r2, [pc, #52]	@ (80033b4 <_DoInit+0xb0>)
 8003380:	5cd1      	ldrb	r1, [r2, r3]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	460a      	mov	r2, r1
 800338a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3301      	adds	r3, #1
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d9ef      	bls.n	8003378 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003398:	f3bf 8f5f 	dmb	sy
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20012e58 	.word	0x20012e58
 80033a8:	080048b0 	.word	0x080048b0
 80033ac:	20012f00 	.word	0x20012f00
 80033b0:	20013300 	.word	0x20013300
 80033b4:	080048ec 	.word	0x080048ec

080033b8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	@ 0x30
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80033c4:	4b3e      	ldr	r3, [pc, #248]	@ (80034c0 <SEGGER_RTT_ReadNoLock+0x108>)
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b53      	cmp	r3, #83	@ 0x53
 80033d0:	d001      	beq.n	80033d6 <SEGGER_RTT_ReadNoLock+0x1e>
 80033d2:	f7ff ff97 	bl	8003304 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	3360      	adds	r3, #96	@ 0x60
 80033e2:	4a37      	ldr	r2, [pc, #220]	@ (80034c0 <SEGGER_RTT_ReadNoLock+0x108>)
 80033e4:	4413      	add	r3, r2
 80033e6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80033fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	429a      	cmp	r2, r3
 8003402:	d92b      	bls.n	800345c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4293      	cmp	r3, r2
 8003414:	bf28      	it	cs
 8003416:	4613      	movcs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003420:	4413      	add	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	6939      	ldr	r1, [r7, #16]
 8003428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800342a:	f001 f9d5 	bl	80047d8 <memcpy>
    NumBytesRead += NumBytesRem;
 800342e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4413      	add	r3, r2
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	4413      	add	r3, r2
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4413      	add	r3, r2
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003454:	429a      	cmp	r2, r3
 8003456:	d101      	bne.n	800345c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4293      	cmp	r3, r2
 800346a:	bf28      	it	cs
 800346c:	4613      	movcs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d019      	beq.n	80034aa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	4413      	add	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	6939      	ldr	r1, [r7, #16]
 8003484:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003486:	f001 f9a7 	bl	80047d8 <memcpy>
    NumBytesRead += NumBytesRem;
 800348a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4413      	add	r3, r2
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4413      	add	r3, r2
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80034a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4413      	add	r3, r2
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80034b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3730      	adds	r7, #48	@ 0x30
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20012e58 	.word	0x20012e58

080034c4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80034d2:	4b3d      	ldr	r3, [pc, #244]	@ (80035c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b53      	cmp	r3, #83	@ 0x53
 80034de:	d001      	beq.n	80034e4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80034e0:	f7ff ff10 	bl	8003304 <_DoInit>
  SEGGER_RTT_LOCK();
 80034e4:	f3ef 8311 	mrs	r3, BASEPRI
 80034e8:	f04f 0120 	mov.w	r1, #32
 80034ec:	f381 8811 	msr	BASEPRI, r1
 80034f0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034f2:	4b35      	ldr	r3, [pc, #212]	@ (80035c8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80034f4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80034fa:	6939      	ldr	r1, [r7, #16]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	3304      	adds	r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	429a      	cmp	r2, r3
 8003520:	dbeb      	blt.n	80034fa <SEGGER_RTT_AllocUpBuffer+0x36>
 8003522:	e000      	b.n	8003526 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003524:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	da3f      	bge.n	80035b0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003530:	6939      	ldr	r1, [r7, #16]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	440b      	add	r3, r1
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	3304      	adds	r3, #4
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800355a:	6939      	ldr	r1, [r7, #16]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	3320      	adds	r3, #32
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800356e:	6939      	ldr	r1, [r7, #16]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	440b      	add	r3, r1
 800357c:	3328      	adds	r3, #40	@ 0x28
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003582:	6939      	ldr	r1, [r7, #16]
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	3324      	adds	r3, #36	@ 0x24
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003596:	6939      	ldr	r1, [r7, #16]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	332c      	adds	r3, #44	@ 0x2c
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80035aa:	f3bf 8f5f 	dmb	sy
 80035ae:	e002      	b.n	80035b6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80035b0:	f04f 33ff 	mov.w	r3, #4294967295
 80035b4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80035bc:	69fb      	ldr	r3, [r7, #28]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20012e58 	.word	0x20012e58

080035cc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	@ 0x28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80035da:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b53      	cmp	r3, #83	@ 0x53
 80035e6:	d001      	beq.n	80035ec <SEGGER_RTT_ConfigDownBuffer+0x20>
 80035e8:	f7ff fe8c 	bl	8003304 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80035ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003660 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80035ee:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d82c      	bhi.n	8003650 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80035f6:	f3ef 8311 	mrs	r3, BASEPRI
 80035fa:	f04f 0120 	mov.w	r1, #32
 80035fe:	f381 8811 	msr	BASEPRI, r1
 8003602:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3360      	adds	r3, #96	@ 0x60
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003640:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
 800364e:	e002      	b.n	8003656 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003658:	4618      	mov	r0, r3
 800365a:	3728      	adds	r7, #40	@ 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20012e58 	.word	0x20012e58

08003664 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	60fa      	str	r2, [r7, #12]
 800367a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d90a      	bls.n	8003698 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003686:	e007      	b.n	8003698 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	1c53      	adds	r3, r2, #1
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1c59      	adds	r1, r3, #1
 8003692:	60f9      	str	r1, [r7, #12]
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <_EncodeStr+0x46>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ee      	bne.n	8003688 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80036b6:	68fb      	ldr	r3, [r7, #12]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3307      	adds	r3, #7
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80036e2:	4b34      	ldr	r3, [pc, #208]	@ (80037b4 <_HandleIncomingPacket+0xd8>)
 80036e4:	7e1b      	ldrb	r3, [r3, #24]
 80036e6:	4618      	mov	r0, r3
 80036e8:	1cfb      	adds	r3, r7, #3
 80036ea:	2201      	movs	r2, #1
 80036ec:	4619      	mov	r1, r3
 80036ee:	f7ff fe63 	bl	80033b8 <SEGGER_RTT_ReadNoLock>
 80036f2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d057      	beq.n	80037aa <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2b80      	cmp	r3, #128	@ 0x80
 80036fe:	d031      	beq.n	8003764 <_HandleIncomingPacket+0x88>
 8003700:	2b80      	cmp	r3, #128	@ 0x80
 8003702:	dc40      	bgt.n	8003786 <_HandleIncomingPacket+0xaa>
 8003704:	2b07      	cmp	r3, #7
 8003706:	dc15      	bgt.n	8003734 <_HandleIncomingPacket+0x58>
 8003708:	2b00      	cmp	r3, #0
 800370a:	dd3c      	ble.n	8003786 <_HandleIncomingPacket+0xaa>
 800370c:	3b01      	subs	r3, #1
 800370e:	2b06      	cmp	r3, #6
 8003710:	d839      	bhi.n	8003786 <_HandleIncomingPacket+0xaa>
 8003712:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <_HandleIncomingPacket+0x3c>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	0800373b 	.word	0x0800373b
 800371c:	08003741 	.word	0x08003741
 8003720:	08003747 	.word	0x08003747
 8003724:	0800374d 	.word	0x0800374d
 8003728:	08003753 	.word	0x08003753
 800372c:	08003759 	.word	0x08003759
 8003730:	0800375f 	.word	0x0800375f
 8003734:	2b7f      	cmp	r3, #127	@ 0x7f
 8003736:	d033      	beq.n	80037a0 <_HandleIncomingPacket+0xc4>
 8003738:	e025      	b.n	8003786 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800373a:	f000 fb25 	bl	8003d88 <SEGGER_SYSVIEW_Start>
      break;
 800373e:	e034      	b.n	80037aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003740:	f000 fbdc 	bl	8003efc <SEGGER_SYSVIEW_Stop>
      break;
 8003744:	e031      	b.n	80037aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003746:	f000 fdb5 	bl	80042b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800374a:	e02e      	b.n	80037aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800374c:	f000 fd7a 	bl	8004244 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003750:	e02b      	b.n	80037aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003752:	f000 fbf9 	bl	8003f48 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003756:	e028      	b.n	80037aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003758:	f000 ff68 	bl	800462c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800375c:	e025      	b.n	80037aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800375e:	f000 ff47 	bl	80045f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003762:	e022      	b.n	80037aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003764:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <_HandleIncomingPacket+0xd8>)
 8003766:	7e1b      	ldrb	r3, [r3, #24]
 8003768:	4618      	mov	r0, r3
 800376a:	1cfb      	adds	r3, r7, #3
 800376c:	2201      	movs	r2, #1
 800376e:	4619      	mov	r1, r3
 8003770:	f7ff fe22 	bl	80033b8 <SEGGER_RTT_ReadNoLock>
 8003774:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 feac 	bl	80044dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003784:	e00e      	b.n	80037a4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	b25b      	sxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	da0c      	bge.n	80037a8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800378e:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <_HandleIncomingPacket+0xd8>)
 8003790:	7e1b      	ldrb	r3, [r3, #24]
 8003792:	4618      	mov	r0, r3
 8003794:	1cfb      	adds	r3, r7, #3
 8003796:	2201      	movs	r2, #1
 8003798:	4619      	mov	r1, r3
 800379a:	f7ff fe0d 	bl	80033b8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800379e:	e003      	b.n	80037a8 <_HandleIncomingPacket+0xcc>
      break;
 80037a0:	bf00      	nop
 80037a2:	e002      	b.n	80037aa <_HandleIncomingPacket+0xce>
      break;
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <_HandleIncomingPacket+0xce>
      break;
 80037a8:	bf00      	nop
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20013718 	.word	0x20013718

080037b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	@ 0x30
 80037bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80037be:	2301      	movs	r3, #1
 80037c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	3301      	adds	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037cc:	4b31      	ldr	r3, [pc, #196]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037d2:	e00b      	b.n	80037ec <_TrySendOverflowPacket+0x34>
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80037de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e8:	09db      	lsrs	r3, r3, #7
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80037f0:	d8f0      	bhi.n	80037d4 <_TrySendOverflowPacket+0x1c>
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003802:	4b25      	ldr	r3, [pc, #148]	@ (8003898 <_TrySendOverflowPacket+0xe0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003808:	4b22      	ldr	r3, [pc, #136]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	e00b      	b.n	8003834 <_TrySendOverflowPacket+0x7c>
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	6279      	str	r1, [r7, #36]	@ 0x24
 8003826:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	09db      	lsrs	r3, r3, #7
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b7f      	cmp	r3, #127	@ 0x7f
 8003838:	d8f0      	bhi.n	800381c <_TrySendOverflowPacket+0x64>
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003840:	6a3a      	ldr	r2, [r7, #32]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800384a:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	4618      	mov	r0, r3
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	461a      	mov	r2, r3
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	4619      	mov	r1, r3
 800385c:	f7fc fcb8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003860:	4603      	mov	r3, r0
 8003862:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800386a:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e004      	b.n	8003888 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800387e:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	3301      	adds	r3, #1
 8003884:	4a03      	ldr	r2, [pc, #12]	@ (8003894 <_TrySendOverflowPacket+0xdc>)
 8003886:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003888:	693b      	ldr	r3, [r7, #16]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3730      	adds	r7, #48	@ 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20013718 	.word	0x20013718
 8003898:	e0001004 	.word	0xe0001004

0800389c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	@ 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80038a8:	4b98      	ldr	r3, [pc, #608]	@ (8003b0c <_SendPacket+0x270>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d010      	beq.n	80038d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80038b0:	4b96      	ldr	r3, [pc, #600]	@ (8003b0c <_SendPacket+0x270>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 812d 	beq.w	8003b14 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80038ba:	4b94      	ldr	r3, [pc, #592]	@ (8003b0c <_SendPacket+0x270>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d109      	bne.n	80038d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80038c2:	f7ff ff79 	bl	80037b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80038c6:	4b91      	ldr	r3, [pc, #580]	@ (8003b0c <_SendPacket+0x270>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	f040 8124 	bne.w	8003b18 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80038d0:	e001      	b.n	80038d6 <_SendPacket+0x3a>
    goto Send;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <_SendPacket+0x3c>
Send:
 80038d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b1f      	cmp	r3, #31
 80038dc:	d809      	bhi.n	80038f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80038de:	4b8b      	ldr	r3, [pc, #556]	@ (8003b0c <_SendPacket+0x270>)
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8115 	bne.w	8003b1c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b17      	cmp	r3, #23
 80038f6:	d807      	bhi.n	8003908 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e0c4      	b.n	8003a92 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b7f      	cmp	r3, #127	@ 0x7f
 8003914:	d912      	bls.n	800393c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	09da      	lsrs	r2, r3, #7
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3b01      	subs	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	3a01      	subs	r2, #1
 800392e:	60fa      	str	r2, [r7, #12]
 8003930:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e006      	b.n	800394a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3b01      	subs	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b7e      	cmp	r3, #126	@ 0x7e
 800394e:	d807      	bhi.n	8003960 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3b01      	subs	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e098      	b.n	8003a92 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003966:	d212      	bcs.n	800398e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	09da      	lsrs	r2, r3, #7
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3b01      	subs	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	3a01      	subs	r2, #1
 8003980:	60fa      	str	r2, [r7, #12]
 8003982:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e081      	b.n	8003a92 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003994:	d21d      	bcs.n	80039d2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0b9a      	lsrs	r2, r3, #14
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	09db      	lsrs	r3, r3, #7
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	3a01      	subs	r2, #1
 80039b0:	60fa      	str	r2, [r7, #12]
 80039b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	3a01      	subs	r2, #1
 80039c4:	60fa      	str	r2, [r7, #12]
 80039c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e05f      	b.n	8003a92 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d8:	d228      	bcs.n	8003a2c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0d5a      	lsrs	r2, r3, #21
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0b9b      	lsrs	r3, r3, #14
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	3a01      	subs	r2, #1
 80039f4:	60fa      	str	r2, [r7, #12]
 80039f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	09db      	lsrs	r3, r3, #7
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	60fa      	str	r2, [r7, #12]
 8003a0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	60fa      	str	r2, [r7, #12]
 8003a20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e032      	b.n	8003a92 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0f1a      	lsrs	r2, r3, #28
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0d5b      	lsrs	r3, r3, #21
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	3a01      	subs	r2, #1
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0b9b      	lsrs	r3, r3, #14
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	3a01      	subs	r2, #1
 8003a5c:	60fa      	str	r2, [r7, #12]
 8003a5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	09db      	lsrs	r3, r3, #7
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	3a01      	subs	r2, #1
 8003a72:	60fa      	str	r2, [r7, #12]
 8003a74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	3a01      	subs	r2, #1
 8003a86:	60fa      	str	r2, [r7, #12]
 8003a88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a92:	4b1f      	ldr	r3, [pc, #124]	@ (8003b10 <_SendPacket+0x274>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003a98:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <_SendPacket+0x270>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	623b      	str	r3, [r7, #32]
 8003aaa:	e00b      	b.n	8003ac4 <_SendPacket+0x228>
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	6279      	str	r1, [r7, #36]	@ 0x24
 8003ab6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	09db      	lsrs	r3, r3, #7
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ac8:	d8f0      	bhi.n	8003aac <_SendPacket+0x210>
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003ada:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <_SendPacket+0x270>)
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	f7fc fb71 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003aee:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003af6:	4a05      	ldr	r2, [pc, #20]	@ (8003b0c <_SendPacket+0x270>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	e00f      	b.n	8003b1e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003afe:	4b03      	ldr	r3, [pc, #12]	@ (8003b0c <_SendPacket+0x270>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b01      	ldr	r3, [pc, #4]	@ (8003b0c <_SendPacket+0x270>)
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e008      	b.n	8003b1e <_SendPacket+0x282>
 8003b0c:	20013718 	.word	0x20013718
 8003b10:	e0001004 	.word	0xe0001004
    goto SendDone;
 8003b14:	bf00      	nop
 8003b16:	e002      	b.n	8003b1e <_SendPacket+0x282>
      goto SendDone;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <_SendPacket+0x282>
      goto SendDone;
 8003b1c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003b1e:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <_SendPacket+0x2d4>)
 8003b20:	7e1b      	ldrb	r3, [r3, #24]
 8003b22:	4619      	mov	r1, r3
 8003b24:	4a13      	ldr	r2, [pc, #76]	@ (8003b74 <_SendPacket+0x2d8>)
 8003b26:	460b      	mov	r3, r1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	440b      	add	r3, r1
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	336c      	adds	r3, #108	@ 0x6c
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <_SendPacket+0x2d4>)
 8003b36:	7e1b      	ldrb	r3, [r3, #24]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	490e      	ldr	r1, [pc, #56]	@ (8003b74 <_SendPacket+0x2d8>)
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4403      	add	r3, r0
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	3370      	adds	r3, #112	@ 0x70
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d00b      	beq.n	8003b66 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <_SendPacket+0x2d4>)
 8003b50:	789b      	ldrb	r3, [r3, #2]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <_SendPacket+0x2d4>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003b5c:	f7ff fdbe 	bl	80036dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <_SendPacket+0x2d4>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003b66:	bf00      	nop
 8003b68:	3728      	adds	r7, #40	@ 0x28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20013718 	.word	0x20013718
 8003b74:	20012e58 	.word	0x20012e58

08003b78 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003b86:	2300      	movs	r3, #0
 8003b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b8c:	4917      	ldr	r1, [pc, #92]	@ (8003bec <SEGGER_SYSVIEW_Init+0x74>)
 8003b8e:	4818      	ldr	r0, [pc, #96]	@ (8003bf0 <SEGGER_SYSVIEW_Init+0x78>)
 8003b90:	f7ff fc98 	bl	80034c4 <SEGGER_RTT_AllocUpBuffer>
 8003b94:	4603      	mov	r3, r0
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	4b16      	ldr	r3, [pc, #88]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b9a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b9e:	785a      	ldrb	r2, [r3, #1]
 8003ba0:	4b14      	ldr	r3, [pc, #80]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ba2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ba6:	7e1b      	ldrb	r3, [r3, #24]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2308      	movs	r3, #8
 8003bb0:	4a11      	ldr	r2, [pc, #68]	@ (8003bf8 <SEGGER_SYSVIEW_Init+0x80>)
 8003bb2:	490f      	ldr	r1, [pc, #60]	@ (8003bf0 <SEGGER_SYSVIEW_Init+0x78>)
 8003bb4:	f7ff fd0a 	bl	80035cc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <SEGGER_SYSVIEW_Init+0x84>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bc4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003bcc:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003bd2:	4a08      	ldr	r2, [pc, #32]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003bd8:	4a06      	ldr	r2, [pc, #24]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003bde:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20013310 	.word	0x20013310
 8003bf0:	080048c4 	.word	0x080048c4
 8003bf4:	20013718 	.word	0x20013718
 8003bf8:	20013710 	.word	0x20013710
 8003bfc:	e0001004 	.word	0xe0001004

08003c00 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003c08:	4a04      	ldr	r2, [pc, #16]	@ (8003c1c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6113      	str	r3, [r2, #16]
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20013718 	.word	0x20013718

08003c20 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c28:	f3ef 8311 	mrs	r3, BASEPRI
 8003c2c:	f04f 0120 	mov.w	r1, #32
 8003c30:	f381 8811 	msr	BASEPRI, r1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4808      	ldr	r0, [pc, #32]	@ (8003c58 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003c38:	f7ff fd44 	bl	80036c4 <_PreparePacket>
 8003c3c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68b8      	ldr	r0, [r7, #8]
 8003c44:	f7ff fe2a 	bl	800389c <_SendPacket>
  RECORD_END();
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f383 8811 	msr	BASEPRI, r3
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20013748 	.word	0x20013748

08003c5c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c66:	f3ef 8311 	mrs	r3, BASEPRI
 8003c6a:	f04f 0120 	mov.w	r1, #32
 8003c6e:	f381 8811 	msr	BASEPRI, r1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	4816      	ldr	r0, [pc, #88]	@ (8003cd0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003c76:	f7ff fd25 	bl	80036c4 <_PreparePacket>
 8003c7a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	e00b      	b.n	8003ca2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	1c59      	adds	r1, r3, #1
 8003c92:	61f9      	str	r1, [r7, #28]
 8003c94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ca6:	d8f0      	bhi.n	8003c8a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	61fa      	str	r2, [r7, #28]
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	6938      	ldr	r0, [r7, #16]
 8003cbe:	f7ff fded 	bl	800389c <_SendPacket>
  RECORD_END();
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f383 8811 	msr	BASEPRI, r3
}
 8003cc8:	bf00      	nop
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20013748 	.word	0x20013748

08003cd4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	@ 0x30
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce4:	f04f 0120 	mov.w	r1, #32
 8003ce8:	f381 8811 	msr	BASEPRI, r1
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	4825      	ldr	r0, [pc, #148]	@ (8003d84 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003cf0:	f7ff fce8 	bl	80036c4 <_PreparePacket>
 8003cf4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d02:	e00b      	b.n	8003d1c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003d0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d18:	09db      	lsrs	r3, r3, #7
 8003d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d20:	d8f0      	bhi.n	8003d04 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	e00b      	b.n	8003d54 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	1c59      	adds	r1, r3, #1
 8003d44:	6279      	str	r1, [r7, #36]	@ 0x24
 8003d46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	09db      	lsrs	r3, r3, #7
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d58:	d8f0      	bhi.n	8003d3c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	6979      	ldr	r1, [r7, #20]
 8003d6e:	69b8      	ldr	r0, [r7, #24]
 8003d70:	f7ff fd94 	bl	800389c <_SendPacket>
  RECORD_END();
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f383 8811 	msr	BASEPRI, r3
}
 8003d7a:	bf00      	nop
 8003d7c:	3730      	adds	r7, #48	@ 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20013748 	.word	0x20013748

08003d88 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08c      	sub	sp, #48	@ 0x30
 8003d8c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003d8e:	4b58      	ldr	r3, [pc, #352]	@ (8003ef0 <SEGGER_SYSVIEW_Start+0x168>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003d94:	f3ef 8311 	mrs	r3, BASEPRI
 8003d98:	f04f 0120 	mov.w	r1, #32
 8003d9c:	f381 8811 	msr	BASEPRI, r1
 8003da0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003da2:	4b53      	ldr	r3, [pc, #332]	@ (8003ef0 <SEGGER_SYSVIEW_Start+0x168>)
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	220a      	movs	r2, #10
 8003da8:	4952      	ldr	r1, [pc, #328]	@ (8003ef4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc fa10 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003db6:	200a      	movs	r0, #10
 8003db8:	f7ff ff32 	bl	8003c20 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8003dc0:	f04f 0120 	mov.w	r1, #32
 8003dc4:	f381 8811 	msr	BASEPRI, r1
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	484b      	ldr	r0, [pc, #300]	@ (8003ef8 <SEGGER_SYSVIEW_Start+0x170>)
 8003dcc:	f7ff fc7a 	bl	80036c4 <_PreparePacket>
 8003dd0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dda:	4b45      	ldr	r3, [pc, #276]	@ (8003ef0 <SEGGER_SYSVIEW_Start+0x168>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de0:	e00b      	b.n	8003dfa <SEGGER_SYSVIEW_Start+0x72>
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	1c59      	adds	r1, r3, #1
 8003dea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003dec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	09db      	lsrs	r3, r3, #7
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dfe:	d8f0      	bhi.n	8003de2 <SEGGER_SYSVIEW_Start+0x5a>
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e14:	4b36      	ldr	r3, [pc, #216]	@ (8003ef0 <SEGGER_SYSVIEW_Start+0x168>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	e00b      	b.n	8003e34 <SEGGER_SYSVIEW_Start+0xac>
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	1c59      	adds	r1, r3, #1
 8003e24:	6279      	str	r1, [r7, #36]	@ 0x24
 8003e26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	09db      	lsrs	r3, r3, #7
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e38:	d8f0      	bhi.n	8003e1c <SEGGER_SYSVIEW_Start+0x94>
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	4b28      	ldr	r3, [pc, #160]	@ (8003ef0 <SEGGER_SYSVIEW_Start+0x168>)
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	e00b      	b.n	8003e6e <SEGGER_SYSVIEW_Start+0xe6>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	1c59      	adds	r1, r3, #1
 8003e5e:	61f9      	str	r1, [r7, #28]
 8003e60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	09db      	lsrs	r3, r3, #7
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e72:	d8f0      	bhi.n	8003e56 <SEGGER_SYSVIEW_Start+0xce>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	61fa      	str	r2, [r7, #28]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	e00b      	b.n	8003ea6 <SEGGER_SYSVIEW_Start+0x11e>
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	6179      	str	r1, [r7, #20]
 8003e98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	09db      	lsrs	r3, r3, #7
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eaa:	d8f0      	bhi.n	8003e8e <SEGGER_SYSVIEW_Start+0x106>
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	617a      	str	r2, [r7, #20]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003ebc:	2218      	movs	r2, #24
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fceb 	bl	800389c <_SendPacket>
      RECORD_END();
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003ecc:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <SEGGER_SYSVIEW_Start+0x168>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003ed4:	4b06      	ldr	r3, [pc, #24]	@ (8003ef0 <SEGGER_SYSVIEW_Start+0x168>)
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003eda:	f000 f9eb 	bl	80042b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003ede:	f000 f9b1 	bl	8004244 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003ee2:	f000 fba3 	bl	800462c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003ee6:	bf00      	nop
 8003ee8:	3730      	adds	r7, #48	@ 0x30
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20013718 	.word	0x20013718
 8003ef4:	08004900 	.word	0x08004900
 8003ef8:	20013748 	.word	0x20013748

08003efc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f02:	f3ef 8311 	mrs	r3, BASEPRI
 8003f06:	f04f 0120 	mov.w	r1, #32
 8003f0a:	f381 8811 	msr	BASEPRI, r1
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	480b      	ldr	r0, [pc, #44]	@ (8003f40 <SEGGER_SYSVIEW_Stop+0x44>)
 8003f12:	f7ff fbd7 	bl	80036c4 <_PreparePacket>
 8003f16:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003f18:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <SEGGER_SYSVIEW_Stop+0x48>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003f20:	220b      	movs	r2, #11
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	6838      	ldr	r0, [r7, #0]
 8003f26:	f7ff fcb9 	bl	800389c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <SEGGER_SYSVIEW_Stop+0x48>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f383 8811 	msr	BASEPRI, r3
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20013748 	.word	0x20013748
 8003f44:	20013718 	.word	0x20013718

08003f48 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f52:	f04f 0120 	mov.w	r1, #32
 8003f56:	f381 8811 	msr	BASEPRI, r1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	4845      	ldr	r0, [pc, #276]	@ (8004074 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003f5e:	f7ff fbb1 	bl	80036c4 <_PreparePacket>
 8003f62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f6c:	4b42      	ldr	r3, [pc, #264]	@ (8004078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f72:	e00b      	b.n	8003f8c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7a:	1c59      	adds	r1, r3, #1
 8003f7c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003f7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f88:	09db      	lsrs	r3, r3, #7
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f90:	d8f0      	bhi.n	8003f74 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	4b34      	ldr	r3, [pc, #208]	@ (8004078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	e00b      	b.n	8003fc6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	1c59      	adds	r1, r3, #1
 8003fb6:	6279      	str	r1, [r7, #36]	@ 0x24
 8003fb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	09db      	lsrs	r3, r3, #7
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fca:	d8f0      	bhi.n	8003fae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e00b      	b.n	8004000 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	61f9      	str	r1, [r7, #28]
 8003ff2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	09db      	lsrs	r3, r3, #7
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b7f      	cmp	r3, #127	@ 0x7f
 8004004:	d8f0      	bhi.n	8003fe8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	61fa      	str	r2, [r7, #28]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e00b      	b.n	8004038 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	6179      	str	r1, [r7, #20]
 800402a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	09db      	lsrs	r3, r3, #7
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b7f      	cmp	r3, #127	@ 0x7f
 800403c:	d8f0      	bhi.n	8004020 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	617a      	str	r2, [r7, #20]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800404e:	2218      	movs	r2, #24
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f7ff fc22 	bl	800389c <_SendPacket>
  RECORD_END();
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800405e:	4b06      	ldr	r3, [pc, #24]	@ (8004078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004066:	4b04      	ldr	r3, [pc, #16]	@ (8004078 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	4798      	blx	r3
  }
}
 800406c:	bf00      	nop
 800406e:	3730      	adds	r7, #48	@ 0x30
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20013748 	.word	0x20013748
 8004078:	20013718 	.word	0x20013718

0800407c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b092      	sub	sp, #72	@ 0x48
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004084:	f3ef 8311 	mrs	r3, BASEPRI
 8004088:	f04f 0120 	mov.w	r1, #32
 800408c:	f381 8811 	msr	BASEPRI, r1
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	486a      	ldr	r0, [pc, #424]	@ (800423c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004094:	f7ff fb16 	bl	80036c4 <_PreparePacket>
 8004098:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b66      	ldr	r3, [pc, #408]	@ (8004240 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ae:	e00b      	b.n	80040c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80040b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b6:	1c59      	adds	r1, r3, #1
 80040b8:	6479      	str	r1, [r7, #68]	@ 0x44
 80040ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c4:	09db      	lsrs	r3, r3, #7
 80040c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80040cc:	d8f0      	bhi.n	80040b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80040ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80040d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040e8:	e00b      	b.n	8004102 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80040f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	09db      	lsrs	r3, r3, #7
 8004100:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004104:	2b7f      	cmp	r3, #127	@ 0x7f
 8004106:	d8f0      	bhi.n	80040ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800410e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004116:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	4619      	mov	r1, r3
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff fa9f 	bl	8003664 <_EncodeStr>
 8004126:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004128:	2209      	movs	r2, #9
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	6938      	ldr	r0, [r7, #16]
 800412e:	f7ff fbb5 	bl	800389c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b40      	ldr	r3, [pc, #256]	@ (8004240 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
 8004146:	e00b      	b.n	8004160 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414a:	b2da      	uxtb	r2, r3
 800414c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414e:	1c59      	adds	r1, r3, #1
 8004150:	6379      	str	r1, [r7, #52]	@ 0x34
 8004152:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	09db      	lsrs	r3, r3, #7
 800415e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	2b7f      	cmp	r3, #127	@ 0x7f
 8004164:	d8f0      	bhi.n	8004148 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	637a      	str	r2, [r7, #52]	@ 0x34
 800416c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004174:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004180:	e00b      	b.n	800419a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004184:	b2da      	uxtb	r2, r3
 8004186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004188:	1c59      	adds	r1, r3, #1
 800418a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800418c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004196:	09db      	lsrs	r3, r3, #7
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	2b7f      	cmp	r3, #127	@ 0x7f
 800419e:	d8f0      	bhi.n	8004182 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80041a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	623b      	str	r3, [r7, #32]
 80041ba:	e00b      	b.n	80041d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	1c59      	adds	r1, r3, #1
 80041c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80041c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	09db      	lsrs	r3, r3, #7
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80041d8:	d8f0      	bhi.n	80041bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	627a      	str	r2, [r7, #36]	@ 0x24
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	e00b      	b.n	800420c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	1c59      	adds	r1, r3, #1
 80041fc:	61f9      	str	r1, [r7, #28]
 80041fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	09db      	lsrs	r3, r3, #7
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004210:	d8f0      	bhi.n	80041f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	61fa      	str	r2, [r7, #28]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004222:	2215      	movs	r2, #21
 8004224:	68f9      	ldr	r1, [r7, #12]
 8004226:	6938      	ldr	r0, [r7, #16]
 8004228:	f7ff fb38 	bl	800389c <_SendPacket>
  RECORD_END();
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f383 8811 	msr	BASEPRI, r3
}
 8004232:	bf00      	nop
 8004234:	3748      	adds	r7, #72	@ 0x48
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20013748 	.word	0x20013748
 8004240:	20013718 	.word	0x20013718

08004244 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004248:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800425a:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4798      	blx	r3
  }
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20013718 	.word	0x20013718

0800426c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004274:	f3ef 8311 	mrs	r3, BASEPRI
 8004278:	f04f 0120 	mov.w	r1, #32
 800427c:	f381 8811 	msr	BASEPRI, r1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	480b      	ldr	r0, [pc, #44]	@ (80042b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004284:	f7ff fa1e 	bl	80036c4 <_PreparePacket>
 8004288:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800428a:	2280      	movs	r2, #128	@ 0x80
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	6938      	ldr	r0, [r7, #16]
 8004290:	f7ff f9e8 	bl	8003664 <_EncodeStr>
 8004294:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004296:	220e      	movs	r2, #14
 8004298:	68f9      	ldr	r1, [r7, #12]
 800429a:	6938      	ldr	r0, [r7, #16]
 800429c:	f7ff fafe 	bl	800389c <_SendPacket>
  RECORD_END();
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f383 8811 	msr	BASEPRI, r3
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20013748 	.word	0x20013748

080042b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80042ba:	4b15      	ldr	r3, [pc, #84]	@ (8004310 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01a      	beq.n	80042f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80042c2:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80042cc:	4b10      	ldr	r3, [pc, #64]	@ (8004310 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4798      	blx	r3
 80042d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80042d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80042da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	000a      	movs	r2, r1
 80042e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80042ea:	4613      	mov	r3, r2
 80042ec:	461a      	mov	r2, r3
 80042ee:	4621      	mov	r1, r4
 80042f0:	200d      	movs	r0, #13
 80042f2:	f7ff fcef 	bl	8003cd4 <SEGGER_SYSVIEW_RecordU32x2>
 80042f6:	e006      	b.n	8004306 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	200c      	movs	r0, #12
 8004300:	f7ff fcac 	bl	8003c5c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bd90      	pop	{r4, r7, pc}
 800430e:	bf00      	nop
 8004310:	20013718 	.word	0x20013718
 8004314:	e0001004 	.word	0xe0001004

08004318 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800431e:	f3ef 8311 	mrs	r3, BASEPRI
 8004322:	f04f 0120 	mov.w	r1, #32
 8004326:	f381 8811 	msr	BASEPRI, r1
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	4807      	ldr	r0, [pc, #28]	@ (800434c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800432e:	f7ff f9c9 	bl	80036c4 <_PreparePacket>
 8004332:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004334:	2211      	movs	r2, #17
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	6838      	ldr	r0, [r7, #0]
 800433a:	f7ff faaf 	bl	800389c <_SendPacket>
  RECORD_END();
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f383 8811 	msr	BASEPRI, r3
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20013748 	.word	0x20013748

08004350 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004358:	f3ef 8311 	mrs	r3, BASEPRI
 800435c:	f04f 0120 	mov.w	r1, #32
 8004360:	f381 8811 	msr	BASEPRI, r1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	4819      	ldr	r0, [pc, #100]	@ (80043cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004368:	f7ff f9ac 	bl	80036c4 <_PreparePacket>
 800436c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004372:	4b17      	ldr	r3, [pc, #92]	@ (80043d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e00b      	b.n	800439e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	1c59      	adds	r1, r3, #1
 800438e:	61f9      	str	r1, [r7, #28]
 8004390:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	09db      	lsrs	r3, r3, #7
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80043a2:	d8f0      	bhi.n	8004386 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	61fa      	str	r2, [r7, #28]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80043b4:	2208      	movs	r2, #8
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	6938      	ldr	r0, [r7, #16]
 80043ba:	f7ff fa6f 	bl	800389c <_SendPacket>
  RECORD_END();
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f383 8811 	msr	BASEPRI, r3
}
 80043c4:	bf00      	nop
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20013748 	.word	0x20013748
 80043d0:	20013718 	.word	0x20013718

080043d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043dc:	f3ef 8311 	mrs	r3, BASEPRI
 80043e0:	f04f 0120 	mov.w	r1, #32
 80043e4:	f381 8811 	msr	BASEPRI, r1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	4819      	ldr	r0, [pc, #100]	@ (8004450 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80043ec:	f7ff f96a 	bl	80036c4 <_PreparePacket>
 80043f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80043f6:	4b17      	ldr	r3, [pc, #92]	@ (8004454 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e00b      	b.n	8004422 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	1c59      	adds	r1, r3, #1
 8004412:	61f9      	str	r1, [r7, #28]
 8004414:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	09db      	lsrs	r3, r3, #7
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b7f      	cmp	r3, #127	@ 0x7f
 8004426:	d8f0      	bhi.n	800440a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	61fa      	str	r2, [r7, #28]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004438:	2204      	movs	r2, #4
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	6938      	ldr	r0, [r7, #16]
 800443e:	f7ff fa2d 	bl	800389c <_SendPacket>
  RECORD_END();
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f383 8811 	msr	BASEPRI, r3
}
 8004448:	bf00      	nop
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20013748 	.word	0x20013748
 8004454:	20013718 	.word	0x20013718

08004458 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004460:	f3ef 8311 	mrs	r3, BASEPRI
 8004464:	f04f 0120 	mov.w	r1, #32
 8004468:	f381 8811 	msr	BASEPRI, r1
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	4819      	ldr	r0, [pc, #100]	@ (80044d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004470:	f7ff f928 	bl	80036c4 <_PreparePacket>
 8004474:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800447a:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e00b      	b.n	80044a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	1c59      	adds	r1, r3, #1
 8004496:	61f9      	str	r1, [r7, #28]
 8004498:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	09db      	lsrs	r3, r3, #7
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80044aa:	d8f0      	bhi.n	800448e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	61fa      	str	r2, [r7, #28]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80044bc:	2206      	movs	r2, #6
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	6938      	ldr	r0, [r7, #16]
 80044c2:	f7ff f9eb 	bl	800389c <_SendPacket>
  RECORD_END();
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f383 8811 	msr	BASEPRI, r3
}
 80044cc:	bf00      	nop
 80044ce:	3720      	adds	r7, #32
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20013748 	.word	0x20013748
 80044d8:	20013718 	.word	0x20013718

080044dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	@ 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80044e6:	4b40      	ldr	r3, [pc, #256]	@ (80045e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d077      	beq.n	80045de <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80044ee:	4b3e      	ldr	r3, [pc, #248]	@ (80045e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80044f4:	2300      	movs	r3, #0
 80044f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044f8:	e008      	b.n	800450c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80044fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	3301      	adds	r3, #1
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004510:	429a      	cmp	r2, r3
 8004512:	d3f2      	bcc.n	80044fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8004514:	e000      	b.n	8004518 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004516:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d055      	beq.n	80045ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800451e:	f3ef 8311 	mrs	r3, BASEPRI
 8004522:	f04f 0120 	mov.w	r1, #32
 8004526:	f381 8811 	msr	BASEPRI, r1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	482f      	ldr	r0, [pc, #188]	@ (80045ec <SEGGER_SYSVIEW_SendModule+0x110>)
 800452e:	f7ff f8c9 	bl	80036c4 <_PreparePacket>
 8004532:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	e00b      	b.n	800455a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	1c59      	adds	r1, r3, #1
 800454a:	6279      	str	r1, [r7, #36]	@ 0x24
 800454c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	09db      	lsrs	r3, r3, #7
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2b7f      	cmp	r3, #127	@ 0x7f
 800455e:	d8f0      	bhi.n	8004542 <SEGGER_SYSVIEW_SendModule+0x66>
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	627a      	str	r2, [r7, #36]	@ 0x24
 8004566:	6a3a      	ldr	r2, [r7, #32]
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e00b      	b.n	8004594 <SEGGER_SYSVIEW_SendModule+0xb8>
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	1c59      	adds	r1, r3, #1
 8004584:	61f9      	str	r1, [r7, #28]
 8004586:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	09db      	lsrs	r3, r3, #7
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b7f      	cmp	r3, #127	@ 0x7f
 8004598:	d8f0      	bhi.n	800457c <SEGGER_SYSVIEW_SendModule+0xa0>
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	61fa      	str	r2, [r7, #28]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2280      	movs	r2, #128	@ 0x80
 80045b0:	4619      	mov	r1, r3
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff f856 	bl	8003664 <_EncodeStr>
 80045b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80045ba:	2216      	movs	r2, #22
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	6938      	ldr	r0, [r7, #16]
 80045c0:	f7ff f96c 	bl	800389c <_SendPacket>
      RECORD_END();
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80045ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d006      	beq.n	80045de <SEGGER_SYSVIEW_SendModule+0x102>
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4798      	blx	r3
    }
  }
}
 80045de:	bf00      	nop
 80045e0:	3730      	adds	r7, #48	@ 0x30
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20013740 	.word	0x20013740
 80045ec:	20013748 	.word	0x20013748

080045f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80045f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004628 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00f      	beq.n	800461e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80045fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f2      	bne.n	8004604 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20013740 	.word	0x20013740

0800462c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004632:	f3ef 8311 	mrs	r3, BASEPRI
 8004636:	f04f 0120 	mov.w	r1, #32
 800463a:	f381 8811 	msr	BASEPRI, r1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	4817      	ldr	r0, [pc, #92]	@ (80046a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004642:	f7ff f83f 	bl	80036c4 <_PreparePacket>
 8004646:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	4b14      	ldr	r3, [pc, #80]	@ (80046a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	e00b      	b.n	8004670 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1c59      	adds	r1, r3, #1
 8004660:	6179      	str	r1, [r7, #20]
 8004662:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	09db      	lsrs	r3, r3, #7
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b7f      	cmp	r3, #127	@ 0x7f
 8004674:	d8f0      	bhi.n	8004658 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	617a      	str	r2, [r7, #20]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004686:	221b      	movs	r2, #27
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	68b8      	ldr	r0, [r7, #8]
 800468c:	f7ff f906 	bl	800389c <_SendPacket>
  RECORD_END();
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f383 8811 	msr	BASEPRI, r3
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20013748 	.word	0x20013748
 80046a4:	20013744 	.word	0x20013744

080046a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	@ 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046b0:	f3ef 8311 	mrs	r3, BASEPRI
 80046b4:	f04f 0120 	mov.w	r1, #32
 80046b8:	f381 8811 	msr	BASEPRI, r1
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	4827      	ldr	r0, [pc, #156]	@ (800475c <SEGGER_SYSVIEW_Warn+0xb4>)
 80046c0:	f7ff f800 	bl	80036c4 <_PreparePacket>
 80046c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046c6:	2280      	movs	r2, #128	@ 0x80
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	6938      	ldr	r0, [r7, #16]
 80046cc:	f7fe ffca 	bl	8003664 <_EncodeStr>
 80046d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d6:	2301      	movs	r3, #1
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	e00b      	b.n	80046f4 <SEGGER_SYSVIEW_Warn+0x4c>
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80046e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	09db      	lsrs	r3, r3, #7
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80046f8:	d8f0      	bhi.n	80046dc <SEGGER_SYSVIEW_Warn+0x34>
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e00b      	b.n	800472c <SEGGER_SYSVIEW_Warn+0x84>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	61f9      	str	r1, [r7, #28]
 800471e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	09db      	lsrs	r3, r3, #7
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004730:	d8f0      	bhi.n	8004714 <SEGGER_SYSVIEW_Warn+0x6c>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	61fa      	str	r2, [r7, #28]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004742:	221a      	movs	r2, #26
 8004744:	68f9      	ldr	r1, [r7, #12]
 8004746:	6938      	ldr	r0, [r7, #16]
 8004748:	f7ff f8a8 	bl	800389c <_SendPacket>
  RECORD_END();
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f383 8811 	msr	BASEPRI, r3
}
 8004752:	bf00      	nop
 8004754:	3728      	adds	r7, #40	@ 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20013748 	.word	0x20013748

08004760 <memcmp>:
 8004760:	b510      	push	{r4, lr}
 8004762:	3901      	subs	r1, #1
 8004764:	4402      	add	r2, r0
 8004766:	4290      	cmp	r0, r2
 8004768:	d101      	bne.n	800476e <memcmp+0xe>
 800476a:	2000      	movs	r0, #0
 800476c:	e005      	b.n	800477a <memcmp+0x1a>
 800476e:	7803      	ldrb	r3, [r0, #0]
 8004770:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004774:	42a3      	cmp	r3, r4
 8004776:	d001      	beq.n	800477c <memcmp+0x1c>
 8004778:	1b18      	subs	r0, r3, r4
 800477a:	bd10      	pop	{r4, pc}
 800477c:	3001      	adds	r0, #1
 800477e:	e7f2      	b.n	8004766 <memcmp+0x6>

08004780 <memset>:
 8004780:	4402      	add	r2, r0
 8004782:	4603      	mov	r3, r0
 8004784:	4293      	cmp	r3, r2
 8004786:	d100      	bne.n	800478a <memset+0xa>
 8004788:	4770      	bx	lr
 800478a:	f803 1b01 	strb.w	r1, [r3], #1
 800478e:	e7f9      	b.n	8004784 <memset+0x4>

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4d0d      	ldr	r5, [pc, #52]	@ (80047c8 <__libc_init_array+0x38>)
 8004794:	4c0d      	ldr	r4, [pc, #52]	@ (80047cc <__libc_init_array+0x3c>)
 8004796:	1b64      	subs	r4, r4, r5
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	2600      	movs	r6, #0
 800479c:	42a6      	cmp	r6, r4
 800479e:	d109      	bne.n	80047b4 <__libc_init_array+0x24>
 80047a0:	4d0b      	ldr	r5, [pc, #44]	@ (80047d0 <__libc_init_array+0x40>)
 80047a2:	4c0c      	ldr	r4, [pc, #48]	@ (80047d4 <__libc_init_array+0x44>)
 80047a4:	f000 f826 	bl	80047f4 <_init>
 80047a8:	1b64      	subs	r4, r4, r5
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	2600      	movs	r6, #0
 80047ae:	42a6      	cmp	r6, r4
 80047b0:	d105      	bne.n	80047be <__libc_init_array+0x2e>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b8:	4798      	blx	r3
 80047ba:	3601      	adds	r6, #1
 80047bc:	e7ee      	b.n	800479c <__libc_init_array+0xc>
 80047be:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c2:	4798      	blx	r3
 80047c4:	3601      	adds	r6, #1
 80047c6:	e7f2      	b.n	80047ae <__libc_init_array+0x1e>
 80047c8:	08004914 	.word	0x08004914
 80047cc:	08004914 	.word	0x08004914
 80047d0:	08004914 	.word	0x08004914
 80047d4:	08004918 	.word	0x08004918

080047d8 <memcpy>:
 80047d8:	440a      	add	r2, r1
 80047da:	4291      	cmp	r1, r2
 80047dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80047e0:	d100      	bne.n	80047e4 <memcpy+0xc>
 80047e2:	4770      	bx	lr
 80047e4:	b510      	push	{r4, lr}
 80047e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ee:	4291      	cmp	r1, r2
 80047f0:	d1f9      	bne.n	80047e6 <memcpy+0xe>
 80047f2:	bd10      	pop	{r4, pc}

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr
